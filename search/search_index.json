{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TFGrid Studio Documentation","text":"<p>Complete development platform for ThreeFold Grid</p> <p>Build, deploy, and scale decentralized applications with <code>tfgrid-compose</code> CLI and integrated tools.</p> <p>\ud83c\udf10 New here? Check out our main website for an overview of TFGrid Studio, pricing, and features.</p>"},{"location":"#what-is-tfgrid-studio","title":"\ud83c\udfaf What is TFGrid Studio?","text":"<p>TFGrid Studio is a complete development platform for ThreeFold Grid. The flagship tool, tfgrid-compose, brings docker-compose-style simplicity to decentralized deployments.</p> <pre><code># Deploy any application with one command\ntfgrid-compose up my-app\n</code></pre> <p>No vendor lock-in. Industry standards. Decentralized infrastructure.</p>"},{"location":"#current-status","title":"\u2728 Current Status","text":""},{"location":"#production-ready-v0100","title":"\u2705 Production Ready (v0.10.0)","text":"Component Status Description tfgrid-compose \u2705 v0.10.0 Universal orchestrator with registry integration tfgrid-ai-agent \u2705 v0.10.0 AI coding agent (reference application) tfgrid-gitea \ud83c\udd95 v1.0.0 Self-hosted Git service with web interface Single-VM Pattern \u2705 Production Deploy isolated VMs with private networking Gateway Pattern \u2705 Production Multi-VM with public access and SSL K3s Pattern \u2705 Production Full Kubernetes cluster deployment App Registry \u2705 v0.10.0 Deploy apps by name from registry Context Files \u2705 Production Simplified workflow with <code>.tfgrid-compose.yaml</code>"},{"location":"#in-progress-v0101-95-complete","title":"\ud83d\udd28 In Progress (v0.10.1) - 95% Complete!","text":"Component Status Description Login/Logout UX \u2705 Complete Enhanced credential management ThreeFold Setup Guide \u2705 Complete Complete DIY onboarding documentation Config Management \u2705 Complete <code>tfgrid-compose config</code> commands Docs Command \u2705 Complete Open docs in browser Enhanced Error Messages \u2705 Complete Helpful guidance throughout CLI Release \ud83d\udd04 Testing Final testing before release"},{"location":"#coming-soon","title":"\ud83d\udea7 Coming Soon","text":"Component Status Timeline Description AI Gateway Integration \ud83d\udccb Planned v0.11.0 (Nov) AI agent + Gateway + Gitea workflow AI Dashboard Web UI \ud83d\udccb Planned v0.12.0 (Dec-Jan) Visual project management Voice Coding \ud83d\udccb Planned v0.13.0 (Feb) \"Vibe code by talking\" interface CI/CD Integration \ud83d\udccb Planned v0.13.0+ GitHub Actions, GitLab CI Web Dashboard \ud83d\udccb Planned Q2 2026 Complete visual management Managed Service \ud83d\udccb Planned Q3 2026+ Email + credit card deployments"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"#1-install-tfgrid-compose","title":"1. Install tfgrid-compose","text":"<pre><code># One-line installer\ncurl -sSL install.tfgrid.studio/install.sh | sh\n\n# Verify installation\ntfgrid-compose --version\n</code></pre>"},{"location":"#2-set-up-threefold","title":"2. Set Up ThreeFold","text":"<p>Need a ThreeFold wallet with TFT? See the complete setup guide.</p> <p>Already have a wallet? Configure it: <pre><code>tfgrid-compose login\n# Enter your seed phrase when prompted\n</code></pre></p>"},{"location":"#3-deploy-an-app","title":"3. Deploy an App","text":"<pre><code># Deploy official app (v0.10.0+)\ntfgrid-compose up tfgrid-ai-agent\n\n# Or use local path (current)\ntfgrid-compose up ../tfgrid-ai-agent\n\n# Or specify app path\ntfgrid-compose up ../tfgrid-ai-agent\n</code></pre> <p>That's it! Your application is now running on ThreeFold Grid. \ud83c\udf89</p>"},{"location":"#documentation-overview","title":"\ud83d\udcda Documentation Overview","text":""},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Introduction - What is TFGrid Compose and why use it</li> <li>Installation - Install and configure tfgrid-compose</li> <li>ThreeFold Setup - Complete DIY guide (wallet, TFT, KYC)</li> <li>Quick Start - Deploy your first application in 5 minutes</li> <li>Core Concepts - Understand patterns, apps, and manifests</li> </ul>"},{"location":"#deployment-patterns","title":"Deployment Patterns","text":"<ul> <li>Pattern Overview - Understanding the pattern system</li> <li>Single-VM Pattern - \u2705 Production ready</li> <li>Gateway Pattern - \u2705 Production ready</li> <li>K3s Pattern - \u2705 Production ready</li> </ul>"},{"location":"#applications","title":"Applications","text":"<ul> <li>Application Overview - How apps work in TFGrid Compose</li> <li>TFGrid AI Agent - \u2705 AI coding agent</li> <li>TFGrid Gitea - \ud83c\udd95 Self-hosted Git service</li> <li>Creating Apps - Build your own deployable apps</li> </ul>"},{"location":"#cli-reference","title":"CLI Reference","text":"<ul> <li>CLI Commands - Complete command reference</li> <li>App Manifest - <code>tfgrid-compose.yaml</code> specification</li> <li>Context File - <code>.tfgrid-compose.yaml</code> usage</li> <li>State Management - How state is tracked</li> <li>Environment Variables - Configuration options</li> </ul>"},{"location":"#guides","title":"Guides","text":"<ul> <li>App Registry - \ud83c\udd95 Deploy apps by name (v0.10.0+)</li> <li>Migration Guide - Migrate from standalone repos</li> <li>Advanced Deployment - Production deployment strategies</li> <li>Networking - WireGuard and Mycelium setup</li> <li>Security - Security best practices</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<ul> <li>Design Decisions - Why we built it this way</li> <li>Source Repositories - Acknowledgment of source work</li> <li>Comparison - vs standalone repos, vs other platforms</li> </ul>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li>Platform Roadmap - \ud83d\ude80 Now / Next / Later</li> <li>Now - Active Development - What we're building</li> <li>Next - Planned Features - What's coming</li> <li>Later - Future Concepts - Long-term vision</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<ul> <li>Contributing Guide - How to contribute</li> <li>Code of Conduct - Community guidelines</li> <li>Security Policy - Report security issues</li> </ul>"},{"location":"#development","title":"Development","text":"<ul> <li>Submit Your App - Share your app with the community</li> <li>Pattern Contract - How patterns communicate</li> <li>Pattern Development - Create custom patterns</li> <li>Versioning Policy - Version management</li> </ul>"},{"location":"#use-cases","title":"\ud83c\udfaf Use Cases","text":"<p>Deploy isolated AI coding environments on ThreeFold Grid. <pre><code>tfgrid-compose up tfgrid-ai-agent\n</code></pre></p>"},{"location":"#web-applications","title":"Web Applications","text":"<p>Deploy web apps with public IPv4, SSL, and reverse proxy. <pre><code>tfgrid-compose up my-webapp --pattern=gateway --domain=myapp.com\n</code></pre></p>"},{"location":"#cloud-native-apps","title":"Cloud-Native Apps","text":"<p>Deploy microservices on Kubernetes clusters. <pre><code>tfgrid-compose up my-saas --pattern=k3s\n</code></pre></p>"},{"location":"#databases","title":"Databases","text":"<p>Deploy databases with persistent storage and private networking. <pre><code>tfgrid-compose up my-postgres --pattern=single-vm\n</code></pre></p>"},{"location":"#why-tfgrid-compose","title":"\ud83d\udca1 Why TFGrid Compose?","text":""},{"location":"#no-vendor-lock-in","title":"\u2705 No Vendor Lock-in","text":"<p>Uses industry standards: Terraform, Ansible, Kubernetes. Your apps aren't locked to ThreeFold Grid.</p>"},{"location":"#simple-powerful","title":"\u2705 Simple &amp; Powerful","text":"<p>Heroku-like UX with production-ready patterns. One command to deploy, full control when needed.</p>"},{"location":"#decentralized-infrastructure","title":"\u2705 Decentralized Infrastructure","text":"<p>Runs on ThreeFold Grid: decentralized compute, no single point of failure, cost-effective.</p>"},{"location":"#open-source","title":"\u2705 Open Source","text":"<p>Apache 2.0 license. Free to use, modify, and distribute. Community-driven development.</p>"},{"location":"#battle-tested","title":"\u2705 Battle-Tested","text":"<p>Built from proven, working implementations: - Gateway pattern: Based on mik-tf/tfgrid-gateway - K3s pattern: Based on ucli-tools/tfgrid-k3s - AI agent: Based on mik-tf/tfgrid-ai-agent</p>"},{"location":"#links","title":"\ud83d\udd17 Links","text":"<ul> <li>Website: tfgrid.studio - Marketing site</li> <li>Documentation: docs.tfgrid.studio - You are here!</li> <li>GitHub: github.com/tfgrid-studio - Organization</li> <li>CLI Tool: tfgrid-compose - Main repository</li> <li>AI Agent: tfgrid-ai-agent - AI development</li> <li>Gitea: tfgrid-gitea - Self-hosted Git</li> <li>ThreeFold Grid: threefold.io - Infrastructure</li> </ul>"},{"location":"#community-support","title":"\ud83e\udd1d Community &amp; Support","text":"<ul> <li>Discussions: GitHub Discussions</li> <li>Issues: Open issues in respective repositories</li> <li>Contributing: See contributing guide</li> </ul>"},{"location":"#license","title":"\ud83d\udcdc License","text":"<p>FOSS Repositories: Apache 2.0 License Commercial Repositories: Business Source License / Proprietary</p> <p>See individual repositories for details.</p> <p>Made with \ud83d\udd25 for the decentralized web</p> <p>Get Started \u2022 View on GitHub</p>"},{"location":"architecture/overview/","title":"TFGrid Compose Architecture","text":"<p>Version: 0.9.0 Status: Active Audience: Developers, Contributors, Advanced Users</p>"},{"location":"architecture/overview/#table-of-contents","title":"Table of Contents","text":"<ol> <li>System Overview</li> <li>Core Components</li> <li>Data Flow</li> <li>Pattern System</li> <li>State Management</li> <li>Extension Guide</li> <li>Design Decisions</li> <li>Performance Considerations</li> </ol>"},{"location":"architecture/overview/#system-overview","title":"System Overview","text":""},{"location":"architecture/overview/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     tfgrid-compose CLI                      \u2502\n\u2502                    (User Entry Point)                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                   \u2502\n                   \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Core Orchestrator                        \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  Validation \u2192 Pattern Loading \u2192 App Loading          \u2502   \u2502\n\u2502  \u2502       \u2193            \u2193               \u2193                 \u2502   \u2502\n\u2502  \u2502  Infrastructure \u2192 Network \u2192 Platform \u2192 App Deploy    \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502                            \u2502\n              \u25bc                            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Pattern System         \u2502  \u2502   Task Executors         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502 Infrastructure/    \u2502  \u2502  \u2502  \u2502 terraform.sh       \u2502  \u2502\n\u2502  \u2502 Platform/          \u2502  \u2502  \u2502  \u2502 wireguard.sh       \u2502  \u2502\n\u2502  \u2502 App/               \u2502  \u2502  \u2502  \u2502 ansible.sh         \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502                            \u2502\n              \u25bc                            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     ThreeFold Grid                          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502   Nodes    \u2502    \u2502  Network   \u2502  \u2502  Storage/ZDB     \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/overview/#design-philosophy","title":"Design Philosophy","text":"<p>1. Pattern-Based Architecture</p> <ul> <li>Patterns encapsulate infrastructure, platform, and application concerns</li> <li>Orchestrator is pattern-agnostic (knows nothing about pattern internals)</li> <li>New patterns can be added without modifying core code</li> </ul> <p>2. Contract-Driven Integration</p> <ul> <li>Patterns must implement a standard contract</li> <li>Orchestrator consumes contract outputs (primary_ip, deployment_name, etc.)</li> <li>Loose coupling enables extensibility</li> </ul> <p>3. Shell-Based Implementation</p> <ul> <li>Bash scripts for simplicity and transparency</li> <li>Easy to understand, debug, and extend</li> <li>Minimal dependencies (bash, common Unix tools)</li> <li>Works on any Unix-like system (Linux, macOS)</li> </ul>"},{"location":"architecture/overview/#core-components","title":"Core Components","text":""},{"location":"architecture/overview/#1-cli-entry-point-clitfgrid-compose","title":"1. CLI Entry Point (<code>cli/tfgrid-compose</code>)","text":"<p>Purpose: User-facing command interface</p> <p>Responsibilities:</p> <ul> <li>Parse command-line arguments</li> <li>Load context file (<code>.tfgrid-compose.yaml</code>)</li> <li>Route commands to appropriate handlers</li> <li>Display help and version information</li> </ul> <p>Key Features:</p> <ul> <li>Context file support for simplified commands</li> <li>Command aliases (e.g., <code>agent</code> subcommand)</li> <li>Global flags (--debug, --version)</li> </ul> <p>Example Flow: <pre><code>tfgrid-compose up /path/to/app\n    \u2193\nLoad context (optional)\n    \u2193\nValidate prerequisites\n    \u2193\nCall orchestrator.deploy_app()\n</code></pre></p>"},{"location":"architecture/overview/#2-common-utilities-corecommonsh","title":"2. Common Utilities (<code>core/common.sh</code>)","text":"<p>Purpose: Shared functions used across all modules</p> <p>Key Functions:</p> <pre><code># Logging\nlog_info()      # Informational messages\nlog_success()   # Success indicators\nlog_warning()   # Warnings\nlog_error()     # Errors\nlog_step()      # Major steps\n\n# Utilities\ncommand_exists()    # Check if command is available\nyaml_get()          # Extract values from YAML files\nstate_save()        # Save to state file\nstate_get()         # Retrieve from state file\nstate_clear()       # Clear state directory\n</code></pre> <p>Color-Coded Output:</p> <ul> <li>\ud83d\udd35 Blue: Informational</li> <li>\u2705 Green: Success</li> <li>\u26a0\ufe0f Yellow: Warnings</li> <li>\u274c Red: Errors</li> <li>\u25b6 Purple: Major steps</li> </ul>"},{"location":"architecture/overview/#3-validation-module-corevalidationsh","title":"3. Validation Module (<code>core/validation.sh</code>)","text":"<p>Purpose: Validate prerequisites and configurations</p> <p>Validation Stages:</p> <pre><code>validate_prerequisites()\n    \u251c\u2500\u2500 Check OpenTofu/Terraform (prefer OpenTofu)\n    \u251c\u2500\u2500 Check Ansible\n    \u251c\u2500\u2500 Check SSH client\n    \u251c\u2500\u2500 Check WireGuard (optional warning)\n    \u251c\u2500\u2500 Load ThreeFold mnemonic\n    \u2514\u2500\u2500 Export TF_CMD environment variable\n\nvalidate_app_path()\n    \u251c\u2500\u2500 Check directory exists\n    \u2514\u2500\u2500 Check tfgrid-compose.yaml exists\n\nvalidate_deployment_exists()\n    \u251c\u2500\u2500 Check .tfgrid-compose/ directory\n    \u2514\u2500\u2500 Check state.yaml file\n\nvalidate_no_deployment()\n    \u2514\u2500\u2500 Prevent duplicate deployments\n\nvalidate_network_prerequisites()\n    \u251c\u2500\u2500 Check WireGuard (if needed)\n    \u251c\u2500\u2500 Check Mycelium (if needed)\n    \u2514\u2500\u2500 Test connectivity\n</code></pre> <p>Mnemonic Loading Priority: 1. Environment variable: <code>$TF_VAR_mnemonic</code> 2. Standard location: <code>~/.config/threefold/mnemonic</code> 3. Project-specific: <code>./.tfgrid-mnemonic</code></p> <p>OpenTofu Priority: <pre><code># Check tofu first (open source)\nif command -v tofu; then\n    export TF_CMD=\"tofu\"\nelif command -v terraform; then\n    export TF_CMD=\"terraform\"\nelse\n    error \"Neither found\"\nfi\n</code></pre></p>"},{"location":"architecture/overview/#4-pattern-loader-corepattern-loadersh","title":"4. Pattern Loader (<code>core/pattern-loader.sh</code>)","text":"<p>Purpose: Load and validate deployment patterns</p> <p>Pattern Structure: <pre><code>patterns/\n\u2514\u2500\u2500 single-vm/\n    \u251c\u2500\u2500 pattern.yaml           # Pattern metadata\n    \u251c\u2500\u2500 infrastructure/        # Terraform/OpenTofu files\n    \u2502   \u251c\u2500\u2500 main.tf\n    \u2502   \u251c\u2500\u2500 variables.tf\n    \u2502   \u2514\u2500\u2500 outputs.tf        # MUST implement contract\n    \u251c\u2500\u2500 platform/             # Ansible playbooks\n    \u2502   \u251c\u2500\u2500 site.yml\n    \u2502   \u2514\u2500\u2500 roles/\n    \u2514\u2500\u2500 README.md\n</code></pre></p> <p>Pattern Loading Flow: <pre><code>load_pattern()\n    \u251c\u2500\u2500 Read pattern name from app manifest\n    \u251c\u2500\u2500 Validate pattern directory exists\n    \u251c\u2500\u2500 Load pattern.yaml metadata\n    \u251c\u2500\u2500 Verify infrastructure/ (Terraform files)\n    \u251c\u2500\u2500 Verify platform/ (Ansible playbooks)\n    \u2514\u2500\u2500 Export pattern variables\n</code></pre></p> <p>Pattern Metadata (<code>pattern.yaml</code>): <pre><code>name: single-vm\nversion: 1.0.0\ndescription: Single VM deployment\nrequires:\n  - terraform  # or opentofu\n  - ansible\n  - wireguard  # optional\n</code></pre></p>"},{"location":"architecture/overview/#5-app-loader-coreapp-loadersh","title":"5. App Loader (<code>core/app-loader.sh</code>)","text":"<p>Purpose: Load and validate application manifests</p> <p>App Manifest (<code>tfgrid-compose.yaml</code>): <pre><code>name: my-app\nversion: 1.0.0\npattern: single-vm\n\n# Pattern configuration\nconfig:\n  node: 8\n  cpu: 4\n  memory: 8192\n  disk: 102400\n\n# Optional app-specific hooks\nhooks:\n  setup: ./deployment/hooks/setup.sh\n  configure: ./deployment/hooks/configure.sh\n  healthcheck: ./deployment/hooks/healthcheck.sh\n</code></pre></p> <p>App Loading Flow: <pre><code>load_app()\n    \u251c\u2500\u2500 Parse tfgrid-compose.yaml\n    \u251c\u2500\u2500 Extract app metadata\n    \u251c\u2500\u2500 Load pattern configuration\n    \u251c\u2500\u2500 Validate hooks (if present)\n    \u2514\u2500\u2500 Export app variables\n</code></pre></p>"},{"location":"architecture/overview/#6-orchestrator-coreorchestratorsh","title":"6. Orchestrator (<code>core/orchestrator.sh</code>)","text":"<p>Purpose: Main deployment orchestration logic</p> <p>Deployment Flow:</p> <pre><code>deploy_app()\n    \u2502\n    \u251c\u2500 1. VALIDATION PHASE\n    \u2502      \u251c\u2500\u2500 Validate system prerequisites\n    \u2502      \u251c\u2500\u2500 Validate no existing deployment\n    \u2502      \u251c\u2500\u2500 Validate app path and manifest\n    \u2502      \u2514\u2500\u2500 Load pattern and app config\n    \u2502\n    \u251c\u2500 2. INFRASTRUCTURE PHASE\n    \u2502      \u251c\u2500\u2500 Generate Terraform config\n    \u2502      \u251c\u2500\u2500 Run: terraform init\n    \u2502      \u251c\u2500\u2500 Run: terraform plan\n    \u2502      \u251c\u2500\u2500 Run: terraform apply\n    \u2502      \u2514\u2500\u2500 Extract outputs (primary_ip, node_ids, etc.)\n    \u2502\n    \u251c\u2500 3. NETWORK PHASE\n    \u2502      \u251c\u2500\u2500 If primary_ip_type == \"wireguard\":\n    \u2502      \u2502    \u251c\u2500\u2500 Extract WireGuard config\n    \u2502      \u2502    \u251c\u2500\u2500 Deploy to /etc/wireguard/\n    \u2502      \u2502    \u2514\u2500\u2500 Start wg-quick up\n    \u2502      \u2514\u2500\u2500 Test connectivity\n    \u2502\n    \u251c\u2500 4. WAIT PHASE\n    \u2502      \u251c\u2500\u2500 Wait for SSH (up to 5 minutes)\n    \u2502      \u251c\u2500\u2500 Retry connection every 10 seconds\n    \u2502      \u2514\u2500\u2500 Verify SSH access\n    \u2502\n    \u251c\u2500 5. PLATFORM PHASE\n    \u2502      \u251c\u2500\u2500 Generate Ansible inventory\n    \u2502      \u251c\u2500\u2500 Run: ansible-playbook site.yml\n    \u2502      \u2514\u2500\u2500 Configure base system\n    \u2502\n    \u251c\u2500 6. APPLICATION PHASE\n    \u2502      \u251c\u2500\u2500 Copy app source to VM\n    \u2502      \u251c\u2500\u2500 Run setup hook (if present)\n    \u2502      \u251c\u2500\u2500 Run configure hook (if present)\n    \u2502      \u2514\u2500\u2500 Run healthcheck hook (if present)\n    \u2502\n    \u251c\u2500 7. VERIFICATION PHASE\n    \u2502      \u251c\u2500\u2500 Test SSH connectivity\n    \u2502      \u251c\u2500\u2500 Check application service\n    \u2502      \u2514\u2500\u2500 Validate deployment\n    \u2502\n    \u2514\u2500 8. FINALIZATION\n           \u251c\u2500\u2500 Save deployment metadata\n           \u251c\u2500\u2500 Display connection info\n           \u2514\u2500\u2500 Show next steps\n</code></pre> <p>Destroy Flow: <pre><code>destroy_deployment()\n    \u251c\u2500\u2500 Validate deployment exists\n    \u251c\u2500\u2500 Stop WireGuard interface (if active)\n    \u251c\u2500\u2500 Run: terraform destroy\n    \u2514\u2500\u2500 Clear state directory\n</code></pre></p>"},{"location":"architecture/overview/#7-task-executors-coretasks","title":"7. Task Executors (<code>core/tasks/</code>)","text":"<p>Purpose: Execute specific deployment tasks</p>"},{"location":"architecture/overview/#terraformsh","title":"<code>terraform.sh</code>","text":"<pre><code># Detects OpenTofu or Terraform\nTF_CMD detection (tofu \u2192 terraform \u2192 error)\n    \u251c\u2500\u2500 terraform init\n    \u251c\u2500\u2500 terraform plan\n    \u251c\u2500\u2500 terraform apply\n    \u2514\u2500\u2500 Extract outputs to state.yaml\n</code></pre>"},{"location":"architecture/overview/#wireguardsh","title":"<code>wireguard.sh</code>","text":"<pre><code># Sets up WireGuard VPN\n    \u251c\u2500\u2500 Extract wg_config from Terraform\n    \u251c\u2500\u2500 Generate interface name (wg0, wg1, ...)\n    \u251c\u2500\u2500 Deploy to /etc/wireguard/\n    \u251c\u2500\u2500 Handle conflicts with existing interfaces\n    \u2514\u2500\u2500 Start interface with wg-quick\n</code></pre>"},{"location":"architecture/overview/#ansiblesh","title":"<code>ansible.sh</code>","text":"<pre><code># Configures platform\n    \u251c\u2500\u2500 Generate inventory from state\n    \u251c\u2500\u2500 Test connectivity\n    \u251c\u2500\u2500 Run playbook\n    \u2514\u2500\u2500 Capture logs\n</code></pre>"},{"location":"architecture/overview/#wait-sshsh","title":"<code>wait-ssh.sh</code>","text":"<pre><code># Waits for SSH to be ready\n    \u251c\u2500\u2500 Timeout: 300 seconds (5 minutes)\n    \u251c\u2500\u2500 Retry: Every 10 seconds\n    \u251c\u2500\u2500 Test: ssh -o BatchMode=yes &lt;ip&gt; 'echo ok'\n    \u2514\u2500\u2500 Early exit on first success\n</code></pre>"},{"location":"architecture/overview/#data-flow","title":"Data Flow","text":""},{"location":"architecture/overview/#state-directory-structure","title":"State Directory Structure","text":"<pre><code>.tfgrid-compose/\n\u251c\u2500\u2500 state.yaml                    # Deployment metadata\n\u251c\u2500\u2500 terraform/                    # Generated Terraform config\n\u2502   \u251c\u2500\u2500 main.tf\n\u2502   \u251c\u2500\u2500 variables.tf\n\u2502   \u251c\u2500\u2500 outputs.tf\n\u2502   \u251c\u2500\u2500 .terraform/              # Terraform state\n\u2502   \u2514\u2500\u2500 terraform.tfstate\n\u251c\u2500\u2500 inventory.ini                 # Generated Ansible inventory\n\u251c\u2500\u2500 wg0.conf                     # WireGuard config (if used)\n\u251c\u2500\u2500 terraform-init.log           # Terraform init log\n\u251c\u2500\u2500 terraform-plan.log           # Terraform plan log\n\u251c\u2500\u2500 terraform-apply.log          # Terraform apply log\n\u251c\u2500\u2500 ansible.log                  # Ansible playbook log\n\u251c\u2500\u2500 hook-setup.log              # Setup hook log\n\u251c\u2500\u2500 hook-configure.log          # Configure hook log\n\u2514\u2500\u2500 hook-healthcheck.log        # Healthcheck hook log\n</code></pre>"},{"location":"architecture/overview/#state-file-stateyaml","title":"State File (<code>state.yaml</code>)","text":"<pre><code># Metadata\napp_name: my-app\napp_version: 1.0.0\npattern: single-vm\ndeployment_id: abc123xyz\ncreated_at: 2025-10-14T12:00:00Z\n\n# Infrastructure outputs\nvm_ip: 10.1.3.2\nprimary_ip: 10.1.3.2\nprimary_ip_type: wireguard\ndeployment_name: vm_abc123xyz\nnode_ids: [8]\nmycelium_ip: 543:7233:7534:51c4:ff0f:f38b:d69b:8f19\n\n# Network\nwg_interface: wg0\nnetwork_name: net_abc123xyz\n\n# Platform\nssh_user: root\nssh_key: /home/user/.ssh/id_ed25519\n\n# Status\nstatus: running\nlast_updated: 2025-10-14T12:05:00Z\n</code></pre>"},{"location":"architecture/overview/#data-flow-diagram","title":"Data Flow Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  User Command    \u2502\n\u2502  tfgrid-compose  \u2502\n\u2502       up         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 App Manifest     \u2502\n\u2502 .yaml file       \u2502\u2500\u2500\u2500\u2510\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n         \u2502             \u2502\n         \u25bc             \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502 Pattern Files    \u2502\u25c4\u2500\u2500\u2518\n\u2502 Infrastructure/  \u2502\n\u2502 Platform/        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Terraform Apply  \u2502\n\u2502 Creates VMs      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Extract Outputs  \u2502\n\u2502 Save to state    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 WireGuard Setup  \u2502\n\u2502 Network Access   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Ansible Config   \u2502\n\u2502 Platform Setup   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 App Deployment   \u2502\n\u2502 Hooks Execution  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 State Saved      \u2502\n\u2502 Deployment Done  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/overview/#pattern-system","title":"Pattern System","text":""},{"location":"architecture/overview/#pattern-contract","title":"Pattern Contract","text":"<p>Every pattern MUST implement the standard contract.</p> <p>Required Terraform Outputs: <pre><code>output \"primary_ip\" {\n  value = \"10.1.3.2\"\n  description = \"Primary IP for SSH\"\n}\n\noutput \"primary_ip_type\" {\n  value = \"wireguard\"  # or \"public\" or \"mycelium\"\n  description = \"Type of primary IP\"\n}\n\noutput \"deployment_name\" {\n  value = \"vm_abc123\"\n  description = \"Deployment name\"\n}\n\noutput \"node_ids\" {\n  value = [8]\n  description = \"Node IDs used\"\n}\n</code></pre></p>"},{"location":"architecture/overview/#pattern-types","title":"Pattern Types","text":""},{"location":"architecture/overview/#1-single-vm-pattern","title":"1. Single-VM Pattern","text":"<p>Use Case: Development, databases, internal services, AI agents</p> <p>Infrastructure:</p> <ul> <li>1 VM on TFGrid</li> <li>WireGuard private network</li> <li>Optional Mycelium IPv6</li> </ul> <p>Network:</p> <ul> <li>Primary: WireGuard IP (10.x.x.x)</li> <li>Secondary: Mycelium IP (IPv6)</li> </ul> <p>Platform:</p> <ul> <li>Ubuntu 24.04</li> <li>Base packages (git, curl, build-essential)</li> <li>Docker (optional)</li> </ul>"},{"location":"architecture/overview/#2-gateway-pattern","title":"2. Gateway Pattern","text":"<p>Use Case: Production web apps with public IPv4</p> <p>Infrastructure:</p> <ul> <li>1 Gateway VM (public IPv4)</li> <li>N Backend VMs (private network)</li> <li>WireGuard + Mycelium</li> </ul> <p>Network:</p> <ul> <li>Primary: Public IPv4 (gateway)</li> <li>Secondary: WireGuard IPs (backends)</li> </ul> <p>Platform:</p> <ul> <li>Gateway: Nginx/HAProxy reverse proxy</li> <li>Backends: Application servers</li> <li>SSL/TLS: Let's Encrypt (automated)</li> </ul>"},{"location":"architecture/overview/#3-k3s-pattern","title":"3. K3s Pattern","text":"<p>Use Case: Kubernetes clusters</p> <p>Infrastructure:</p> <ul> <li>1+ Control plane nodes</li> <li>N Worker nodes</li> <li>1 Management node (kubectl, helm, k9s)</li> </ul> <p>Network:</p> <ul> <li>Primary: Control plane WireGuard IP</li> <li>Secondary: Worker node IPs</li> </ul> <p>Platform:</p> <ul> <li>K3s lightweight Kubernetes</li> <li>MetalLB load balancer</li> <li>Nginx Ingress Controller</li> <li>Local-path storage provisioner</li> </ul>"},{"location":"architecture/overview/#state-management","title":"State Management","text":""},{"location":"architecture/overview/#state-lifecycle","title":"State Lifecycle","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   No State   \u2502  Initial state\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u2502  deploy_app()\n       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Deploying   \u2502  Terraform running\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u2502  Success\n       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Running    \u2502  Deployment active\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u2502  destroy_deployment()\n       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Destroying  \u2502  Terraform destroy\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u2502  Success\n       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Cleaned    \u2502  State removed\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/overview/#state-operations","title":"State Operations","text":"<p>Create State: <pre><code>create_state_dir()\n    mkdir -p .tfgrid-compose\n    touch .tfgrid-compose/state.yaml\n</code></pre></p> <p>Save to State: <pre><code>state_save \"key\" \"value\"\n    echo \"key: value\" &gt;&gt; .tfgrid-compose/state.yaml\n</code></pre></p> <p>Read from State: <pre><code>state_get \"key\"\n    grep \"^key:\" .tfgrid-compose/state.yaml | awk '{print $2}'\n</code></pre></p> <p>Clear State: <pre><code>state_clear()\n    rm -rf .tfgrid-compose/\n</code></pre></p>"},{"location":"architecture/overview/#state-validation","title":"State Validation","text":"<p>Check Deployment Exists: <pre><code>if [ -f \".tfgrid-compose/state.yaml\" ]; then\n    echo \"Deployment exists\"\nfi\n</code></pre></p> <p>Prevent Duplicate Deployments: <pre><code>validate_no_deployment()\n    if deployment_exists; then\n        show current deployment info\n        error \"Cannot deploy while another exists\"\n    fi\n</code></pre></p>"},{"location":"architecture/overview/#extension-guide","title":"Extension Guide","text":""},{"location":"architecture/overview/#adding-a-new-pattern","title":"Adding a New Pattern","text":"<p>1. Create Pattern Directory: <pre><code>patterns/my-pattern/\n\u251c\u2500\u2500 pattern.yaml\n\u251c\u2500\u2500 infrastructure/\n\u2502   \u2514\u2500\u2500 main.tf         # Implement pattern contract!\n\u251c\u2500\u2500 platform/\n\u2502   \u2514\u2500\u2500 site.yml\n\u2514\u2500\u2500 README.md\n</code></pre></p> <p>2. Implement Pattern Contract: <pre><code># infrastructure/outputs.tf\noutput \"primary_ip\" {\n  value = your_resource.primary_ip\n}\n\noutput \"primary_ip_type\" {\n  value = \"wireguard\"\n}\n\noutput \"deployment_name\" {\n  value = your_resource.name\n}\n\noutput \"node_ids\" {\n  value = [var.node_id]\n}\n</code></pre></p> <p>3. Test Pattern: <pre><code># Test with example app\ntfgrid-compose up /path/to/test-app\n\n# Verify outputs\ncd .tfgrid-compose/terraform\nterraform output primary_ip\nterraform output primary_ip_type\n</code></pre></p> <p>4. Document Pattern: <pre><code># My Pattern\n\n## Use Cases\n\n- What problems does this solve?\n\n## Configuration\n\n- What options are available?\n\n## Example\n\n- Show complete example\n</code></pre></p>"},{"location":"architecture/overview/#adding-a-new-task","title":"Adding a New Task","text":"<p>1. Create Task Script: <pre><code>core/tasks/my-task.sh\n</code></pre></p> <p>2. Implement Task: <pre><code>#!/usr/bin/env bash\nset -e\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &amp;&amp; pwd)\"\nsource \"$SCRIPT_DIR/../common.sh\"\n\nlog_step \"Running my task...\"\n\n# Task implementation\n# ...\n\nlog_success \"Task complete\"\n</code></pre></p> <p>3. Call from Orchestrator: <pre><code># In core/orchestrator.sh\nif ! bash \"$DEPLOYER_ROOT/core/tasks/my-task.sh\"; then\n    log_error \"My task failed\"\n    return 1\nfi\n</code></pre></p>"},{"location":"architecture/overview/#adding-new-commands","title":"Adding New Commands","text":"<p>1. Add Command Handler: <pre><code># In cli/tfgrid-compose\ncase \"$COMMAND\" in\n    my-command)\n        # Implementation\n        ;;\nesac\n</code></pre></p> <p>2. Update Help Text: <pre><code># In core/common.sh show_help()\necho \"  my-command &lt;args&gt;  - Description\"\n</code></pre></p>"},{"location":"architecture/overview/#design-decisions","title":"Design Decisions","text":""},{"location":"architecture/overview/#why-bash","title":"Why Bash?","text":"<p>Pros:</p> <ul> <li>\u2705 Universal availability (every Unix system)</li> <li>\u2705 Easy to understand and debug</li> <li>\u2705 Transparent execution (no compilation)</li> <li>\u2705 Excellent for orchestration</li> <li>\u2705 Direct integration with CLI tools</li> <li>\u2705 Minimal dependencies</li> </ul> <p>Cons:</p> <ul> <li>\u274c Error handling can be tricky</li> <li>\u274c No type safety</li> <li>\u274c Testing is harder</li> </ul> <p>Mitigation:</p> <ul> <li>Use <code>set -e</code> (exit on error)</li> <li>Extensive validation</li> <li>Logging at each step</li> <li>Test scripts provided</li> </ul>"},{"location":"architecture/overview/#why-pattern-based","title":"Why Pattern-Based?","text":"<p>Benefits:</p> <ul> <li>Different use cases need different infrastructure</li> <li>Patterns encapsulate best practices</li> <li>Easy to add new patterns without modifying core</li> <li>Users can create custom patterns</li> </ul> <p>Alternatives Considered:</p> <ul> <li>Single monolithic template (too rigid)</li> <li>Full config DSL (too complex)</li> <li>GUI builder (not CLI-friendly)</li> </ul>"},{"location":"architecture/overview/#why-opentofu-priority","title":"Why OpenTofu Priority?","text":"<p>Rationale:</p> <ul> <li>Open source (Apache 2.0 license)</li> <li>Compatible with Terraform</li> <li>Community-driven development</li> <li>No license restrictions</li> <li>Same user experience</li> </ul> <p>Fallback:</p> <ul> <li>Terraform still supported</li> <li>Auto-detection at runtime</li> <li>No breaking changes</li> </ul>"},{"location":"architecture/overview/#why-state-in-tfgrid-compose","title":"Why State in <code>.tfgrid-compose/</code>?","text":"<p>Benefits:</p> <ul> <li>Co-located with deployment</li> <li>Easy to find and inspect</li> <li>Git-ignored by default</li> <li>Self-contained</li> </ul> <p>Alternatives:</p> <ul> <li><code>~/.tfgrid/</code> (harder to track per-project)</li> <li>Database (added complexity)</li> <li>Cloud storage (requires connectivity)</li> </ul>"},{"location":"architecture/overview/#performance-considerations","title":"Performance Considerations","text":""},{"location":"architecture/overview/#deployment-speed","title":"Deployment Speed","text":"<p>Typical Timeline:</p> <ul> <li>Infrastructure (Terraform): 30-60 seconds</li> <li>Network setup (WireGuard): 5-10 seconds</li> <li>Wait for SSH: 30-90 seconds</li> <li>Platform config (Ansible): 60-120 seconds</li> <li>App deployment: 10-30 seconds</li> </ul> <p>Total: 2-5 minutes</p>"},{"location":"architecture/overview/#optimization-opportunities","title":"Optimization Opportunities","text":"<p>1. Parallel Execution:</p> <ul> <li>Multiple Ansible hosts configured in parallel</li> <li>Background tasks where possible</li> </ul> <p>2. Caching:</p> <ul> <li>Terraform state cached locally</li> <li>Ansible facts cached between runs</li> </ul> <p>3. Incremental Updates:</p> <ul> <li>Only run changed playbooks</li> <li>Terraform plan before apply</li> </ul>"},{"location":"architecture/overview/#resource-usage","title":"Resource Usage","text":"<p>Local Machine:</p> <ul> <li>Minimal CPU usage (mostly waiting)</li> <li>Small disk footprint (&lt;50MB for state)</li> <li>Network: Depends on Terraform operations</li> </ul> <p>Remote VMs:</p> <ul> <li>Configured per pattern requirements</li> <li>Single-VM: 2-8 CPU, 4-16GB RAM typical</li> <li>Gateway: 1-2 CPU per VM, 2-4GB RAM</li> <li>K3s: 2+ CPU per node, 4+GB RAM</li> </ul>"},{"location":"architecture/overview/#security-considerations","title":"Security Considerations","text":""},{"location":"architecture/overview/#mnemonic-security","title":"Mnemonic Security","text":"<p>Storage:</p> <ul> <li>File permissions: 600 (read/write owner only)</li> <li>Standard location: <code>~/.config/threefold/mnemonic</code></li> <li>Warning if permissions are incorrect</li> </ul> <p>Best Practices:</p> <ul> <li>Never commit to version control</li> <li>Use environment variable in CI/CD</li> <li>Rotate regularly</li> </ul>"},{"location":"architecture/overview/#ssh-key-management","title":"SSH Key Management","text":"<p>Default Behavior:</p> <ul> <li>Uses system SSH keys (<code>~/.ssh/id_*.pub</code>)</li> <li>Injected into VMs during deployment</li> <li>No passwords (key-based auth only)</li> </ul>"},{"location":"architecture/overview/#wireguard-security","title":"WireGuard Security","text":"<p>Private Keys:</p> <ul> <li>Generated by Terraform provider</li> <li>Stored in Terraform state (encrypted at rest)</li> <li>Deployed to <code>/etc/wireguard/</code> with 600 permissions</li> </ul> <p>Network Isolation:</p> <ul> <li>Private networks per deployment</li> <li>No default internet routing</li> <li>Explicit rules required for external access</li> </ul>"},{"location":"architecture/overview/#troubleshooting-architecture","title":"Troubleshooting Architecture","text":""},{"location":"architecture/overview/#debug-mode","title":"Debug Mode","text":"<p>Enable: <pre><code>tfgrid-compose --debug up &lt;app&gt;\n</code></pre></p> <p>Effects:</p> <ul> <li>Verbose logging (<code>set -x</code>)</li> <li>Keep temporary files</li> <li>Show all command output</li> <li>Network diagnostics</li> </ul>"},{"location":"architecture/overview/#log-files","title":"Log Files","text":"<p>All logs saved to <code>.tfgrid-compose/</code>:</p> <ul> <li><code>terraform-init.log</code></li> <li><code>terraform-plan.log</code></li> <li><code>terraform-apply.log</code></li> <li><code>ansible.log</code></li> <li><code>hook-*.log</code></li> </ul>"},{"location":"architecture/overview/#state-inspection","title":"State Inspection","text":"<p>Check Deployment: <pre><code>cat .tfgrid-compose/state.yaml\n</code></pre></p> <p>Check Terraform State: <pre><code>cd .tfgrid-compose/terraform\nterraform show\n</code></pre></p> <p>Check WireGuard: <pre><code>sudo wg show\n</code></pre></p>"},{"location":"architecture/overview/#future-architecture","title":"Future Architecture","text":""},{"location":"architecture/overview/#planned-enhancements","title":"Planned Enhancements","text":"<p>1. Multi-Deployment Support <pre><code>~/.tfgrid-compose/\n\u251c\u2500\u2500 deployments/\n\u2502   \u251c\u2500\u2500 abc123/  # Deployment 1\n\u2502   \u2514\u2500\u2500 def456/  # Deployment 2\n\u2514\u2500\u2500 index.yaml   # Registry\n</code></pre></p> <p>2. Plugin System <pre><code>~/.tfgrid/plugins/\n\u2514\u2500\u2500 my-plugin/\n    \u251c\u2500\u2500 plugin.yaml\n    \u2514\u2500\u2500 hooks/\n</code></pre></p> <p>3. Remote State <pre><code># tfgrid-compose.yaml\nstate:\n  backend: s3\n  config:\n    bucket: my-tfgrid-state\n</code></pre></p>"},{"location":"architecture/overview/#references","title":"References","text":"<ul> <li>Pattern Contract</li> <li>Quick Start Guide</li> <li>Troubleshooting Guide</li> <li>Versioning Policy</li> </ul> <p>Document Status: Active Last Updated: 2025-10-14 Next Review: After 1.0.0 release</p>"},{"location":"architecture/source-repos/","title":"Source Repositories &amp; Acknowledgments","text":"<p>TFGrid Compose was built by extracting and unifying proven, production-ready implementations.</p>"},{"location":"architecture/source-repos/#philosophy","title":"\ud83c\udfaf Philosophy","text":"<p>TFGrid Compose is not built from scratch. Instead, it:</p> <ol> <li>Extracts working code from proven repositories</li> <li>Unifies them under a common deployer framework  </li> <li>Simplifies the deployment experience</li> <li>Standardizes the workflow</li> </ol> <p>This approach provides: - \u2705 Battle-tested code - Already working in production - \u2705 Faster development - No reinventing the wheel - \u2705 Lower risk - Proven architectures - \u2705 Quality assurance - Real-world validation</p>"},{"location":"architecture/source-repos/#source-repositories","title":"\ud83d\udce6 Source Repositories","text":""},{"location":"architecture/source-repos/#integrated-current","title":"\u2705 Integrated (Current)","text":""},{"location":"architecture/source-repos/#1-tfgrid-ai-agent-mik-tf","title":"1. tfgrid-ai-agent (mik-tf)","text":"<p>Source: mik-tf/tfgrid-ai-agent Author: mik-tf Status: \u2705 Fully integrated into TFGrid Compose (v1.0.0)</p> <p>What it provides: - Complete AI coding agent deployment - Qwen AI integration - Project management system - Remote execution workflows - Git integration - Developer user provisioning</p> <p>Integration: <pre><code>Source: github.com/mik-tf/tfgrid-ai-agent\n  \u2193\nExtracted:\n  \u2022 Infrastructure code \u2192 patterns/single-vm/infrastructure/\n  \u2022 Platform config \u2192 patterns/single-vm/platform/\n  \u2022 AI agent app \u2192 tfgrid-compose/tfgrid-ai-agent/\n  \u2193\nResult: tfgrid-ai-agent deployable via tfgrid-compose\n</code></pre></p> <p>Changes made: - \u2705 Extracted infrastructure as reusable pattern - \u2705 Separated app from deployment logic - \u2705 Created manifest system (<code>tfgrid-compose.yaml</code>) - \u2705 Fixed project directory structure (Oct 8, 2025) - \u2705 Unified CLI commands</p> <p>Before (Standalone): <pre><code>cd tfgrid-ai-agent\nmake deploy\nmake login\nmake create project=my-app\n</code></pre></p> <p>After (TFGrid Compose): <pre><code>tfgrid-compose up\ntfgrid-compose agent login\ntfgrid-compose agent create\n</code></pre></p>"},{"location":"architecture/source-repos/#planned-integration-q4-2025","title":"\ud83d\udea7 Planned Integration (Q4 2025)","text":""},{"location":"architecture/source-repos/#2-tfgrid-gateway-mik-tf","title":"2. tfgrid-gateway (mik-tf)","text":"<p>Source: mik-tf/tfgrid-gateway Author: mik-tf Status: \ud83d\udea7 Planned for integration (Q4 2025)</p> <p>What it provides: - Public IPv4 gateway deployment - NAT-based gateway (nftables) - Proxy-based gateway (HAProxy + Nginx) - SSL/TLS automation (Let's Encrypt) - WireGuard + Mycelium networking - Network redundancy features - Live demo system with status pages - Port forwarding configuration - Path-based routing</p> <p>Key features: - \u2705 Dual gateway modes: NAT vs Proxy - \u2705 SSL certificates: Free Let's Encrypt with auto-renewal - \u2705 Network redundancy: WireGuard + Mycelium both mode - \u2705 Flexible access: Port-based or path-based - \u2705 Security features: Disable public port forwarding - \u2705 Production-ready: Used in real deployments</p> <p>Planned integration: <pre><code>Source: github.com/mik-tf/tfgrid-gateway\n  \u2193\nExtract:\n  \u2022 Gateway infrastructure \u2192 patterns/gateway/infrastructure/\n  \u2022 NAT/Proxy configs \u2192 patterns/gateway/platform/\n  \u2022 SSL automation \u2192 patterns/gateway/ssl/\n  \u2022 Network configs \u2192 patterns/gateway/networking/\n  \u2193\nResult: Gateway pattern in tfgrid-compose\n</code></pre></p> <p>Usage (after integration): <pre><code>tfgrid-compose up my-webapp --pattern=gateway --domain=myapp.com\n</code></pre></p> <p>Repository stats: - 1,054 commits - Complete Terraform + Ansible implementation - Comprehensive documentation - Production deployments validated</p>"},{"location":"architecture/source-repos/#3-tfgrid-k3s-ucli-tools","title":"3. tfgrid-k3s (ucli-tools)","text":"<p>Source: ucli-tools/tfgrid-k3s Organization: ucli-tools Status: \ud83d\udea7 Planned for integration (Q1 2026)</p> <p>What it provides: - Complete K3s cluster deployment - Multi-node orchestration (control + workers) - Management node with K9s TUI - MetalLB load balancer - Nginx Ingress controller - Dual-stack networking (IPv4/IPv6) - High availability support - Auto-scaling workers</p> <p>Key features: - \u2705 K3s lightweight Kubernetes - Production-grade - \u2705 Management node: kubectl, K9s, Helm pre-installed - \u2705 Load balancing: MetalLB with IPv4/IPv6 support - \u2705 Ingress: Nginx Ingress controller - \u2705 Networking: Flannel CNI + WireGuard + Mycelium - \u2705 Scalability: Add nodes dynamically - \u2705 Production-ready: Real cluster deployments</p> <p>Planned integration: <pre><code>Source: github.com/ucli-tools/tfgrid-k3s\n  \u2193\nExtract:\n  \u2022 Cluster infrastructure \u2192 patterns/k3s/infrastructure/\n  \u2022 K3s playbooks \u2192 patterns/k3s/platform/\n  \u2022 MetalLB/Ingress \u2192 patterns/k3s/components/\n  \u2022 Management node \u2192 patterns/k3s/management/\n  \u2193\nResult: K3s pattern in tfgrid-compose\n</code></pre></p> <p>Usage (after integration): <pre><code>tfgrid-compose up my-saas --pattern=k3s\ntfgrid-compose kubectl get nodes\ntfgrid-compose k9s\n</code></pre></p> <p>Repository stats: - 522 commits - Complete K3s automation - Comprehensive K9s integration - Production cluster deployments</p>"},{"location":"architecture/source-repos/#ai-agent-framework-mik-tf","title":"\ud83d\udd17 ai-agent Framework (mik-tf)","text":"<p>Source: mik-tf/ai-agent Author: mik-tf Status: \u2705 Dependency of tfgrid-ai-agent</p> <p>What it provides: - AI coding loop technique - Qwen CLI integration - Project management framework - Continuous automation system</p> <p>Inspiration: Based on the \"Ralph\" coding technique by Geoff Huntley, extended into a production-ready automation platform.</p> <p>Usage: This framework is automatically installed on tfgrid-ai-agent VMs and provides the underlying AI automation capabilities.</p>"},{"location":"architecture/source-repos/#extraction-integration-process","title":"\ud83c\udfd7\ufe0f Extraction &amp; Integration Process","text":""},{"location":"architecture/source-repos/#phase-1-single-vm-pattern-complete","title":"Phase 1: Single-VM Pattern (\u2705 Complete)","text":"<p>Source: Infrastructure from mik-tf/tfgrid-ai-agent</p> <p>Extraction: 1. \u2705 Terraform configs extracted 2. \u2705 Ansible playbooks generalized 3. \u2705 WireGuard setup automated 4. \u2705 Pattern metadata created 5. \u2705 Documentation written</p> <p>Result: - Reusable single-vm pattern - Works with any application - Clean separation of concerns</p>"},{"location":"architecture/source-repos/#phase-2-gateway-pattern-q4-2025","title":"Phase 2: Gateway Pattern (\ud83d\udea7 Q4 2025)","text":"<p>Source: mik-tf/tfgrid-gateway (complete repo)</p> <p>Plan:</p> <ul> <li> Extract Terraform multi-VM configs</li> <li> Extract Ansible NAT/proxy playbooks</li> <li> Extract SSL automation (certbot)</li> <li> Create gateway pattern structure</li> <li> Adapt to manifest system</li> <li> Test with multiple apps</li> <li> Write pattern documentation</li> </ul> <p>Complexity: Medium Timeline: 2-4 weeks Risk: Low (code exists and works)</p>"},{"location":"architecture/source-repos/#phase-3-k3s-pattern-q1-2026","title":"Phase 3: K3s Pattern (\ud83d\udea7 Q1 2026)","text":"<p>Source: ucli-tools/tfgrid-k3s (complete repo)</p> <p>Plan:</p> <ul> <li> Extract Terraform cluster configs</li> <li> Extract Ansible K3s playbooks</li> <li> Extract MetalLB/Ingress configs</li> <li> Create k3s pattern structure</li> <li> Add Helm chart support</li> <li> GitOps integration</li> <li> Write pattern documentation</li> </ul> <p>Complexity: High Timeline: 4-6 weeks Risk: Medium (more complex integration)</p>"},{"location":"architecture/source-repos/#what-we-learned","title":"\ud83c\udf93 What We Learned","text":""},{"location":"architecture/source-repos/#from-mik-tftfgrid-ai-agent","title":"From mik-tf/tfgrid-ai-agent","text":"<ul> <li>\u2705 Clean deployment hooks - setup \u2192 configure \u2192 healthcheck</li> <li>\u2705 Developer user system - Non-root user provisioning</li> <li>\u2705 Remote execution - Run commands from local machine</li> <li>\u2705 Project organization - Structured workspace</li> </ul>"},{"location":"architecture/source-repos/#from-mik-tftfgrid-gateway","title":"From mik-tf/tfgrid-gateway","text":"<ul> <li>\u2705 Dual gateway modes - NAT vs Proxy flexibility</li> <li>\u2705 SSL automation - Let's Encrypt integration</li> <li>\u2705 Network redundancy - Multiple network paths</li> <li>\u2705 Security controls - Granular access control</li> </ul>"},{"location":"architecture/source-repos/#from-ucli-toolstfgrid-k3s","title":"From ucli-tools/tfgrid-k3s","text":"<ul> <li>\u2705 Management node pattern - Dedicated cluster control</li> <li>\u2705 Component integration - MetalLB + Ingress automation</li> <li>\u2705 Dual-stack networking - IPv4/IPv6 support</li> <li>\u2705 K9s TUI - Better cluster management UX</li> </ul>"},{"location":"architecture/source-repos/#acknowledgments","title":"\ud83d\ude4f Acknowledgments","text":""},{"location":"architecture/source-repos/#individual-contributors","title":"Individual Contributors","text":"<p>mik-tf - Created tfgrid-ai-agent (complete AI deployment) - Created tfgrid-gateway (gateway patterns, SSL, networking) - Created ai-agent framework (loop technique) - Provided foundation for TFGrid Compose</p> <p>ucli-tools organization - Created tfgrid-k3s (complete K3s cluster deployment) - Advanced Kubernetes automation - Management node patterns</p> <p>Geoff Huntley - Pioneered \"Ralph\" AI coding technique - Inspired ai-agent framework</p>"},{"location":"architecture/source-repos/#threefold-community","title":"ThreeFold Community","text":"<ul> <li>ThreeFold Grid infrastructure</li> <li>Terraform provider</li> <li>Community support</li> </ul>"},{"location":"architecture/source-repos/#code-origin-breakdown","title":"\ud83d\udcca Code Origin Breakdown","text":""},{"location":"architecture/source-repos/#current-v100","title":"Current (v1.0.0)","text":"Component Source Integration Infrastructure mik-tf/tfgrid-ai-agent \u2705 Extracted as pattern Platform config mik-tf/tfgrid-ai-agent \u2705 Generalized for reuse AI agent app mik-tf/tfgrid-ai-agent \u2705 Separated from deployer CLI tool TFGrid Compose \u2705 Built from scratch Context files TFGrid Compose \u2705 New feature Agent subcommand TFGrid Compose \u2705 New feature"},{"location":"architecture/source-repos/#planned","title":"Planned","text":"Component Source Integration Gateway pattern mik-tf/tfgrid-gateway \ud83d\udea7 Q4 2025 K3s pattern ucli-tools/tfgrid-k3s \ud83d\udea7 Q1 2026"},{"location":"architecture/source-repos/#differences-from-source","title":"\ud83d\udd04 Differences from Source","text":""},{"location":"architecture/source-repos/#whats-new-in-tfgrid-compose","title":"What's New in TFGrid Compose","text":"<p>Features not in source repos:</p> <ul> <li>\u2705 Universal deployer - Single CLI for all patterns</li> <li>\u2705 Manifest system - <code>tfgrid-compose.yaml</code> for apps</li> <li>\u2705 Context files - <code>.tfgrid-compose.yaml</code> for projects</li> <li>\u2705 Agent subcommand - Simplified AI agent operations</li> <li>\u2705 Pattern system - Reusable deployment strategies</li> <li>\u2705 State management - Track all deployments</li> <li>\u2705 Unified CLI - Consistent commands across patterns</li> </ul> <p>Simplifications:</p> <ul> <li>\u2705 One command deployment (<code>tfgrid-compose up</code>)</li> <li>\u2705 Auto-detect configurations</li> <li>\u2705 Smart defaults</li> <li>\u2705 Better error messages</li> <li>\u2705 Idempotent operations</li> </ul>"},{"location":"architecture/source-repos/#whats-preserved","title":"What's Preserved","text":"<p>Kept from source repos:</p> <ul> <li>\u2705 All core functionality</li> <li>\u2705 Infrastructure code (Terraform)</li> <li>\u2705 Platform configs (Ansible)</li> <li>\u2705 Network setup (WireGuard, Mycelium)</li> <li>\u2705 Best practices</li> <li>\u2705 Production readiness</li> </ul>"},{"location":"architecture/source-repos/#migration-guides","title":"\ud83d\udcd6 Migration Guides","text":""},{"location":"architecture/source-repos/#from-mik-tftfgrid-ai-agent_1","title":"From mik-tf/tfgrid-ai-agent","text":"<p>Before: <pre><code>git clone https://github.com/mik-tf/tfgrid-ai-agent\ncd tfgrid-ai-agent\nmake deploy\n</code></pre></p> <p>After: <pre><code>git clone https://github.com/tfgrid-studio/tfgrid-compose\ncd tfgrid-compose\nmake install\ntfgrid-compose up ../tfgrid-ai-agent\n</code></pre></p> <p>Benefits: - \u2705 Simpler commands - \u2705 Context file support - \u2705 Pattern reusability - \u2705 Better documentation</p> <p>Complete migration guide \u2192</p>"},{"location":"architecture/source-repos/#external-links","title":"\ud83d\udd17 External Links","text":""},{"location":"architecture/source-repos/#source-repositories_1","title":"Source Repositories","text":"<ul> <li>mik-tf/tfgrid-ai-agent</li> <li>mik-tf/tfgrid-gateway</li> <li>ucli-tools/tfgrid-k3s</li> <li>mik-tf/ai-agent</li> </ul>"},{"location":"architecture/source-repos/#tfgrid-compose-organization","title":"TFGrid Compose Organization","text":"<ul> <li>tfgrid-compose</li> <li>tfgrid-compose</li> <li>tfgrid-ai-agent</li> <li>tfgrid-docs</li> </ul>"},{"location":"architecture/source-repos/#license-attribution","title":"\ud83d\udcdc License &amp; Attribution","text":""},{"location":"architecture/source-repos/#source-code-licenses","title":"Source Code Licenses","text":"<p>From source repos: - tfgrid-ai-agent: Apache 2.0 License - tfgrid-gateway: Apache 2.0 License - tfgrid-k3s: Apache 2.0 License</p> <p>TFGrid Compose: - tfgrid-compose: Apache 2.0 License - tfgrid-ai-agent: Apache 2.0 License - Commercial repos: Business Source License / Proprietary</p>"},{"location":"architecture/source-repos/#attribution","title":"Attribution","text":"<p>All source repositories are properly credited in: - \u2705 README files - \u2705 Documentation - \u2705 Code comments - \u2705 This acknowledgment page</p> <p>Thank you to all contributors who made TFGrid Compose possible! \ud83d\ude4f</p> <p>View current status \u2192 \u2022 View planned features \u2192</p>"},{"location":"cli/app-commands/","title":"App-Specific Commands","text":"<p>How apps define custom commands and how to use them.</p>"},{"location":"cli/app-commands/#design-philosophy","title":"Design Philosophy","text":"<p>Universal CLI, App-Specific Features</p> <p>tfgrid-compose provides a universal interface where:</p> <ul> <li>\ud83d\udd27 Generic commands work for all apps (up, down, status, logs, ssh)</li> <li>\ud83c\udfaf App-specific commands are defined by each app (create, run, stop, etc.)</li> <li>\ud83d\ude80 One CLI to rule them all</li> </ul> <p>Each app becomes a first-class citizen with its own command set!</p>"},{"location":"cli/app-commands/#how-it-works","title":"How It Works","text":""},{"location":"cli/app-commands/#1-apps-define-commands-in-manifest","title":"1. Apps Define Commands in Manifest","text":"<p>Apps declare their commands in <code>tfgrid-compose.yaml</code>:</p> <pre><code>name: tfgrid-ai-agent\nversion: 0.3.0\ndescription: AI-powered coding agent\n\n# App-specific commands\ncommands:\n  create:\n    script: /opt/ai-agent/scripts/create-project.sh\n    description: Create a new AI coding project\n    args: \"[project-name]\"\n\n  run:\n    script: /opt/ai-agent/scripts/run-project.sh\n    description: Start agent loop for a project\n    args: \"[project-name]\"\n\n  projects:\n    script: /opt/ai-agent/scripts/status-projects.sh\n    description: Show status of all projects\n</code></pre>"},{"location":"cli/app-commands/#2-tfgrid-compose-routes-commands","title":"2. tfgrid-compose Routes Commands","text":"<p>When you run a command:</p> <pre><code>tfgrid-compose create my-project\n</code></pre> <p>tfgrid-compose:</p> <ol> <li>\u2705 Checks if it's a generic command</li> <li>\u2705 If not, looks in active app's manifest</li> <li>\u2705 Finds the script path</li> <li>\u2705 Executes on the VM via SSH</li> </ol> <p>You get native app functionality through the universal CLI!</p>"},{"location":"cli/app-commands/#generic-commands","title":"Generic Commands","text":"<p>These work for all apps:</p> Command Description <code>up</code> Deploy app to ThreeFold Grid <code>down</code> Destroy deployment <code>status</code> Check app status <code>logs</code> View app logs <code>ssh</code> Connect to VM <code>exec</code> Execute arbitrary command <code>list</code> List deployed apps <code>switch</code> Change active app <p>Universal operations - Every app supports these.</p>"},{"location":"cli/app-commands/#app-specific-commands_1","title":"App-Specific Commands","text":""},{"location":"cli/app-commands/#tfgrid-ai-agent-commands","title":"tfgrid-ai-agent Commands","text":"<p>The AI coding agent provides these commands:</p> <pre><code># Project Management\ntfgrid-compose create [project-name]     # Create new AI project\ntfgrid-compose run [project-name]        # Start agent loop\ntfgrid-compose stop [project-name]       # Stop agent loop\ntfgrid-compose remove [project-name]     # Delete project\n\n# Monitoring\ntfgrid-compose projects                  # Show all projects\ntfgrid-compose monitor [project-name]    # Watch progress\ntfgrid-compose logs [project-name]       # View project logs\ntfgrid-compose summary [project-name]    # Show summary\n\n# Operations\ntfgrid-compose edit [project-name]       # Edit configuration\ntfgrid-compose restart [project-name]    # Restart agent\ntfgrid-compose stopall                   # Stop all projects\n\n# Setup\ntfgrid-compose login                     # Configure git credentials\ntfgrid-compose version                   # Show agent version\n</code></pre>"},{"location":"cli/app-commands/#future-apps","title":"Future Apps","text":"<p>Other apps will define their own commands:</p> <p>Example: web-dashboard <pre><code>tfgrid-compose deploy      # Deploy dashboard\ntfgrid-compose config      # Configure settings\ntfgrid-compose backup      # Backup data\n</code></pre></p> <p>Example: api-backend <pre><code>tfgrid-compose migrate     # Run migrations\ntfgrid-compose seed        # Seed database\ntfgrid-compose scale N     # Scale to N instances\n</code></pre></p> <p>Each app = Custom command set!</p>"},{"location":"cli/app-commands/#command-discovery","title":"Command Discovery","text":""},{"location":"cli/app-commands/#see-available-commands","title":"See Available Commands","text":"<pre><code># Generic help\ntfgrid-compose help\n\n# App-specific: Try a command\ntfgrid-compose create\n# \u2192 If not recognized, shows: \"Unknown command: create\"\n# \u2192 Lists available app commands\n</code></pre>"},{"location":"cli/app-commands/#read-app-manifest","title":"Read App Manifest","text":"<pre><code># View app's commands\ncat ~/.config/tfgrid-compose/apps/tfgrid-ai-agent/tfgrid-compose.yaml\n\n# Look for 'commands:' section\n</code></pre>"},{"location":"cli/app-commands/#usage-patterns","title":"Usage Patterns","text":""},{"location":"cli/app-commands/#pattern-1-interactive-projects-ai-agent","title":"Pattern 1: Interactive Projects (AI Agent)","text":"<pre><code># Create project (interactive prompts)\ntfgrid-compose create music-website\n  \u2192 Prompts for duration, template, etc.\n\n# Start the agent\ntfgrid-compose run music-website\n  \u2192 Agent loop begins coding\n\n# Monitor progress\ntfgrid-compose monitor music-website\n  \u2192 Watch in real-time\n\n# Check results\ntfgrid-compose summary music-website\n  \u2192 See what was accomplished\n</code></pre>"},{"location":"cli/app-commands/#pattern-2-service-management-web-apps","title":"Pattern 2: Service Management (Web Apps)","text":"<pre><code># Deploy service\ntfgrid-compose deploy\n\n# Check status\ntfgrid-compose status\n\n# Update configuration\ntfgrid-compose config --update\n\n# Restart\ntfgrid-compose restart\n</code></pre>"},{"location":"cli/app-commands/#pattern-3-data-operations-databases","title":"Pattern 3: Data Operations (Databases)","text":"<pre><code># Run migrations\ntfgrid-compose migrate\n\n# Backup data\ntfgrid-compose backup production\n\n# Restore data\ntfgrid-compose restore backup-2024.tar.gz\n</code></pre> <p>Each app defines its own patterns!</p>"},{"location":"cli/app-commands/#command-arguments","title":"Command Arguments","text":""},{"location":"cli/app-commands/#optional-arguments","title":"Optional Arguments","text":"<p>Many commands take optional project/resource names:</p> <pre><code># Interactive selection (if no name given)\ntfgrid-compose run\n  \u2192 Shows list, pick one\n\n# Direct specification\ntfgrid-compose run my-project\n  \u2192 Runs immediately\n</code></pre>"},{"location":"cli/app-commands/#positional-vs-flags","title":"Positional vs Flags","text":"<pre><code># Positional (simple)\ntfgrid-compose create my-project\n\n# With flags (advanced)\ntfgrid-compose create my-project --template=web --duration=2h\n</code></pre> <p>Apps decide their own syntax!</p>"},{"location":"cli/app-commands/#creating-app-commands","title":"Creating App Commands","text":""},{"location":"cli/app-commands/#for-app-developers","title":"For App Developers","text":"<p>1. Write the script:</p> <pre><code>#!/bin/bash\n# /opt/myapp/scripts/my-command.sh\n\necho \"Executing custom command...\"\n# Your logic here\n</code></pre> <p>2. Add to manifest:</p> <pre><code>commands:\n  my-command:\n    script: /opt/myapp/scripts/my-command.sh\n    description: Do something awesome\n    args: \"[optional-arg]\"\n</code></pre> <p>3. Deploy:</p> <pre><code>tfgrid-compose up myapp\n</code></pre> <p>4. Use:</p> <pre><code>tfgrid-compose my-command\n</code></pre> <p>That's it! Your app now has custom commands.</p>"},{"location":"cli/app-commands/#best-practices","title":"Best Practices","text":""},{"location":"cli/app-commands/#design-your-commands","title":"Design Your Commands","text":"<p>\u2705 DO: - Use clear, action-oriented names (<code>create</code>, <code>deploy</code>, <code>backup</code>) - Make commands idempotent when possible - Provide helpful error messages - Support both interactive and non-interactive modes</p> <p>\u274c DON'T: - Use generic names that conflict (<code>status</code>, <code>logs</code> are reserved) - Require complex flag combinations - Make breaking changes without version bump</p>"},{"location":"cli/app-commands/#command-naming","title":"Command Naming","text":"<pre><code># Good (clear actions)\ncreate, run, stop, deploy, backup, migrate\n\n# Avoid (ambiguous)\ndo-stuff, process, handle, manage\n</code></pre>"},{"location":"cli/app-commands/#arguments","title":"Arguments","text":"<pre><code># Good (optional, with selection)\ntfgrid-compose run [project-name]\n  \u2192 Interactive if omitted\n\n# Good (clear meaning)\ntfgrid-compose backup --output=/path/to/backup.tar.gz\n\n# Avoid (too many required args)\ntfgrid-compose complex command arg1 arg2 arg3 arg4\n</code></pre>"},{"location":"cli/app-commands/#technical-implementation","title":"Technical Implementation","text":""},{"location":"cli/app-commands/#command-resolution","title":"Command Resolution","text":"<pre><code>User runs: tfgrid-compose create my-project\n\n1. Parse command line\n   \u2192 Command: \"create\"\n   \u2192 Args: [\"my-project\"]\n\n2. Check generic commands\n   \u2192 Not found\n\n3. Get active context\n   \u2192 App: tfgrid-ai-agent\n\n4. Load app manifest\n   \u2192 commands.create.script: /opt/ai-agent/scripts/create-project.sh\n\n5. Execute on VM\n   \u2192 ssh root@10.1.3.2 \"/opt/ai-agent/scripts/create-project.sh my-project\"\n</code></pre>"},{"location":"cli/app-commands/#script-execution","title":"Script Execution","text":"<p>Commands run with:</p> <ul> <li>SSH TTY - Interactive prompts work</li> <li>Arguments passed - Via command line</li> <li>Exit codes - Propagated to local CLI</li> </ul>"},{"location":"cli/app-commands/#examples","title":"Examples","text":""},{"location":"cli/app-commands/#example-1-ai-agent-workflow","title":"Example 1: AI Agent Workflow","text":"<pre><code># Configure credentials (one time)\ntfgrid-compose login\n\n# Create projects\ntfgrid-compose create website-redesign\ntfgrid-compose create api-refactor\ntfgrid-compose create docs-update\n\n# Start agents\ntfgrid-compose run website-redesign\ntfgrid-compose run api-refactor\n\n# Check status\ntfgrid-compose projects\n\n# Monitor specific project\ntfgrid-compose monitor website-redesign\n\n# View results\ntfgrid-compose summary website-redesign\ntfgrid-compose logs website-redesign\n</code></pre>"},{"location":"cli/app-commands/#example-2-multi-app-deployment","title":"Example 2: Multi-App Deployment","text":"<pre><code># Deploy multiple apps\ntfgrid-compose up tfgrid-ai-agent\ntfgrid-compose up web-dashboard\ntfgrid-compose up api-backend\n\n# Switch context for different tasks\ntfgrid-compose switch tfgrid-ai-agent\ntfgrid-compose create backend-rewrite\n\ntfgrid-compose switch api-backend\ntfgrid-compose migrate\n\ntfgrid-compose switch web-dashboard\ntfgrid-compose deploy\n</code></pre>"},{"location":"cli/app-commands/#see-also","title":"See Also","text":"<ul> <li>Context System - Managing multiple apps</li> <li>AI Agent Guide - Complete AI agent reference</li> <li>App Development - Creating your own apps</li> </ul>"},{"location":"cli/context-system/","title":"Context System","text":"<p>Learn how tfgrid-compose's context system makes managing multiple apps seamless.</p>"},{"location":"cli/context-system/#overview","title":"Overview","text":"<p>The context system allows you to work with multiple deployed apps without constantly specifying which one you're targeting. It's like setting a \"current directory\" for your deployed apps.</p> <p>Key Features: - \ud83c\udfaf Smart auto-detection - Single app? No setup needed! - \ud83d\udd04 Select between apps - <code>tfgrid-compose select</code> - \ud83d\udd04 Select between projects - <code>tfgrid-compose select-project</code> (for apps that support it) - \ud83d\udcdd Context-aware commands - Commands use active app and project - \ud83c\udf10 Both modes - Explicit or contextual</p>"},{"location":"cli/context-system/#how-it-works","title":"How It Works","text":""},{"location":"cli/context-system/#1-smart-context-detection","title":"1. Smart Context Detection","text":"<p>When you have exactly one app deployed, tfgrid-compose automatically uses it:</p> <pre><code># Deploy first app\ntfgrid-compose up tfgrid-ai-agent\n\n# These just work! No switch needed\ntfgrid-compose create my-project\ntfgrid-compose projects\ntfgrid-compose logs my-project\n</code></pre> <p>\u2705 No configuration required</p>"},{"location":"cli/context-system/#2-multiple-apps-explicit-context","title":"2. Multiple Apps - Explicit Context","text":"<p>With multiple apps, you need to set context:</p> <pre><code># Deploy second app\ntfgrid-compose up some-web-app\n\n# Now you need to specify which app\ntfgrid-compose select tfgrid-ai-agent\n\n# Commands now target tfgrid-ai-agent\ntfgrid-compose create my-project\n</code></pre>"},{"location":"cli/context-system/#3-check-current-context","title":"3. Check Current Context","text":"<pre><code># List all deployed apps\ntfgrid-compose list\n\n# Output:\n#   * tfgrid-ai-agent (active) - 10.1.3.2\n#     some-web-app - 10.1.3.5\n#\n# \u2139 Active context: tfgrid-ai-agent\n</code></pre>"},{"location":"cli/context-system/#commands","title":"Commands","text":""},{"location":"cli/context-system/#select-change-active-app","title":"select - Change Active App","text":"<p>Set which app commands should target:</p> <pre><code># Select an app\ntfgrid-compose select tfgrid-ai-agent\n\n# All subsequent commands use this app\ntfgrid-compose create project1\ntfgrid-compose run project1\n</code></pre> <p>When to use: - You have multiple apps deployed - You want to work with a specific app for a while</p>"},{"location":"cli/context-system/#unselect-clear-active-app","title":"unselect - Clear Active App","text":"<p>Clear the current app selection:</p> <pre><code># Clear app context\ntfgrid-compose unselect\n\n# Commands now require explicit app\ntfgrid-compose create project  # Error\ntfgrid-compose tfgrid-ai-agent create project  # Works\n</code></pre>"},{"location":"cli/context-system/#select-project-change-active-project","title":"select-project - Change Active Project","text":"<p>For apps that manage multiple projects (like tfgrid-ai-agent):</p> <pre><code># Interactive selection\ntfgrid-compose select-project\n\n# Direct selection\ntfgrid-compose select-project my-project\n\n# Commands now use selected project\ntfgrid-compose run       # Runs my-project\ntfgrid-compose logs      # Logs for my-project\n</code></pre>"},{"location":"cli/context-system/#unselect-project-clear-project-selection","title":"unselect-project - Clear Project Selection","text":"<pre><code># Clear project context\ntfgrid-compose unselect-project\n\n# Commands require project name\ntfgrid-compose run            # Error\ntfgrid-compose run my-project # Works\n</code></pre>"},{"location":"cli/context-system/#list-show-all-apps","title":"list - Show All Apps","text":"<p>See all deployed apps and which is active:</p> <pre><code>tfgrid-compose list\n</code></pre> <p>Output shows: - \u2705 All deployed apps with IPs - \u2b50 Current active context (marked with <code>*</code>) - \ud83d\udcca Auto-context status (single app)</p>"},{"location":"cli/context-system/#context-behavior","title":"Context Behavior","text":""},{"location":"cli/context-system/#single-app-scenario","title":"Single App Scenario","text":"<pre><code># You deploy one app\ntfgrid-compose up tfgrid-ai-agent\n\n# NO switch needed!\ntfgrid-compose create project\n# \u2192 Automatically uses tfgrid-ai-agent\n</code></pre> <p>\u2705 Zero friction for common case</p>"},{"location":"cli/context-system/#multiple-apps-scenario","title":"Multiple Apps Scenario","text":"<pre><code># You have multiple apps\ntfgrid-compose list\n#   * tfgrid-ai-agent (active)\n#     web-dashboard\n#     api-backend\n\n# Commands without context fail helpfully\ntfgrid-compose create project\n# \u2192 Error: Multiple apps. Use: tfgrid-compose select &lt;app&gt;\n\n# Set context\ntfgrid-compose select web-dashboard\n\n# Now commands work\ntfgrid-compose deploy\n</code></pre> <p>\u2705 Clear errors guide you</p>"},{"location":"cli/context-system/#command-resolution-order","title":"Command Resolution Order","text":"<p>When you run a command, tfgrid-compose checks:</p> <ol> <li> <p>Is it a generic command? (up, down, status, logs, ssh, etc.)</p> </li> <li> <p>If yes: Execute generic command</p> </li> <li> <p>Is it app-specific? (create, run, stop for ai-agent, etc.)</p> </li> <li> <p>Check context (auto or explicit)</p> </li> <li> <p>Route to app's command script</p> </li> <li> <p>Explicit app in command?</p> </li> <li> <p><code>tfgrid-compose tfgrid-ai-agent create</code> overrides context</p> </li> </ol>"},{"location":"cli/context-system/#best-practices","title":"Best Practices","text":""},{"location":"cli/context-system/#working-with-one-app","title":"Working with One App","text":"<pre><code># Deploy\ntfgrid-compose up tfgrid-ai-agent\n\n# Just use commands directly\ntfgrid-compose create project\ntfgrid-compose run project\ntfgrid-compose projects\n</code></pre> <p>No <code>select</code> needed!</p>"},{"location":"cli/context-system/#working-with-multiple-apps","title":"Working with Multiple Apps","text":"<pre><code># Set context at start of work session\ntfgrid-compose select tfgrid-ai-agent\n\n# Work on multiple projects\ntfgrid-compose create project1\ntfgrid-compose create project2\ntfgrid-compose run project1\n\n# Select when changing apps\ntfgrid-compose select web-dashboard\ntfgrid-compose deploy\n</code></pre> <p>One <code>select</code> per work session</p>"},{"location":"cli/context-system/#quick-commands-without-selection","title":"Quick Commands Without Selection","text":"<pre><code># Explicit app name (no select needed)\ntfgrid-compose tfgrid-ai-agent create quick-project\ntfgrid-compose web-dashboard status\n</code></pre> <p>Override context for one-off commands</p>"},{"location":"cli/context-system/#technical-details","title":"Technical Details","text":""},{"location":"cli/context-system/#context-storage","title":"Context Storage","text":"<ul> <li>Location: <code>~/.config/tfgrid-compose/context.yaml</code></li> <li>Format: YAML with app and project context</li> <li>Scope: Global (all directories)</li> </ul> <p>Example context file: <pre><code>active_app: tfgrid-ai-agent\nactive_project: my-project\n</code></pre></p>"},{"location":"cli/context-system/#auto-detection-logic","title":"Auto-Detection Logic","text":"<pre><code>1. Check deployed apps count\n2. If count == 1:\n   - Use that app automatically\n   - No context file needed\n3. If count &gt; 1:\n   - Check context file\n   - If missing: Prompt to select\n4. If count == 0:\n   - Show help to deploy\n</code></pre>"},{"location":"cli/context-system/#examples","title":"Examples","text":""},{"location":"cli/context-system/#example-1-fresh-start","title":"Example 1: Fresh Start","text":"<pre><code># Deploy your first app\ntfgrid-compose up tfgrid-ai-agent\n\n# Start using it immediately\ntfgrid-compose create music-website\ntfgrid-compose run music-website\ntfgrid-compose monitor music-website\n</code></pre>"},{"location":"cli/context-system/#example-2-multiple-apps","title":"Example 2: Multiple Apps","text":"<pre><code># Deploy apps\ntfgrid-compose up tfgrid-ai-agent\ntfgrid-compose up web-dashboard\n\n# Set context\ntfgrid-compose select tfgrid-ai-agent\n\n# Work with AI agent\ntfgrid-compose create backend-api\ntfgrid-compose run backend-api\n\n# Select other app\ntfgrid-compose select web-dashboard\ntfgrid-compose deploy\n</code></pre>"},{"location":"cli/context-system/#example-3-mixed-mode","title":"Example 3: Mixed Mode","text":"<pre><code># Have context set to ai-agent\ntfgrid-compose select tfgrid-ai-agent\n\n# Use contextual commands\ntfgrid-compose create project1\n\n# Quick command on other app (no selection change)\ntfgrid-compose web-dashboard status\n\n# Continue with ai-agent (context unchanged)\ntfgrid-compose run project1\n</code></pre>"},{"location":"cli/context-system/#see-also","title":"See Also","text":"<ul> <li>App-Specific Commands - Commands unique to each app</li> <li>AI Agent Guide - Using the AI coding agent</li> <li>CLI Reference - Full command reference</li> </ul>"},{"location":"cli/registry/","title":"Registry Integration","text":"<p>The TFGrid Compose registry allows you to discover and deploy apps by name, without manually cloning repositories.</p> <p>:::info Version Registry integration is available in v0.13.4 (current version) :::</p>"},{"location":"cli/registry/#quick-start","title":"Quick Start","text":"<pre><code># Search available apps\ntfgrid-compose search\n\n# Deploy an app by name\ntfgrid-compose up tfgrid-ai-agent\n\n# List deployed apps\ntfgrid-compose list\n\n# Switch between apps\ntfgrid-compose switch tfgrid-ai-agent\n</code></pre>"},{"location":"cli/registry/#searching-apps","title":"Searching Apps","text":""},{"location":"cli/registry/#browse-all-apps","title":"Browse All Apps","text":"<pre><code>tfgrid-compose search\n</code></pre> <p>Output: <pre><code>Available apps:\n\ntfgrid-ai-agent      AI coding assistant with Qwen integration\ntfgrid-gitea         Self-hosted Git service with web interface\n</code></pre></p>"},{"location":"cli/registry/#search-by-name","title":"Search by Name","text":"<pre><code>tfgrid-compose search tfgrid-ai-agent\n</code></pre> <p>Output: <pre><code>tfgrid-ai-agent      AI coding assistant with Qwen integration\n</code></pre></p>"},{"location":"cli/registry/#search-by-keyword","title":"Search by Keyword","text":"<pre><code>tfgrid-compose search ai\n</code></pre> <p>Output: <pre><code>tfgrid-ai-agent      AI coding assistant with Qwen integration\n</code></pre></p>"},{"location":"cli/registry/#deploying-apps","title":"Deploying Apps","text":""},{"location":"cli/registry/#deploy-by-name","title":"Deploy by Name","text":"<p>Instead of cloning repositories manually, deploy directly by name:</p> <pre><code>tfgrid-compose up tfgrid-ai-agent\n</code></pre> <p>What happens: 1. \u2705 Fetches app info from registry 2. \u2705 Downloads app repository to cache 3. \u2705 Deploys the app (4 CPU, 8GB RAM, 100GB disk VM) 4. \u2705 Sets it as active context</p>"},{"location":"cli/registry/#deploy-from-local-path","title":"Deploy from Local Path","text":"<p>You can still deploy from local paths:</p> <pre><code>tfgrid-compose up ./my-custom-app\n</code></pre> <p>Both methods work identically - the CLI automatically detects whether you're providing a name or path.</p>"},{"location":"cli/registry/#managing-multiple-apps","title":"Managing Multiple Apps","text":""},{"location":"cli/registry/#list-deployed-apps","title":"List Deployed Apps","text":"<p>See all your deployed apps:</p> <pre><code>tfgrid-compose list\n</code></pre> <p>Output: <pre><code>  * wordpress (active)\n    ai-agent\n    nextcloud\n</code></pre></p> <p>The asterisk (<code>*</code>) indicates the currently active app.</p>"},{"location":"cli/registry/#switch-active-app","title":"Switch Active App","text":"<p>Change which app commands operate on:</p> <pre><code>tfgrid-compose switch ai-agent\n</code></pre> <p>After switching: - <code>tfgrid-compose logs</code> \u2192 shows ai-agent logs - <code>tfgrid-compose status</code> \u2192 shows ai-agent status - <code>tfgrid-compose exec</code> \u2192 runs commands on ai-agent</p>"},{"location":"cli/registry/#context-aware-commands","title":"Context-Aware Commands","text":"<p>Once you switch, all commands operate on the active app:</p> <pre><code># Switch to AI agent\ntfgrid-compose switch tfgrid-ai-agent\n\n# These all operate on AI agent now\ntfgrid-compose logs\ntfgrid-compose status\ntfgrid-compose create my-project\n\n# Switch to Gitea\ntfgrid-compose switch tfgrid-gitea\n\n# Now these operate on Gitea\ntfgrid-compose address\ntfgrid-compose logs\n</code></pre>"},{"location":"cli/registry/#complete-workflow-example","title":"Complete Workflow Example","text":""},{"location":"cli/registry/#deploy-multiple-apps","title":"Deploy Multiple Apps","text":"<pre><code># Search for apps\ntfgrid-compose search\n\n# Deploy AI agent for development\ntfgrid-compose up tfgrid-ai-agent\n\n# Deploy Gitea for code storage\ntfgrid-compose up tfgrid-gitea\n\n# List all deployed apps\ntfgrid-compose list\n</code></pre> <p>Output: <pre><code>  * tfgrid-gitea (active)\n    tfgrid-ai-agent\n</code></pre></p>"},{"location":"cli/registry/#work-with-different-apps","title":"Work with Different Apps","text":"<pre><code># Work with AI agent\ntfgrid-compose switch tfgrid-ai-agent\ntfgrid-compose create my-project\ntfgrid-compose monitor my-project\ntfgrid-compose logs\n\n# Check Gitea status\ntfgrid-compose switch tfgrid-gitea\ntfgrid-compose address\ntfgrid-compose logs\n</code></pre>"},{"location":"cli/registry/#app-caching","title":"App Caching","text":"<p>Apps are automatically cached locally for fast deployment.</p>"},{"location":"cli/registry/#cache-location","title":"Cache Location","text":"<pre><code>~/.config/tfgrid-compose/\n\u251c\u2500\u2500 registry/\n\u2502   \u2514\u2500\u2500 apps.yaml           # Registry cache (1hr TTL)\n\u251c\u2500\u2500 apps/\n\u2502   \u251c\u2500\u2500 wordpress/          # Cached app repos\n\u2502   \u251c\u2500\u2500 ai-agent/\n\u2502   \u2514\u2500\u2500 nextcloud/\n\u251c\u2500\u2500 state/\n\u2502   \u251c\u2500\u2500 wordpress/          # Per-app deployment state\n\u2502   \u251c\u2500\u2500 ai-agent/\n\u2502   \u2514\u2500\u2500 nextcloud/\n\u2514\u2500\u2500 current-app             # Active app pointer\n</code></pre>"},{"location":"cli/registry/#cache-behavior","title":"Cache Behavior","text":"<ul> <li>Registry: Refreshed every hour automatically</li> <li>Apps: Downloaded once, reused for all deployments</li> <li>Updates: Apps use cached version (pull updates manually if needed)</li> </ul>"},{"location":"cli/registry/#updating-cached-apps","title":"Updating Cached Apps","text":"<pre><code># Navigate to cached app\ncd ~/.config/tfgrid-compose/apps/wordpress\n\n# Pull latest changes\ngit pull\n\n# Redeploy with updates\ntfgrid-compose up wordpress\n</code></pre>"},{"location":"cli/registry/#state-management","title":"State Management","text":"<p>Each app has isolated state, preventing conflicts.</p>"},{"location":"cli/registry/#per-app-state","title":"Per-App State","text":"<pre><code># Deploy two apps\ntfgrid-compose up wordpress\ntfgrid-compose up nextcloud\n\n# Each has independent state\n~/.config/tfgrid-compose/state/\n\u251c\u2500\u2500 wordpress/\n\u2502   \u251c\u2500\u2500 vm_ip\n\u2502   \u251c\u2500\u2500 wireguard.conf\n\u2502   \u2514\u2500\u2500 ansible_inventory.yaml\n\u2514\u2500\u2500 nextcloud/\n    \u251c\u2500\u2500 vm_ip\n    \u251c\u2500\u2500 wireguard.conf\n    \u2514\u2500\u2500 ansible_inventory.yaml\n</code></pre>"},{"location":"cli/registry/#no-conflicts","title":"No Conflicts","text":"<p>You can deploy the same app multiple times by deploying from different paths with different names.</p>"},{"location":"cli/registry/#comparison-old-vs-new","title":"Comparison: Old vs New","text":""},{"location":"cli/registry/#old-way-pre-v0100","title":"Old Way (Pre-v0.10.0)","text":"<pre><code># Manual steps\ngit clone https://github.com/tfgrid-studio/wordpress-app\ncd wordpress-app\ntfgrid-compose up .\n</code></pre>"},{"location":"cli/registry/#new-way-v0100","title":"New Way (v0.10.0+)","text":"<pre><code># One command\ntfgrid-compose up wordpress\n</code></pre>"},{"location":"cli/registry/#registry-format","title":"Registry Format","text":"<p>The registry is a simple YAML file hosted on GitHub.</p>"},{"location":"cli/registry/#example-registry-entry","title":"Example Registry Entry","text":"<pre><code>tfgrid-ai-agent:\n  description: AI coding assistant with Qwen integration\n  repo: https://github.com/tfgrid-studio/tfgrid-ai-agent\n  pattern: single-vm\n  version: v0.3.0\n  tags:\n    - ai\n    - coding\n    - development\n    - qwen\n  requirements:\n    cpu: 4\n    memory: 8GB\n    disk: 100GB\n\ntfgrid-gitea:\n  description: Self-hosted Git service with web interface\n  repo: https://github.com/tfgrid-studio/tfgrid-gitea\n  pattern: single-vm\n  version: v1.0.0\n  tags:\n    - git\n    - scm\n    - repository\n    - collaboration\n  requirements:\n    cpu: 2\n    memory: 4GB\n    disk: 50GB\n</code></pre>"},{"location":"cli/registry/#registry-location","title":"Registry Location","text":"<p>Public registry: https://github.com/tfgrid-studio/registry</p>"},{"location":"cli/registry/#advanced-usage","title":"Advanced Usage","text":""},{"location":"cli/registry/#mix-registry-and-local-apps","title":"Mix Registry and Local Apps","text":"<pre><code># Deploy from registry\ntfgrid-compose up tfgrid-ai-agent\n\n# Deploy from local path\ntfgrid-compose up ./my-custom-app\n\n# Both work together\ntfgrid-compose list\n</code></pre> <p>Output: <pre><code>  * my-custom-app (active)\n    tfgrid-ai-agent\n</code></pre></p>"},{"location":"cli/registry/#deploy-same-app-multiple-times","title":"Deploy Same App Multiple Times","text":"<pre><code># Deploy production AI agent from registry\ntfgrid-compose up tfgrid-ai-agent\n\n# Deploy staging AI agent from local fork\ntfgrid-compose up ./ai-agent-staging\n</code></pre>"},{"location":"cli/registry/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/registry/#app-not-found","title":"App Not Found","text":"<pre><code>tfgrid-compose up myapp\n# Error: App 'myapp' not found in registry\n</code></pre> <p>Solution: Search the registry to find the correct name:</p> <pre><code>tfgrid-compose search\n</code></pre>"},{"location":"cli/registry/#cache-issues","title":"Cache Issues","text":"<p>If the registry seems outdated, it refreshes automatically after 1 hour. To force refresh:</p> <pre><code># Remove cache\nrm -rf ~/.config/tfgrid-compose/registry/\n\n# Next command will fetch fresh registry\ntfgrid-compose search\n</code></pre>"},{"location":"cli/registry/#app-already-deployed","title":"App Already Deployed","text":"<pre><code>tfgrid-compose up tfgrid-ai-agent\n# Error: App 'tfgrid-ai-agent' is already deployed\n</code></pre> <p>Solution: Destroy first or switch to it:</p> <pre><code># Option 1: Destroy and redeploy\ntfgrid-compose down tfgrid-ai-agent\ntfgrid-compose up tfgrid-ai-agent\n\n# Option 2: Switch to it\ntfgrid-compose switch tfgrid-ai-agent\n</code></pre>"},{"location":"cli/registry/#best-practices","title":"Best Practices","text":""},{"location":"cli/registry/#1-search-before-deploying","title":"1. Search Before Deploying","text":"<p>Always search to find the right app name:</p> <pre><code>tfgrid-compose search\n</code></pre>"},{"location":"cli/registry/#2-list-regularly","title":"2. List Regularly","text":"<p>Keep track of deployed apps:</p> <pre><code>tfgrid-compose list\n</code></pre>"},{"location":"cli/registry/#3-switch-explicitly","title":"3. Switch Explicitly","text":"<p>Always switch before running commands:</p> <pre><code>tfgrid-compose switch myapp\ntfgrid-compose logs\n</code></pre>"},{"location":"cli/registry/#4-clean-up-unused-apps","title":"4. Clean Up Unused Apps","text":"<p>Destroy apps you're no longer using:</p> <pre><code>tfgrid-compose down tfgrid-ai-agent\n</code></pre>"},{"location":"cli/registry/#next-steps","title":"Next Steps","text":"<ul> <li>Deploy Your First App</li> <li>CLI Reference</li> <li>Pattern Guide</li> <li>Contributing Apps to Registry</li> </ul>"},{"location":"cli/registry/#related","title":"Related","text":"<ul> <li>Getting Started</li> <li>CLI Commands</li> <li>Deployment Patterns</li> </ul>"},{"location":"community/code-of-conduct/","title":"Code of Conduct","text":"<p>Version: 1.0 Last Updated: October 14, 2025 Applies To: All TFGrid Studio projects and community spaces</p>"},{"location":"community/code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in TFGrid Studio a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"community/code-of-conduct/#our-standards","title":"Our Standards","text":""},{"location":"community/code-of-conduct/#expected-behavior","title":"\u2705 Expected Behavior","text":"<p>Examples of behavior that contributes to a positive environment:</p> <ul> <li>Respect: Treating all community members with respect and consideration</li> <li>Kindness: Being welcoming and supportive to newcomers</li> <li>Constructive Feedback: Providing helpful, actionable criticism</li> <li>Collaboration: Working together toward common goals</li> <li>Responsibility: Taking accountability for mistakes and learning from them</li> <li>Focus: Keeping discussions relevant and productive</li> <li>Empathy: Showing understanding of different viewpoints and experiences</li> <li>Professionalism: Maintaining professional standards in all interactions</li> </ul>"},{"location":"community/code-of-conduct/#unacceptable-behavior","title":"\u274c Unacceptable Behavior","text":"<p>Examples of unacceptable behavior include:</p> <ul> <li>Harassment: Trolling, insulting/derogatory comments, personal or political attacks</li> <li>Discrimination: Any form of discrimination or exclusionary jokes/language</li> <li>Privacy Violation: Publishing others' private information without permission</li> <li>Intimidation: Threatening, stalking, or doxxing community members</li> <li>Sexual Content: Unwelcome sexual attention or advances</li> <li>Disruption: Deliberately disrupting discussions or community activities</li> <li>Spam: Excessive self-promotion or off-topic posts</li> <li>Bad Faith: Arguing in bad faith or sea-lioning</li> <li>Weaponization: Using the Code of Conduct as a tool for harassment</li> </ul>"},{"location":"community/code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies to all TFGrid Studio spaces, including but not limited to:</p> <p>Online Spaces:</p> <ul> <li>GitHub repositories (issues, pull requests, discussions)</li> <li>Official Discord/Slack channels</li> <li>Social media accounts</li> <li>Email communications</li> <li>Documentation sites</li> <li>Video calls and meetings</li> </ul> <p>Offline Spaces:</p> <ul> <li>Conferences and meetups</li> <li>Workshops and training sessions</li> <li>Any event representing TFGrid Studio</li> </ul> <p>This Code of Conduct also applies when an individual is officially representing the community in public spaces.</p>"},{"location":"community/code-of-conduct/#enforcement","title":"Enforcement","text":""},{"location":"community/code-of-conduct/#reporting","title":"Reporting","text":"<p>If you experience or witness unacceptable behavior, or have any other concerns, please report it by:</p> <ol> <li>Email: contact@tfgrid.studio</li> <li>GitHub: Create a confidential security advisory</li> <li>Direct Message: Contact a maintainer privately</li> </ol> <p>What to include in your report:</p> <ul> <li>Your contact information</li> <li>Names (usernames) of people involved</li> <li>Description of the behavior</li> <li>Links or screenshots (if applicable)</li> <li>Any other relevant context</li> <li>Whether you prefer to remain anonymous</li> </ul> <p>All reports will be kept confidential. We will never share reporter information without explicit consent unless required by law.</p>"},{"location":"community/code-of-conduct/#response-timeline","title":"Response Timeline","text":"<ul> <li>Acknowledgment: Within 24 hours</li> <li>Initial Review: Within 3 business days</li> <li>Resolution: Varies by complexity, typically within 1-2 weeks</li> </ul> <p>You will receive updates on the progress of your report.</p>"},{"location":"community/code-of-conduct/#enforcement-actions","title":"Enforcement Actions","text":"<p>Project maintainers are responsible for clarifying and enforcing our standards. They will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Possible consequences include:</p>"},{"location":"community/code-of-conduct/#1-warning","title":"1. Warning","text":"<p>Impact: A private, written warning explaining the violation and why the behavior was inappropriate.</p> <p>Duration: Single incident</p>"},{"location":"community/code-of-conduct/#2-temporary-ban","title":"2. Temporary Ban","text":"<p>Impact: A temporary ban from all community spaces (GitHub, Discord, etc.)</p> <p>Duration: Days to weeks, depending on severity</p>"},{"location":"community/code-of-conduct/#3-permanent-ban","title":"3. Permanent Ban","text":"<p>Impact: Permanent ban from all TFGrid Studio community spaces</p> <p>Duration: Indefinite</p>"},{"location":"community/code-of-conduct/#appeal-process","title":"Appeal Process","text":"<p>If you believe an enforcement action was made in error, you may appeal by:</p> <ol> <li>Emailing contact@tfgrid.studio with \"Appeal\" in the subject</li> <li>Providing new information or context</li> <li>Explaining why you believe the decision was incorrect</li> </ol> <p>Appeals will be reviewed by a different maintainer when possible.</p>"},{"location":"community/code-of-conduct/#guidelines-for-specific-spaces","title":"Guidelines for Specific Spaces","text":""},{"location":"community/code-of-conduct/#github","title":"GitHub","text":"<p>Issues and Pull Requests:</p> <ul> <li>Stay on topic</li> <li>Be patient with maintainers (they're volunteers)</li> <li>Don't demand immediate responses</li> <li>Provide complete information (logs, versions, steps to reproduce)</li> <li>Close resolved issues</li> </ul> <p>Code Reviews:</p> <ul> <li>Focus on code, not people (\"This function could be improved\" vs \"You wrote bad code\")</li> <li>Suggest alternatives</li> <li>Acknowledge good work</li> <li>Accept feedback gracefully</li> </ul> <p>Discussions:</p> <ul> <li>Search before posting duplicates</li> <li>Use appropriate categories</li> <li>Mark solutions when found</li> <li>Help others when you can</li> </ul>"},{"location":"community/code-of-conduct/#chat-discordslack","title":"Chat (Discord/Slack)","text":"<ul> <li>Keep conversations in appropriate channels</li> <li>No excessive @mentions</li> <li>Use threads for long discussions</li> <li>Respect Do Not Disturb status</li> <li>No spam or unsolicited DMs</li> <li>Keep memes and off-topic content minimal</li> </ul>"},{"location":"community/code-of-conduct/#social-media","title":"Social Media","text":"<ul> <li>Don't speak on behalf of TFGrid Studio without authorization</li> <li>Be respectful in comments and replies</li> <li>Disclose your relationship when promoting TFGrid Studio projects</li> <li>Don't engage with trolls or bad-faith actors</li> </ul>"},{"location":"community/code-of-conduct/#maintainer-responsibilities","title":"Maintainer Responsibilities","text":"<p>Project maintainers are responsible for:</p> <ul> <li>Modeling: Exemplifying the Code of Conduct in their own behavior</li> <li>Enforcing: Fairly and consistently enforcing the Code of Conduct</li> <li>Communicating: Clearly communicating expectations and decisions</li> <li>Transparency: Being transparent about enforcement actions (while respecting privacy)</li> <li>Improvement: Continuously improving community health</li> </ul> <p>Maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"community/code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from:</p> <ul> <li>Contributor Covenant, version 2.1</li> <li>Django Code of Conduct</li> <li>Rust Code of Conduct</li> </ul>"},{"location":"community/code-of-conduct/#changes","title":"Changes","text":"<p>We may update this Code of Conduct from time to time. All changes will be announced through official channels and posted to this document.</p> <p>Version History:</p> <ul> <li>v1.0 (2025-10-14): Initial Code of Conduct</li> </ul>"},{"location":"community/code-of-conduct/#contact","title":"Contact","text":"<p>Enforcement Team: contact@tfgrid.studio General Inquiries: contact@tfgrid.studio Security Issues: See Security Policy</p>"},{"location":"community/code-of-conduct/#license","title":"License","text":"<p>This Code of Conduct is licensed under the Creative Commons Attribution 4.0 International License.</p> <p>Thank you for helping make TFGrid Studio a welcoming and inclusive community! \ud83c\udf1f</p>"},{"location":"community/contributing/","title":"Contributing to TFGrid Studio","text":"<p>Welcome! We're excited that you're interested in contributing to TFGrid Studio. This guide will help you get started.</p>"},{"location":"community/contributing/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Getting Started</li> <li>How to Contribute</li> <li>Development Workflow</li> <li>Code Standards</li> <li>Testing</li> <li>Documentation</li> <li>Community</li> </ol>"},{"location":"community/contributing/#getting-started","title":"Getting Started","text":""},{"location":"community/contributing/#prerequisites","title":"Prerequisites","text":"<p>For tfgrid-compose development:</p> <ul> <li>Bash 4.0+</li> <li>Git</li> <li>OpenTofu or Terraform</li> <li>Ansible</li> <li>Basic understanding of shell scripting</li> </ul> <p>For documentation:</p> <ul> <li>Markdown knowledge</li> <li>Git</li> <li>Python 3.8+ (for local MkDocs preview)</li> </ul>"},{"location":"community/contributing/#set-up-development-environment","title":"Set Up Development Environment","text":"<pre><code># Clone the repository\ngit clone https://github.com/tfgrid-studio/tfgrid-compose\ncd tfgrid-compose\n\n# Install prerequisites\n# Ubuntu/Debian\nsudo apt update\nsudo apt install ansible git\n\n# Install OpenTofu (recommended)\ncurl -L https://get.opentofu.org/install-opentofu.sh | sudo bash\n\n# Test your setup\n./cli/tfgrid-compose --version\n</code></pre>"},{"location":"community/contributing/#first-time-setup","title":"First Time Setup","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork: <pre><code>git clone https://github.com/YOUR-USERNAME/tfgrid-compose\ncd tfgrid-compose\n</code></pre></li> <li>Add upstream remote: <pre><code>git remote add upstream https://github.com/tfgrid-studio/tfgrid-compose\n</code></pre></li> <li>Create a branch: <pre><code>git checkout -b feature/my-feature\n</code></pre></li> </ol>"},{"location":"community/contributing/#how-to-contribute","title":"How to Contribute","text":""},{"location":"community/contributing/#types-of-contributions","title":"Types of Contributions","text":"<p>We welcome many types of contributions:</p>"},{"location":"community/contributing/#bug-reports","title":"\ud83d\udc1b Bug Reports","text":"<p>Found a bug? Help us fix it!</p> <p>Before reporting:</p> <ul> <li>Search existing issues</li> <li>Try latest version</li> <li>Gather reproduction steps</li> </ul> <p>Create an issue with:</p> <ul> <li>Clear title</li> <li>Description of the bug</li> <li>Steps to reproduce</li> <li>Expected vs actual behavior</li> <li>Environment details (OS, versions)</li> <li>Logs (with sensitive data removed)</li> </ul>"},{"location":"community/contributing/#feature-requests","title":"\ud83d\udca1 Feature Requests","text":"<p>Have an idea for improvement?</p> <p>Create an issue with:</p> <ul> <li>Clear use case</li> <li>Proposed solution</li> <li>Alternatives considered</li> <li>Willingness to implement</li> </ul>"},{"location":"community/contributing/#documentation","title":"\ud83d\udcdd Documentation","text":"<p>Improve or add documentation:</p> <ul> <li>Fix typos</li> <li>Clarify confusing sections</li> <li>Add examples</li> <li>Write guides</li> <li>Translate content</li> </ul>"},{"location":"community/contributing/#code-contributions","title":"\ud83d\udcbb Code Contributions","text":"<p>Implement features or fix bugs:</p> <ul> <li>Bug fixes</li> <li>New features</li> <li>Performance improvements</li> <li>Refactoring</li> <li>Tests</li> </ul>"},{"location":"community/contributing/#design-patterns","title":"\ud83c\udfa8 Design Patterns","text":"<p>Create new deployment patterns:</p> <ul> <li>Follow Pattern Contract</li> <li>Document use cases</li> <li>Provide examples</li> <li>Test thoroughly</li> </ul>"},{"location":"community/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"community/contributing/#1-pick-an-issue","title":"1. Pick an Issue","text":"<p>Good first issues:</p> <ul> <li>Look for <code>good-first-issue</code> label</li> <li>Check <code>help-wanted</code> label</li> <li>Simple bug fixes</li> <li>Documentation improvements</li> </ul> <p>Claim an issue:</p> <ul> <li>Comment \"I'd like to work on this\"</li> <li>Wait for assignment (prevents duplicates)</li> </ul>"},{"location":"community/contributing/#2-create-a-branch","title":"2. Create a Branch","text":"<pre><code># Get latest code\ngit checkout main\ngit pull upstream main\n\n# Create feature branch\ngit checkout -b type/description\n\n# Branch naming:\n# feature/add-monitoring\n# fix/ssh-timeout\n# docs/architecture-guide\n# refactor/validation-module\n</code></pre>"},{"location":"community/contributing/#3-make-changes","title":"3. Make Changes","text":"<p>Best practices:</p> <ul> <li>Make focused, atomic commits</li> <li>Write clear commit messages</li> <li>Test your changes</li> <li>Update documentation</li> <li>Follow code standards</li> </ul>"},{"location":"community/contributing/#4-commit-your-changes","title":"4. Commit Your Changes","text":"<p>Commit message format: <pre><code>type(scope): brief description\n\nDetailed explanation (if needed)\n\nFixes #123\n</code></pre></p> <p>Types:</p> <ul> <li><code>feat</code>: New feature</li> <li><code>fix</code>: Bug fix</li> <li><code>docs</code>: Documentation only</li> <li><code>refactor</code>: Code refactoring</li> <li><code>test</code>: Adding tests</li> <li><code>chore</code>: Maintenance tasks</li> </ul> <p>Examples: <pre><code>git commit -m \"feat(orchestrator): add multi-deployment support\"\ngit commit -m \"fix(validation): resolve mnemonic loading issue\"\ngit commit -m \"docs(architecture): add system diagrams\"\n</code></pre></p>"},{"location":"community/contributing/#5-push-and-create-pull-request","title":"5. Push and Create Pull Request","text":"<pre><code># Push to your fork\ngit push origin feature/my-feature\n\n# Create PR on GitHub\n# - Fill out the PR template\n# - Link related issues\n# - Request review\n</code></pre>"},{"location":"community/contributing/#6-code-review-process","title":"6. Code Review Process","text":"<p>What to expect: - Maintainers will review within 3-5 business days - You may be asked to make changes - CI tests must pass - At least one approval required</p> <p>Responding to feedback: - Be receptive to suggestions - Ask questions if unclear - Make requested changes - Push updates to your branch - Re-request review when ready</p>"},{"location":"community/contributing/#7-merge","title":"7. Merge","text":"<p>Once approved: - Maintainer will merge your PR - Branch will be deleted automatically - Changes go into next release</p>"},{"location":"community/contributing/#code-standards","title":"Code Standards","text":""},{"location":"community/contributing/#shell-scripts-bash","title":"Shell Scripts (Bash)","text":"<p>Style: <pre><code>#!/usr/bin/env bash\n# Brief description of script purpose\n\nset -e  # Exit on error\n\n# Constants in UPPERCASE\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &amp;&amp; pwd)\"\n\n# Functions use snake_case\nmy_function() {\n    local param=$1\n\n    # Clear logic with comments\n    echo \"Processing: $param\"\n}\n\n# Call functions\nmy_function \"value\"\n</code></pre></p> <p>Best practices: - Use <code>set -e</code> for error handling - Quote variables: <code>\"$var\"</code> not <code>$var</code> - Use <code>local</code> for function variables - Add comments for complex logic - Use meaningful variable names - Check command existence: <code>command -v cmd</code></p>"},{"location":"community/contributing/#terraformopentofu","title":"Terraform/OpenTofu","text":"<p>Style: <pre><code># Use consistent formatting\nresource \"grid_deployment\" \"vm\" {\n  name = \"my_deployment\"\n\n  # Group related attributes\n  network {\n    node_id = var.node_id\n    name    = \"network\"\n  }\n}\n\n# Document outputs\noutput \"primary_ip\" {\n  description = \"Primary IP address for SSH connection\"\n  value       = local.primary_ip\n}\n</code></pre></p> <p>Requirements: - Implement pattern contract - Use variables for configurability - Document all outputs - Run <code>terraform fmt</code> before committing</p>"},{"location":"community/contributing/#ansible","title":"Ansible","text":"<p>Style: <pre><code>---\n# Use descriptive task names\n- name: Install required packages\n  apt:\n    name:\n      - git\n      - curl\n      - build-essential\n    state: present\n    update_cache: yes\n  become: yes\n\n# Use handlers for services\n- name: Configure application\n  template:\n    src: app.conf.j2\n    dest: /etc/app/config.conf\n  notify: restart application\n\nhandlers:\n  - name: restart application\n    systemd:\n      name: app\n      state: restarted\n</code></pre></p> <p>Best practices: - Use descriptive task names - Idempotent operations - Use handlers for restarts - Tag tasks appropriately - Test playbooks thoroughly</p>"},{"location":"community/contributing/#testing","title":"Testing","text":""},{"location":"community/contributing/#manual-testing","title":"Manual Testing","text":"<p>Before submitting PR: 1. Test your changes locally 2. Try different configurations 3. Test error cases 4. Verify logs are helpful</p> <p>Test script: <pre><code># Example test workflow\ncd tfgrid-compose\n\n# Test validation\n./cli/tfgrid-compose up /nonexistent/path  # Should fail gracefully\n\n# Test deployment (if you have access to ThreeFold Grid)\n./cli/tfgrid-compose up ../tfgrid-ai-agent\n\n# Test cleanup\n./cli/tfgrid-compose down ../tfgrid-ai-agent\n</code></pre></p>"},{"location":"community/contributing/#automated-testing","title":"Automated Testing","text":"<p>Run test suite: <pre><code># Run validation tests\n./tests/test-validation.sh\n\n# Add new tests for your changes\n# tests/test-my-feature.sh\n</code></pre></p>"},{"location":"community/contributing/#test-checklist","title":"Test Checklist","text":"<ul> <li> Code follows style guide</li> <li> Manual testing completed</li> <li> Error cases handled</li> <li> Logs are clear and helpful</li> <li> Documentation updated</li> <li> No sensitive data in commits</li> </ul>"},{"location":"community/contributing/#documentation_1","title":"Documentation","text":""},{"location":"community/contributing/#when-to-update-docs","title":"When to Update Docs","text":"<p>Always update docs when: - Adding new features - Changing behavior - Adding CLI commands - Modifying configuration options - Fixing bugs that affect usage</p>"},{"location":"community/contributing/#documentation-structure","title":"Documentation Structure","text":"<p>tfgrid-docs/ (public-facing): - User guides - API documentation - Tutorials - Troubleshooting</p> <p>tfgrid-compose/README.md: - Project overview - Quick start - Links to full docs</p>"},{"location":"community/contributing/#writing-style","title":"Writing Style","text":"<p>Be clear and concise: - Short sentences - Active voice - Clear examples - Step-by-step instructions</p> <p>Good example: <pre><code>## Deploy Application\n\nDeploy your application to ThreeFold Grid:\n\n```bash\ntfgrid-compose up /path/to/app\n</code></pre></p> <p>This command will: 1. Validate prerequisites 2. Create infrastructure 3. Configure networking 4. Deploy your application <pre><code>**Bad example:**\n```markdown\n## Deployment\n\nYou can deploy stuff with the up command maybe.\n</code></pre></p>"},{"location":"community/contributing/#community","title":"Community","text":""},{"location":"community/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>All contributors must follow our Code of Conduct.</p> <p>Key points: - Be respectful - Be inclusive - Be constructive - Be professional</p>"},{"location":"community/contributing/#communication-channels","title":"Communication Channels","text":"<p>GitHub: - Issues: Bug reports, feature requests - Discussions: Questions, ideas, help - Pull Requests: Code contributions</p> <p>Maintainers: - Tag <code>@tfgrid-studio/maintainers</code> for urgent issues - Be patient - we're volunteers</p>"},{"location":"community/contributing/#getting-help","title":"Getting Help","text":"<p>Before asking: 1. Check documentation 2. Search existing issues 3. Read troubleshooting guide</p> <p>When asking: - Provide context - Include error messages - Show what you tried - Be specific</p>"},{"location":"community/contributing/#release-process","title":"Release Process","text":""},{"location":"community/contributing/#versioning","title":"Versioning","text":"<p>We follow Semantic Versioning: - MAJOR: Breaking changes - MINOR: New features (backward-compatible) - PATCH: Bug fixes</p>"},{"location":"community/contributing/#release-cycle","title":"Release Cycle","text":"<p>Regular releases: - PATCH: As needed for bug fixes - MINOR: Monthly or when features are ready - MAJOR: Annually or for significant changes</p> <p>Your contribution will be included in the next release after merge.</p>"},{"location":"community/contributing/#recognition","title":"Recognition","text":""},{"location":"community/contributing/#contributors","title":"Contributors","text":"<p>All contributors are recognized in: - GitHub contributors list - Release notes - Project README</p>"},{"location":"community/contributing/#maintainers","title":"Maintainers","text":"<p>Outstanding contributors may be invited to become maintainers.</p> <p>Maintainer responsibilities: - Review pull requests - Triage issues - Guide contributors - Make release decisions - Enforce Code of Conduct</p>"},{"location":"community/contributing/#quick-reference","title":"Quick Reference","text":""},{"location":"community/contributing/#common-tasks","title":"Common Tasks","text":"<pre><code># Get latest code\ngit checkout main\ngit pull upstream main\n\n# Create branch\ngit checkout -b feature/my-feature\n\n# Make changes and commit\ngit add .\ngit commit -m \"feat(scope): description\"\n\n# Push and create PR\ngit push origin feature/my-feature\n\n# Update branch with latest main\ngit fetch upstream\ngit rebase upstream/main\ngit push --force-with-lease origin feature/my-feature\n</code></pre>"},{"location":"community/contributing/#getting-unstuck","title":"Getting Unstuck","text":"<p>Your PR isn't being reviewed? - Ping after 5 business days - Check if CI failed - Ensure you filled out PR template</p> <p>Tests are failing? - Check CI logs - Run tests locally - Ask for help in PR comments</p> <p>Merge conflict? - Rebase on latest main - Resolve conflicts - Force push to your branch</p>"},{"location":"community/contributing/#thank-you","title":"Thank You!","text":"<p>Thank you for contributing to TFGrid Studio! Your help makes this project better for everyone.</p> <p>Questions? - Create a GitHub Discussion - Email: contact@tfgrid.studio</p> <p>Happy Contributing! \ud83d\ude80</p>"},{"location":"community/security/","title":"Security Policy","text":"<p>Version: 1.0 Last Updated: October 14, 2025 Applies To: All TFGrid Studio projects</p>"},{"location":"community/security/#reporting-security-vulnerabilities","title":"Reporting Security Vulnerabilities","text":"<p>We take security seriously. If you discover a security vulnerability, please report it responsibly.</p>"},{"location":"community/security/#how-to-report","title":"\ud83d\udd12 How to Report","text":"<p>DO NOT create public GitHub issues for security vulnerabilities.</p> <p>Instead, use one of these secure channels:</p>"},{"location":"community/security/#1-github-security-advisory-preferred","title":"1. GitHub Security Advisory (Preferred)","text":"<ol> <li>Go to the repository's Security tab</li> <li>Click \"Report a vulnerability\"</li> <li>Fill out the private advisory form</li> <li>Submit</li> </ol>"},{"location":"community/security/#2-email","title":"2. Email","text":"<p>Send details to: security@tfgrid.studio</p> <p>Encrypt with PGP: (optional but recommended) <pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\n[PGP key will be published separately]\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre></p>"},{"location":"community/security/#what-to-include","title":"\ud83d\udccb What to Include","text":"<p>Please provide:</p> <ul> <li>Description: Clear explanation of the vulnerability</li> <li>Impact: What an attacker could do</li> <li>Affected versions: Which versions are vulnerable</li> <li>Steps to reproduce: Detailed reproduction steps</li> <li>Proof of concept: Code/commands demonstrating the issue (if applicable)</li> <li>Suggested fix: If you have ideas (optional)</li> <li>Your contact info: For follow-up questions</li> </ul> <p>Example report: <pre><code>Title: Mnemonic exposure in debug logs\n\nDescription:\nWhen running with debug mode, the ThreeFold mnemonic is logged\nin plain text to .tfgrid-compose/terraform-apply.log\n\nImpact:\nAn attacker with access to log files could steal wallet credentials\nand drain funds from the ThreeFold account.\n\nAffected Versions:\ntfgrid-compose v0.9.0 and earlier\n\nSteps to Reproduce:\n1. Enable debug mode\n2. Run: tfgrid-compose --debug up &lt;app&gt;\n3. Check: .tfgrid-compose/terraform-apply.log\n4. Mnemonic visible in output\n\nSuggested Fix:\nRedact TF_VAR_mnemonic from all log output\n</code></pre></p>"},{"location":"community/security/#response-timeline","title":"Response Timeline","text":"<p>We aim to respond quickly to security reports:</p> Stage Timeline Acknowledgment Within 24 hours Initial Assessment Within 3 business days Severity Rating Within 5 business days Patch Development Varies by severity (see below) Disclosure After patch is released"},{"location":"community/security/#severity-based-timelines","title":"Severity-Based Timelines","text":"<p>Critical (CVSS 9.0-10.0):</p> <ul> <li>Emergency patch within 7 days</li> <li>Immediate notification to users</li> </ul> <p>High (CVSS 7.0-8.9):</p> <ul> <li>Patch within 30 days</li> <li>Advance notification to users</li> </ul> <p>Medium (CVSS 4.0-6.9):</p> <ul> <li>Patch in next regular release</li> <li>Standard release notes</li> </ul> <p>Low (CVSS 0.1-3.9):</p> <ul> <li>May be batched with other fixes</li> <li>Documented in changelog</li> </ul>"},{"location":"community/security/#what-happens-next","title":"What Happens Next?","text":""},{"location":"community/security/#1-triage","title":"1. Triage","text":"<p>We will: - Confirm the vulnerability - Assess severity using CVSS - Determine affected versions - Identify fix priority</p>"},{"location":"community/security/#2-fix-development","title":"2. Fix Development","text":"<p>We will: - Develop a patch - Test thoroughly - Prepare security advisory - Plan coordinated disclosure</p>"},{"location":"community/security/#3-disclosure","title":"3. Disclosure","text":"<p>We will: - Release patched version - Publish security advisory - Update CHANGELOG - Credit you (if desired)</p>"},{"location":"community/security/#4-communication","title":"4. Communication","text":"<p>You will receive: - Regular updates on progress - Credit in security advisory (optional) - Recognition in Hall of Fame (optional)</p>"},{"location":"community/security/#supported-versions","title":"Supported Versions","text":"<p>We provide security updates for:</p> Version Supported 0.9.x \u2705 Yes (current) 0.8.x \u274c No &lt; 0.8 \u274c No <p>Recommendation: Always use the latest version.</p>"},{"location":"community/security/#security-best-practices","title":"Security Best Practices","text":""},{"location":"community/security/#for-users","title":"For Users","text":""},{"location":"community/security/#mnemonic-security","title":"Mnemonic Security","text":"<p>Store securely: <pre><code># Create secure config directory\nmkdir -p ~/.config/threefold\nchmod 700 ~/.config/threefold\n\n# Store mnemonic with restricted permissions\necho \"your twelve word mnemonic here\" &gt; ~/.config/threefold/mnemonic\nchmod 600 ~/.config/threefold/mnemonic\n\n# Verify permissions\nls -la ~/.config/threefold/mnemonic\n# Should show: -rw------- (600)\n</code></pre></p> <p>Never: - \u274c Commit mnemonics to version control - \u274c Share mnemonics in chat/email - \u274c Store in publicly accessible locations - \u274c Use same mnemonic across environments</p> <p>Do: - \u2705 Use environment variables in CI/CD - \u2705 Rotate mnemonics regularly - \u2705 Use separate mnemonics for dev/prod - \u2705 Back up securely (encrypted offline storage)</p>"},{"location":"community/security/#ssh-key-management","title":"SSH Key Management","text":"<p>Use strong keys: <pre><code># Generate Ed25519 key (recommended)\nssh-keygen -t ed25519 -f ~/.ssh/tfgrid_ed25519\n\n# Or RSA 4096-bit\nssh-keygen -t rsa -b 4096 -f ~/.ssh/tfgrid_rsa\n</code></pre></p> <p>Protect private keys: <pre><code># Set correct permissions\nchmod 600 ~/.ssh/tfgrid_ed25519\nchmod 644 ~/.ssh/tfgrid_ed25519.pub\n\n# Use passphrase (recommended)\nssh-keygen -p -f ~/.ssh/tfgrid_ed25519\n</code></pre></p>"},{"location":"community/security/#wireguard-security","title":"WireGuard Security","text":"<p>Key management: - Generated keys stored in Terraform state - Private keys in <code>/etc/wireguard/</code> (600 permissions) - Don't share WireGuard configurations</p> <p>Network isolation: - WireGuard creates private networks - No default internet routing - Explicitly configure external access if needed</p>"},{"location":"community/security/#deployment-security","title":"Deployment Security","text":"<p>State files contain sensitive data: <pre><code># Add to .gitignore\necho \".tfgrid-compose/\" &gt;&gt; .gitignore\necho \".terraform/\" &gt;&gt; .gitignore\necho \"*.tfstate*\" &gt;&gt; .gitignore\n\n# Never commit:\n# - .tfgrid-compose/\n# - Terraform state files\n# - WireGuard configs\n# - Private keys\n</code></pre></p> <p>Clean up after testing: <pre><code># Remove sensitive logs\nrm -rf .tfgrid-compose/\n\n# Remove WireGuard configs\nsudo rm -f /etc/wireguard/wg*.conf\n</code></pre></p>"},{"location":"community/security/#for-contributors","title":"For Contributors","text":""},{"location":"community/security/#code-security","title":"Code Security","text":"<p>Never commit: - API keys or tokens - Passwords or secrets - Private keys - Mnemonics or seed phrases - Personal data</p> <p>Use secure coding practices: - Validate all inputs - Sanitize log output - Use parameterized commands (avoid injection) - Check file permissions - Handle errors securely</p> <p>Example - Redacting sensitive data: <pre><code># \u274c Bad: Logs mnemonic\necho \"Using mnemonic: $TF_VAR_mnemonic\"\n\n# \u2705 Good: Redacts mnemonic\nif [ -n \"$TF_VAR_mnemonic\" ]; then\n    echo \"Mnemonic loaded successfully\"\nelse\n    echo \"Mnemonic not found\"\nfi\n</code></pre></p>"},{"location":"community/security/#dependency-security","title":"Dependency Security","text":"<p>Keep dependencies updated: <pre><code># Check for updates\nansible --version\nterraform --version\ntofu --version\n\n# Update to latest\nsudo apt update &amp;&amp; sudo apt upgrade\n</code></pre></p> <p>Review third-party code: - Audit pattern contributions - Review Terraform modules - Check Ansible roles - Verify scripts before execution</p>"},{"location":"community/security/#for-maintainers","title":"For Maintainers","text":""},{"location":"community/security/#release-security","title":"Release Security","text":"<p>Before release: - Review all PRs for security issues - Run security scanners - Check for hardcoded secrets - Verify dependency versions - Test in isolated environment</p> <p>Release checklist: - [ ] No hardcoded credentials - [ ] Dependencies up to date - [ ] Security advisory reviewed - [ ] CHANGELOG includes security fixes - [ ] Version bumped appropriately</p>"},{"location":"community/security/#incident-response","title":"Incident Response","text":"<p>If vulnerability found: 1. Assess severity immediately 2. Notify security team 3. Develop fix in private 4. Test thoroughly 5. Coordinate disclosure 6. Release patch 7. Notify users</p>"},{"location":"community/security/#common-security-issues","title":"Common Security Issues","text":""},{"location":"community/security/#mnemonic-exposure","title":"Mnemonic Exposure","text":"<p>Risk: High - Can lead to fund theft</p> <p>Vectors: - Logs containing mnemonics - Committed to version control - Insecure file permissions - Exposed in error messages</p> <p>Prevention: - Redact from all logs - Check file permissions - Use <code>.gitignore</code> - Sanitize error output</p>"},{"location":"community/security/#state-file-exposure","title":"State File Exposure","text":"<p>Risk: Medium - Contains deployment details</p> <p>Vectors: - Committed to version control - Publicly accessible storage - Insufficient file permissions</p> <p>Prevention: - Add to <code>.gitignore</code> - Use secure state backends - Restrict file permissions - Clean up after use</p>"},{"location":"community/security/#ssh-key-compromise","title":"SSH Key Compromise","text":"<p>Risk: High - Unauthorized VM access</p> <p>Vectors: - Weak key strength - No passphrase - Insecure storage - Shared keys</p> <p>Prevention: - Use Ed25519 or RSA 4096 - Use passphrases - Restrict permissions (600) - Unique keys per deployment</p>"},{"location":"community/security/#wireguard-config-exposure","title":"WireGuard Config Exposure","text":"<p>Risk: Medium - Network access</p> <p>Vectors: - World-readable files - Committed to repos - Shared configurations</p> <p>Prevention: - 600 permissions on configs - Don't commit configs - Rotate keys regularly</p>"},{"location":"community/security/#security-features","title":"Security Features","text":""},{"location":"community/security/#current-security-measures","title":"Current Security Measures","text":"<p>tfgrid-compose implements:</p> <ol> <li>Mnemonic Protection</li> <li>Environment variable isolation</li> <li>File permission checks</li> <li> <p>Warning on insecure permissions</p> </li> <li> <p>SSH Key Security</p> </li> <li>System key usage (not embedded)</li> <li>Key-based auth only (no passwords)</li> <li> <p>Multiple key type support</p> </li> <li> <p>WireGuard Encryption</p> </li> <li>End-to-end encrypted tunnels</li> <li>Private network isolation</li> <li> <p>Automatic key generation</p> </li> <li> <p>State Isolation</p> </li> <li>Local state directory</li> <li>Git-ignored by default</li> <li> <p>Per-deployment separation</p> </li> <li> <p>Input Validation</p> </li> <li>Path validation</li> <li>Manifest validation</li> <li>Prerequisite checks</li> </ol>"},{"location":"community/security/#planned-security-enhancements","title":"Planned Security Enhancements","text":"<p>Roadmap: - [ ] Encrypted state backends (v0.11.0) - [ ] Secrets management integration (v0.12.0) - [ ] Automated security scanning (v1.0.0) - [ ] Supply chain verification (v1.1.0) - [ ] Zero-knowledge deployment options (v2.0.0)</p>"},{"location":"community/security/#security-audits","title":"Security Audits","text":"<p>Status: No formal audit completed yet</p> <p>Planned: - Community review: Ongoing - First formal audit: Planned for v1.0.0 - Regular audits: Annually after 1.0</p> <p>Want to help? - Review code for security issues - Report vulnerabilities responsibly - Contribute security improvements</p>"},{"location":"community/security/#hall-of-fame","title":"Hall of Fame","text":"<p>We recognize security researchers who help keep TFGrid Studio secure.</p> <p>Contributors: - Be the first!</p> <p>Acknowledgment options: - GitHub profile link - Twitter handle - Company name - Anonymous</p>"},{"location":"community/security/#contact","title":"Contact","text":"<p>Security Team: security@tfgrid.studio General Inquiries: contact@tfgrid.studio Code of Conduct: Code of Conduct</p>"},{"location":"community/security/#legal","title":"Legal","text":""},{"location":"community/security/#safe-harbor","title":"Safe Harbor","text":"<p>TFGrid Studio supports safe harbor for security researchers who: - Make good faith effort to avoid harm - Follow responsible disclosure - Don't access/modify user data without permission - Don't perform DoS attacks - Don't spam or cause disruption</p> <p>We will not pursue legal action against researchers who follow these guidelines.</p>"},{"location":"community/security/#scope","title":"Scope","text":"<p>In scope: - tfgrid-compose - tfgrid-ai-agent - tfgrid-docs website - Official infrastructure</p> <p>Out of scope: - Third-party services (ThreeFold Grid itself) - User deployments - Community projects - Social engineering</p> <p>Thank you for helping keep TFGrid Studio secure! \ud83d\udd12</p>"},{"location":"development/pattern-contract/","title":"Pattern Contract","text":"<p>All deployment patterns MUST follow this contract to work with tfgrid-compose orchestrator.</p>"},{"location":"development/pattern-contract/#required-outputs","title":"Required Outputs","text":"<p>Every pattern's Terraform configuration MUST provide these outputs:</p>"},{"location":"development/pattern-contract/#primary_ip-string-required","title":"<code>primary_ip</code> (string, required)","text":"<p>The main IP address for connecting to the deployment. This is used for SSH and management.</p> <pre><code>output \"primary_ip\" {\n  value       = \"10.1.3.2\"  # or whatever the IP is\n  description = \"Primary IP address for SSH connection\"\n}\n</code></pre>"},{"location":"development/pattern-contract/#primary_ip_type-string-required","title":"<code>primary_ip_type</code> (string, required)","text":"<p>The type of the primary IP. Valid values: <code>wireguard</code>, <code>public</code>, <code>mycelium</code></p> <pre><code>output \"primary_ip_type\" {\n  value       = \"wireguard\"\n  description = \"Type of primary IP\"\n}\n</code></pre>"},{"location":"development/pattern-contract/#deployment_name-string-required","title":"<code>deployment_name</code> (string, required)","text":"<p>The name of the deployment on TFGrid.</p> <pre><code>output \"deployment_name\" {\n  value       = \"my_deployment\"\n  description = \"Name of the deployment\"\n}\n</code></pre>"},{"location":"development/pattern-contract/#node_ids-list-required","title":"<code>node_ids</code> (list, required)","text":"<p>List of node IDs used in this deployment.</p> <pre><code>output \"node_ids\" {\n  value       = [8, 12, 15]  # Single or multiple nodes\n  description = \"List of node IDs used in deployment\"\n}\n</code></pre>"},{"location":"development/pattern-contract/#optional-outputs","title":"Optional Outputs","text":""},{"location":"development/pattern-contract/#secondary_ips-list-optional","title":"<code>secondary_ips</code> (list, optional)","text":"<p>Additional IP addresses for multi-node deployments (workers, backends, etc.)</p> <pre><code>output \"secondary_ips\" {\n  value = [\n    {\n      name = \"worker-1\"\n      ip   = \"10.1.3.3\"\n      type = \"wireguard\"\n      role = \"worker\"\n    },\n    {\n      name = \"worker-2\"\n      ip   = \"10.1.3.4\"\n      type = \"wireguard\"\n      role = \"worker\"\n    }\n  ]\n  description = \"Additional IPs for multi-node deployments\"\n}\n</code></pre>"},{"location":"development/pattern-contract/#mycelium_ip-string-optional","title":"<code>mycelium_ip</code> (string, optional)","text":"<p>Mycelium IPv6 address if available.</p> <pre><code>output \"mycelium_ip\" {\n  value       = \"57e:efab:75c4:1a3a:ff0f:2ac:d184:9715\"\n  description = \"Mycelium IPv6 address\"\n}\n</code></pre>"},{"location":"development/pattern-contract/#connection_info-map-optional","title":"<code>connection_info</code> (map, optional)","text":"<p>Special connection information for non-standard deployments.</p> <pre><code>output \"connection_info\" {\n  value = {\n    method     = \"kubectl\"      # How to connect: ssh, kubectl, etc.\n    kubeconfig = \"...\"          # Config file content if needed\n    endpoint   = \"https://...\"  # API endpoint\n  }\n  description = \"Connection information\"\n}\n</code></pre>"},{"location":"development/pattern-contract/#pattern-examples","title":"Pattern Examples","text":""},{"location":"development/pattern-contract/#single-vm-pattern","title":"Single-VM Pattern","text":"<pre><code>output \"primary_ip\" {\n  value = split(\"/\", grid_deployment.vm.vms[0].computedip)[0]\n}\n\noutput \"primary_ip_type\" {\n  value = \"wireguard\"\n}\n\noutput \"deployment_name\" {\n  value = grid_deployment.vm.name\n}\n\noutput \"node_ids\" {\n  value = [var.node_id]\n}\n</code></pre>"},{"location":"development/pattern-contract/#gateway-pattern","title":"Gateway Pattern","text":"<pre><code>output \"primary_ip\" {\n  value = grid_deployment.gateway.vms[0].public_ip\n}\n\noutput \"primary_ip_type\" {\n  value = \"public\"\n}\n\noutput \"secondary_ips\" {\n  value = [\n    for vm in grid_deployment.backends.vms : {\n      name = vm.name\n      ip   = split(\"/\", vm.computedip)[0]\n      type = \"wireguard\"\n      role = \"backend\"\n    }\n  ]\n}\n\noutput \"node_ids\" {\n  value = concat([var.gateway_node], var.backend_nodes)\n}\n</code></pre>"},{"location":"development/pattern-contract/#k3s-pattern","title":"K3s Pattern","text":"<pre><code>output \"primary_ip\" {\n  value = grid_deployment.k3s.vms[0].computedip  # master\n}\n\noutput \"primary_ip_type\" {\n  value = \"wireguard\"\n}\n\noutput \"secondary_ips\" {\n  value = [\n    for vm in slice(grid_deployment.k3s.vms, 1, length(grid_deployment.k3s.vms)) : {\n      name = vm.name\n      ip   = vm.computedip\n      type = \"wireguard\"\n      role = \"worker\"\n    }\n  ]\n}\n\noutput \"connection_info\" {\n  value = {\n    method     = \"kubectl\"\n    kubeconfig = data.remote_file.kubeconfig.content\n    endpoint   = \"https://${primary_ip}:6443\"\n  }\n}\n</code></pre>"},{"location":"development/pattern-contract/#why-this-contract","title":"Why This Contract?","text":"<p>Universal Orchestration: The orchestrator never needs to know pattern-specific details. It just reads standard outputs.</p> <p>Future-Proof: New patterns automatically work with the orchestrator.</p> <p>Multi-Node Support: Secondary IPs handle gateway backends, k8s workers, database replicas, etc.</p> <p>Flexibility: Optional outputs allow pattern-specific features without breaking compatibility.</p>"},{"location":"development/pattern-contract/#validation","title":"Validation","text":"<p>The orchestrator will fail deployment if <code>primary_ip</code> is not provided. All other standard outputs have sensible defaults.</p> <p>Test your pattern: <pre><code>cd patterns/my-pattern/infrastructure\nterraform output primary_ip        # MUST return an IP\nterraform output primary_ip_type   # MUST return wireguard/public/mycelium\nterraform output deployment_name   # MUST return a name\nterraform output node_ids          # MUST return JSON array\n</code></pre></p>"},{"location":"development/submit-app/","title":"Submitting Your App to TFGrid Registry","text":"<p>Share your application with the TFGrid community by submitting it to the official app registry.</p>"},{"location":"development/submit-app/#overview","title":"Overview","text":"<p>Getting your app verified means:</p> <ul> <li>\u2705 Discoverable at registry.tfgrid.studio</li> <li>\u2705 Listed in official registry</li> <li>\u2705 Verified badge</li> <li>\u2705 Increased visibility and trust</li> <li>\u2705 Available via <code>tfgrid-compose up your-app</code> (v0.10.0+)</li> </ul>"},{"location":"development/submit-app/#prerequisites","title":"Prerequisites","text":"<p>Before submitting:</p> <ol> <li>Working App: Deploys successfully with tfgrid-compose</li> <li>Documentation: Clear README with setup instructions</li> <li>App Manifest: Valid <code>tfgrid-compose.yaml</code></li> <li>Open Source: Public repository with open source license (Apache 2.0 recommended)</li> <li>No Secrets: No hardcoded credentials or API keys</li> </ol>"},{"location":"development/submit-app/#required-files","title":"Required Files","text":"<p>Your repository must include:</p> <pre><code>your-app/\n\u251c\u2500\u2500 tfgrid-compose.yaml       # Required: App manifest\n\u251c\u2500\u2500 README.md                  # Required: Documentation\n\u251c\u2500\u2500 LICENSE                    # Required: Open source license\n\u251c\u2500\u2500 deployment/                # Recommended: Deployment scripts\n\u2502   \u251c\u2500\u2500 setup.sh\n\u2502   \u251c\u2500\u2500 configure.sh\n\u2502   \u2514\u2500\u2500 healthcheck.sh\n\u2514\u2500\u2500 .gitignore                # Recommended: Ignore secrets\n</code></pre>"},{"location":"development/submit-app/#minimum-tfgrid-composeyaml","title":"Minimum tfgrid-compose.yaml","text":"<pre><code>name: your-app\nversion: 0.1.0\ndescription: Brief description of your app\n\npatterns:\n  recommended: single-vm  # or gateway, k3s\n\nresources:\n  cpu:\n    min: 2\n    recommended: 4\n  memory:\n    min: 4096\n    recommended: 8192\n  disk:\n    min: 50\n    recommended: 100\n\nhooks:\n  setup: deployment/setup.sh\n  configure: deployment/configure.sh\n  healthcheck: deployment/healthcheck.sh\n</code></pre> <p>See App Manifest Reference for full specification.</p>"},{"location":"development/submit-app/#submission-process","title":"Submission Process","text":""},{"location":"development/submit-app/#step-1-test-thoroughly","title":"Step 1: Test Thoroughly","text":"<pre><code># Test local deployment\ncd your-app\ntfgrid-compose up .\n\n# Verify all functionality\ntfgrid-compose status\ntfgrid-compose ssh\n\n# Clean up\ntfgrid-compose down\n</code></pre>"},{"location":"development/submit-app/#step-2-fork-app-registry","title":"Step 2: Fork App Registry","text":"<pre><code>git clone https://github.com/YOUR-USERNAME/app-registry\ncd app-registry\ngit checkout -b add-your-app\n</code></pre>"},{"location":"development/submit-app/#step-3-add-your-app-entry","title":"Step 3: Add Your App Entry","text":"<p>Edit <code>registry/verified/community.yaml</code> (create if doesn't exist):</p> <pre><code>apps:\n  verified:\n    - name: your-app-name\n      repo: github.com/your-username/your-app-repo\n      author: your-username\n      description: Clear one-line description of your app\n      pattern: single-vm  # or gateway, k3s\n      status: beta  # beta or production\n      version: v0.1.0\n      verified: false  # Will be set to true after review\n      tags:\n        - tag1\n        - tag2\n        - tag3\n      requirements:\n        cpu: 2\n        memory: 4GB\n        disk: 50GB\n      links:\n        docs: https://github.com/your-username/your-app-repo\n        repo: https://github.com/your-username/your-app-repo\n</code></pre>"},{"location":"development/submit-app/#step-4-create-pull-request","title":"Step 4: Create Pull Request","text":"<pre><code>git add registry/verified/community.yaml\ngit commit -m \"feat: add YOUR-APP to verified apps\"\ngit push origin add-your-app\n</code></pre> <p>Create PR on GitHub with: - Title: <code>Add [Your App Name] to verified apps</code> - Description:    - What does your app do?   - Why should users try it?   - Any special requirements or notes?</p>"},{"location":"development/submit-app/#review-process","title":"Review Process","text":"<p>Our team will review your submission:</p>"},{"location":"development/submit-app/#1-code-review-1-3-days","title":"1. Code Review (1-3 days)","text":"<ul> <li>Repository structure</li> <li>Security issues</li> <li>No hardcoded secrets</li> <li>Valid app manifest</li> </ul>"},{"location":"development/submit-app/#2-testing-1-2-days","title":"2. Testing (1-2 days)","text":"<ul> <li>Deploy app on test environment</li> <li>Verify all features work</li> <li>Check resource requirements</li> <li>Test cleanup process</li> </ul>"},{"location":"development/submit-app/#3-documentation-review-1-day","title":"3. Documentation Review (1 day)","text":"<ul> <li>README clarity</li> <li>Setup instructions</li> <li>Prerequisites listed</li> <li>Troubleshooting info</li> </ul>"},{"location":"development/submit-app/#4-approval-or-feedback","title":"4. Approval or Feedback","text":"<ul> <li>If approved: Merged, <code>verified: true</code> set</li> <li>If changes needed: Comments on PR</li> </ul> <p>Total Timeline: ~5-7 days</p>"},{"location":"development/submit-app/#verification-criteria","title":"Verification Criteria","text":""},{"location":"development/submit-app/#must-have","title":"Must Have \u2705","text":"<ul> <li> Valid <code>tfgrid-compose.yaml</code></li> <li> Clear README with setup instructions</li> <li> Open source license (Apache 2.0 recommended)</li> <li> No hardcoded secrets or credentials</li> <li> Deploys successfully</li> <li> Cleans up properly with <code>tfgrid-compose down</code></li> <li> Works with current tfgrid-compose version</li> </ul>"},{"location":"development/submit-app/#should-have","title":"Should Have \ud83d\udccb","text":"<ul> <li> Comprehensive documentation</li> <li> Example configurations</li> <li> Troubleshooting guide</li> <li> Security best practices documented</li> <li> Resource requirements documented</li> <li> Regular maintenance commitment</li> </ul>"},{"location":"development/submit-app/#nice-to-have","title":"Nice to Have \ud83c\udf1f","text":"<ul> <li> Automated tests</li> <li> CI/CD pipeline</li> <li> Multiple pattern support</li> <li> Configuration examples</li> <li> Video tutorial or demo</li> </ul>"},{"location":"development/submit-app/#after-verification","title":"After Verification","text":"<p>Once approved:</p> <ol> <li>Merged to Registry: Your app appears in official registry</li> <li>Discoverable: Listed at registry.tfgrid.studio</li> <li>Verified Badge: Shows as verified</li> <li>CLI Integration: Available via <code>tfgrid-compose up your-app</code> (v0.10.0+)</li> <li>Responsibility: Maintain app, respond to issues, keep updated</li> </ol>"},{"location":"development/submit-app/#maintaining-your-app","title":"Maintaining Your App","text":""},{"location":"development/submit-app/#updates","title":"Updates","text":"<p>When you update your app: 1. Update version in <code>tfgrid-compose.yaml</code> 2. Create PR to update version in registry 3. Include changelog in PR description</p>"},{"location":"development/submit-app/#support","title":"Support","text":"<ul> <li>Respond to user issues in your repo</li> <li>Keep documentation updated</li> <li>Fix bugs promptly</li> <li>Announce breaking changes</li> </ul>"},{"location":"development/submit-app/#revocation","title":"Revocation","text":"<p>Verification may be revoked if: - App becomes unmaintained - Security vulnerabilities not fixed - Breaking changes without migration guide - Violates community guidelines</p>"},{"location":"development/submit-app/#app-development-guidelines","title":"App Development Guidelines","text":""},{"location":"development/submit-app/#security-best-practices","title":"Security Best Practices","text":"<ul> <li>\u2705 Never hardcode credentials</li> <li>\u2705 Use environment variables for secrets</li> <li>\u2705 Document security requirements</li> <li>\u2705 Keep dependencies updated</li> <li>\u2705 Follow principle of least privilege</li> </ul>"},{"location":"development/submit-app/#resource-requirements","title":"Resource Requirements","text":"<ul> <li>Document minimum and recommended resources</li> <li>Test with minimal resources</li> <li>Provide configuration for different sizes</li> <li>Note any resource-intensive operations</li> </ul>"},{"location":"development/submit-app/#documentation","title":"Documentation","text":"<p>Your README should include: - Overview: What does the app do? - Prerequisites: Requirements before deployment - Quick Start: Minimal steps to get running - Configuration: Available options - Usage: How to use the app - Troubleshooting: Common issues - License: Open source license</p>"},{"location":"development/submit-app/#patterns","title":"Patterns","text":"<p>Choose the appropriate pattern:</p> <p>single-vm: Single VM, private networking - Databases, internal APIs, development environments</p> <p>gateway: Multi-VM with public access and SSL - Web applications, SaaS products, e-commerce</p> <p>k3s: Kubernetes cluster - Microservices, cloud-native apps, enterprise scale</p>"},{"location":"development/submit-app/#examples","title":"Examples","text":"<p>See official apps for reference: - tfgrid-ai-agent - Single-VM pattern - tfgrid-gateway - Gateway pattern - tfgrid-k3s - K3s pattern</p>"},{"location":"development/submit-app/#get-help","title":"Get Help","text":"<ul> <li>Questions: Discussions</li> <li>Issues: Report problems</li> <li>Documentation: TFGrid Docs</li> </ul> <p>Thank you for contributing to the TFGrid ecosystem! \ud83c\udf89</p> <p>Ready to submit? Create your PR \u2192</p>"},{"location":"development/versioning-policy/","title":"Versioning Policy","text":"<p>Status: Active Adopted: October 14, 2025 Applies to: tfgrid-compose and all TFGrid Studio projects</p>"},{"location":"development/versioning-policy/#overview","title":"Overview","text":"<p>TFGrid Studio follows Semantic Versioning 2.0.0 for all projects. This document defines our versioning standards, release processes, and backward compatibility commitments.</p>"},{"location":"development/versioning-policy/#semantic-versioning-standard","title":"Semantic Versioning Standard","text":""},{"location":"development/versioning-policy/#format-majorminorpatch","title":"Format: MAJOR.MINOR.PATCH","text":"<p>Given a version number MAJOR.MINOR.PATCH (e.g., 1.2.3):</p>"},{"location":"development/versioning-policy/#major-version-x00","title":"MAJOR Version (X.0.0)","text":"<p>Increment when making incompatible API changes or breaking changes.</p> <p>Examples:</p> <ul> <li>Changing CLI command structure (e.g., <code>tfgrid-compose deploy</code> \u2192 <code>tfgrid-compose up</code>)</li> <li>Removing or renaming core features</li> <li>Changing pattern contract requirements</li> <li>Modifying state file format without migration</li> <li>Removing deprecated features</li> <li>Changing default behavior in non-backward-compatible ways</li> </ul> <p>User Impact: May require code/script changes, migration steps, or configuration updates.</p>"},{"location":"development/versioning-policy/#minor-version-xy0","title":"MINOR Version (x.Y.0)","text":"<p>Increment when adding new features in a backward-compatible manner.</p> <p>Examples:</p> <ul> <li>Adding new patterns (e.g., adding k3s pattern)</li> <li>Adding new CLI commands (e.g., <code>tfgrid-compose monitor</code>)</li> <li>Adding new configuration options</li> <li>Adding new networking modes</li> <li>Introducing new capabilities without breaking existing functionality</li> <li>Adding optional parameters to existing commands</li> </ul> <p>User Impact: No changes required; new features available opt-in.</p>"},{"location":"development/versioning-policy/#patch-version-xyz","title":"PATCH Version (x.y.Z)","text":"<p>Increment when making backward-compatible bug fixes.</p> <p>Examples:</p> <ul> <li>Fixing validation logic</li> <li>Correcting error messages</li> <li>Improving performance</li> <li>Documentation corrections</li> <li>Security patches (non-breaking)</li> <li>Dependency updates (non-breaking)</li> <li>Minor UI/UX improvements</li> </ul> <p>User Impact: Seamless upgrade; fixes only.</p>"},{"location":"development/versioning-policy/#version-0xy-pre-10-policy","title":"Version 0.x.y (Pre-1.0) Policy","text":""},{"location":"development/versioning-policy/#special-rules-for-pre-10-versions","title":"Special Rules for Pre-1.0 Versions","text":"<p>During the 0.x.y phase, the project is considered pre-release with more flexibility:</p> <ul> <li>0.y.0: May include breaking changes (similar to MAJOR in 1.x.y+)</li> <li>0.y.z: Bug fixes and minor features</li> <li>0.1.0: Initial development</li> <li>0.9.0: Release candidate, feature-complete, near 1.0</li> <li>1.0.0: First stable release, API locked</li> </ul>"},{"location":"development/versioning-policy/#current-status-tfgrid-compose","title":"Current Status (tfgrid-compose)","text":"<p>Version: 0.9.0 (October 2025)</p> <p>What this means:</p> <ul> <li>Core features are production-ready</li> <li>API is stable but may evolve based on feedback</li> <li>Breaking changes possible but minimized</li> <li>Path to 1.0.0 within 2-3 months</li> </ul>"},{"location":"development/versioning-policy/#release-process","title":"Release Process","text":""},{"location":"development/versioning-policy/#1-version-decision","title":"1. Version Decision","text":"<p>Before any release, determine version bump:</p> <pre><code># Current version: 0.9.0\n\n# Bug fix only \u2192 0.9.1\n# New backward-compatible feature \u2192 0.10.0\n# Breaking change (pre-1.0) \u2192 0.10.0 or 1.0.0\n# Breaking change (post-1.0) \u2192 2.0.0\n</code></pre>"},{"location":"development/versioning-policy/#2-update-version-references","title":"2. Update Version References","text":"<p>Files to update:</p> <ul> <li><code>cli/tfgrid-compose</code> (VERSION variable)</li> <li><code>Makefile</code> (help text)</li> <li><code>README.md</code> (version badge)</li> <li>Any other version references</li> </ul>"},{"location":"development/versioning-policy/#3-update-changelog","title":"3. Update Changelog","text":"<p>Format: Keep a <code>CHANGELOG.md</code> using Keep a Changelog format.</p> <pre><code># Changelog\n\n## [0.9.1] - 2025-10-15\n\n### Fixed\n- WireGuard connection timeout handling\n- State file permission issues\n\n### Changed\n- Improved error messages for missing prerequisites\n\n## [0.9.0] - 2025-10-14\n\n### Added\n- OpenTofu priority support\n- Multi-deployment management\n- Architecture documentation\n\n### Changed\n- Renamed from tfgrid-deployer to tfgrid-compose\n\n### Fixed\n- Version inconsistency across files\n</code></pre>"},{"location":"development/versioning-policy/#4-git-tagging","title":"4. Git Tagging","text":"<p>Tag format: <code>vMAJOR.MINOR.PATCH</code></p> <pre><code># Create annotated tag\ngit tag -a v0.9.1 -m \"Release v0.9.1: Bug fixes and improvements\"\n\n# Push tag to remote\ngit push origin v0.9.1\n</code></pre>"},{"location":"development/versioning-policy/#5-release-notes","title":"5. Release Notes","text":"<p>Create GitHub Release with:</p> <ul> <li>Version number</li> <li>Release date</li> <li>Changelog excerpt</li> <li>Installation instructions</li> <li>Breaking changes (if any)</li> <li>Migration guide (if needed)</li> </ul>"},{"location":"development/versioning-policy/#backward-compatibility","title":"Backward Compatibility","text":""},{"location":"development/versioning-policy/#commitment","title":"Commitment","text":"<p>Post-1.0.0:</p> <ul> <li>MAJOR version changes only for breaking changes</li> <li>Deprecation warnings before removal</li> <li>Migration guides for breaking changes</li> <li>Support for N-1 version during transition</li> </ul> <p>Pre-1.0.0 (0.x.y):</p> <ul> <li>Best effort to maintain compatibility</li> <li>Breaking changes documented in changelog</li> <li>Migration notes provided when needed</li> </ul>"},{"location":"development/versioning-policy/#deprecation-policy","title":"Deprecation Policy","text":"<p>Post-1.0.0:</p> <ol> <li>Announce: Mark feature as deprecated with warning</li> <li>Grace Period: Minimum 1 MINOR version (e.g., 1.2.0 \u2192 1.3.0)</li> <li>Remove: In next MAJOR version (e.g., 2.0.0)</li> </ol> <p>Example: <pre><code># Version 1.2.0\ntfgrid-compose old-command\n# Warning: 'old-command' is deprecated, use 'new-command' instead\n# Will be removed in v2.0.0\n\n# Version 1.3.0\n# Still works, still warns\n\n# Version 2.0.0\n# 'old-command' removed\n</code></pre></p>"},{"location":"development/versioning-policy/#breaking-changes","title":"Breaking Changes","text":""},{"location":"development/versioning-policy/#definition","title":"Definition","text":"<p>A breaking change is any modification that: - Requires users to modify existing scripts/code - Changes default behavior in incompatible ways - Removes or renames commands/features - Changes output formats (CLI, logs, state files) - Changes configuration schema</p>"},{"location":"development/versioning-policy/#communication","title":"Communication","text":"<p>When introducing breaking changes:</p> <ol> <li>Document in CHANGELOG under \"BREAKING CHANGES\" section</li> <li>Provide migration guide</li> <li>Announce in release notes prominently</li> <li>Support with automated migration tools when possible</li> </ol> <p>Example Breaking Change Documentation: <pre><code>## [2.0.0] - 2026-01-15\n\n### BREAKING CHANGES\n\n- **CLI Command Structure**: Renamed `deploy` to `up` and `destroy` to `down`\n  - Migration: Replace `tfgrid-compose deploy` with `tfgrid-compose up`\n  - Migration: Replace `tfgrid-compose destroy` with `tfgrid-compose down`\n\n- **State Directory**: Changed from `.tfgrid-deployer` to `.tfgrid-compose`\n  - Migration: Run `tfgrid-compose migrate-state` to automatically upgrade\n</code></pre></p>"},{"location":"development/versioning-policy/#version-progression-path","title":"Version Progression Path","text":""},{"location":"development/versioning-policy/#tfgrid-compose-roadmap","title":"tfgrid-compose Roadmap","text":"<pre><code>v0.9.0  \u2190 Current (Oct 2025)\n  \u2193     Core features complete, production-ready\n  \u2193\nv0.9.1  \u2190 Bug fixes, OpenTofu refinements\n  \u2193\nv0.9.2  \u2190 Minor improvements\n  \u2193\nv0.10.0 \u2190 Multi-deployment, monitoring features\n  \u2193\nv0.11.0 \u2190 CI/CD, complete documentation, shell completion\n  \u2193\nv0.12.0 \u2190 Testing suite, community feedback incorporated\n  \u2193\nv1.0.0  \u2190 Official Stable Release (Q1 2026)\n  \u2193     API locked, backward compatibility guaranteed\n  \u2193\nv1.1.0  \u2190 Pattern registry, community patterns\n  \u2193\nv1.2.0  \u2190 Plugin system\n  \u2193\nv2.0.0  \u2190 Major architectural changes (if needed)\n</code></pre>"},{"location":"development/versioning-policy/#path-to-100","title":"Path to 1.0.0","text":"<p>Requirements for 1.0.0 release: - \u2705 All core patterns production-ready - \u2705 Comprehensive documentation - \u2705 Test coverage &gt;80% - \u2705 CI/CD pipeline operational - \u2705 No known critical bugs - \u2705 Community feedback incorporated - \u2705 Migration guides prepared - \u2705 Performance benchmarks met - \u2705 Security review completed - \u2705 API/CLI stable and finalized</p> <p>Estimated Timeline: Q1 2026 (2-3 months from v0.9.0)</p>"},{"location":"development/versioning-policy/#release-cadence","title":"Release Cadence","text":""},{"location":"development/versioning-policy/#post-100-release-schedule","title":"Post-1.0.0 Release Schedule","text":"<ul> <li>PATCH releases: As needed (bug fixes, security)</li> <li>MINOR releases: Monthly or bi-monthly (features)</li> <li>MAJOR releases: Annually or as needed (breaking changes)</li> </ul>"},{"location":"development/versioning-policy/#pre-100-release-schedule","title":"Pre-1.0.0 Release Schedule","text":"<ul> <li>More frequent releases during active development</li> <li>Focus on feedback and iteration</li> <li>Version bumps based on feature completion</li> </ul>"},{"location":"development/versioning-policy/#version-checking","title":"Version Checking","text":""},{"location":"development/versioning-policy/#in-scripts","title":"In Scripts","text":"<p>Users can check version programmatically:</p> <pre><code># Get version\ntfgrid-compose --version\n# Output: TFGrid Compose v0.9.0\n\n# Check minimum version in scripts\nREQUIRED_VERSION=\"0.9.0\"\nCURRENT_VERSION=$(tfgrid-compose --version | grep -oP '\\d+\\.\\d+\\.\\d+')\n\nif [[ \"$(printf '%s\\n' \"$REQUIRED_VERSION\" \"$CURRENT_VERSION\" | sort -V | head -n1)\" != \"$REQUIRED_VERSION\" ]]; then\n    echo \"Error: tfgrid-compose $REQUIRED_VERSION or higher required\"\n    exit 1\nfi\n</code></pre>"},{"location":"development/versioning-policy/#version-api","title":"Version API","text":"<p>Future enhancement:</p> <pre><code># Check for updates\ntfgrid-compose update check\n\n# Auto-update\ntfgrid-compose update install\n</code></pre>"},{"location":"development/versioning-policy/#multi-project-coordination","title":"Multi-Project Coordination","text":""},{"location":"development/versioning-policy/#tfgrid-studio-version-alignment","title":"TFGrid Studio Version Alignment","text":"<p>Projects: - <code>tfgrid-compose</code>: Orchestration platform - <code>tfgrid-ai-agent</code>: AI agent application - <code>tfgrid-docs</code>: Documentation site - <code>tfgrid-web</code>: Web interface</p> <p>Version Independence: - Each project has its own version - No requirement for version alignment - Compatibility documented in release notes</p> <p>Example: <pre><code>tfgrid-compose v0.9.0\n  Compatible with: tfgrid-ai-agent v0.3.0+\n\ntfgrid-ai-agent v0.3.2\n  Requires: tfgrid-compose v0.8.0+\n</code></pre></p>"},{"location":"development/versioning-policy/#examples","title":"Examples","text":""},{"location":"development/versioning-policy/#example-1-bug-fix-release","title":"Example 1: Bug Fix Release","text":"<pre><code>Current: v0.9.0\nChange: Fixed WireGuard timeout issue\nNext: v0.9.1 (PATCH bump)\n</code></pre>"},{"location":"development/versioning-policy/#example-2-new-feature","title":"Example 2: New Feature","text":"<pre><code>Current: v0.9.1\nChange: Added multi-deployment management\nNext: v0.10.0 (MINOR bump)\n</code></pre>"},{"location":"development/versioning-policy/#example-3-breaking-change-pre-10","title":"Example 3: Breaking Change (Pre-1.0)","text":"<pre><code>Current: v0.10.5\nChange: Changed state directory structure\nNext: v0.11.0 (MINOR bump in 0.x, includes breaking change)\nNote: Provide migration tool\n</code></pre>"},{"location":"development/versioning-policy/#example-4-breaking-change-post-10","title":"Example 4: Breaking Change (Post-1.0)","text":"<pre><code>Current: v1.5.3\nChange: Removed deprecated 'deploy' command\nNext: v2.0.0 (MAJOR bump)\nNote: Announced in v1.2.0, removed in v2.0.0\n</code></pre>"},{"location":"development/versioning-policy/#frequently-asked-questions","title":"Frequently Asked Questions","text":""},{"location":"development/versioning-policy/#why-start-at-090-instead-of-010-or-100","title":"Why start at 0.9.0 instead of 0.1.0 or 1.0.0?","text":"<p>Answer: v0.9.0 signals: - Core features are complete and production-ready - API is stable but may evolve slightly based on feedback - Close to 1.0.0 but not locked in yet - Allows flexibility while showing maturity</p>"},{"location":"development/versioning-policy/#when-will-we-reach-100","title":"When will we reach 1.0.0?","text":"<p>Answer: When we meet the 1.0.0 requirements checklist (see above). Estimated Q1 2026, approximately 2-3 months after comprehensive testing and community feedback.</p>"},{"location":"development/versioning-policy/#can-i-use-0x-versions-in-production","title":"Can I use 0.x versions in production?","text":"<p>Answer: Yes! Version 0.9.0+ is production-ready. The 0.x designation means the API may evolve, not that it's unstable.</p>"},{"location":"development/versioning-policy/#what-if-i-find-a-critical-bug","title":"What if I find a critical bug?","text":"<p>Answer: We'll release a PATCH version (e.g., 0.9.0 \u2192 0.9.1) immediately. Security issues take highest priority.</p>"},{"location":"development/versioning-policy/#how-do-i-stay-updated","title":"How do I stay updated?","text":"<p>Answer: - Watch the GitHub repository - Subscribe to release notifications - Check changelog regularly - Use <code>tfgrid-compose update check</code> (future)</p>"},{"location":"development/versioning-policy/#references","title":"References","text":"<ul> <li>Semantic Versioning 2.0.0</li> <li>Keep a Changelog</li> <li>GitHub Release Best Practices</li> </ul>"},{"location":"development/versioning-policy/#document-updates","title":"Document Updates","text":"Date Version Changes 2025-10-14 1.0 Initial versioning policy created <p>Status: Active Next Review: After v1.0.0 release Maintained by: TFGrid Studio Team</p>"},{"location":"getting-started/concepts/","title":"Core Concepts","text":"<p>Coming Soon</p> <p>This page will cover: - Apps and manifests - Deployment patterns - State management - Hook system</p> <p>Back to Getting Started</p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>Complete setup guide for TFGrid Compose.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":""},{"location":"getting-started/installation/#required-software","title":"Required Software","text":"Tool Purpose Installation Terraform or OpenTofu Infrastructure provisioning Install Ansible Platform configuration Install WireGuard Secure networking Install Git Version control Usually pre-installed"},{"location":"getting-started/installation/#threefold-account","title":"ThreeFold Account","text":"<ol> <li>Create Account: ThreeFold Connect</li> <li>Get TFT Tokens: Purchase or earn TFT</li> <li>Save Mnemonic: 12-word recovery phrase</li> </ol>"},{"location":"getting-started/installation/#install-prerequisites","title":"Install Prerequisites","text":""},{"location":"getting-started/installation/#ubuntudebian","title":"Ubuntu/Debian","text":"<pre><code># OpenTofu\ncurl --proto '=https' --tlsv1.2 -fsSL https://get.opentofu.org/install-opentofu.sh | bash\n\n# Ansible\nsudo apt update\nsudo apt install ansible\n\n# WireGuard\nsudo apt install wireguard\n\n# Optional tools\nsudo apt install jq curl wget git\n</code></pre>"},{"location":"getting-started/installation/#macos","title":"macOS","text":"<pre><code># Using Homebrew\nbrew install opentofu ansible wireguard-tools jq\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<pre><code># Check versions\ntofu version         # or: terraform version\nansible --version\nwg --version\ngit --version\n</code></pre>"},{"location":"getting-started/installation/#install-tfgrid-compose","title":"Install TFGrid Compose","text":""},{"location":"getting-started/installation/#method-1-one-line-installer-recommended","title":"Method 1: One-Line Installer (Recommended)","text":"<pre><code>curl -sSL install.tfgrid.studio/install.sh | sh\n</code></pre> <p>The installer automatically:</p> <ul> <li>\u2705 Checks prerequisites (git, make)</li> <li>\u2705 Clones tfgrid-compose repository to <code>~/.tfgrid/</code></li> <li>\u2705 Installs CLI to <code>~/.local/bin/</code></li> <li>\u2705 Adds to PATH in your shell config</li> <li>\u2705 Works with bash, zsh, fish</li> </ul> <p>After installation: <pre><code># Reload your shell\nsource ~/.bashrc  # or ~/.zshrc or ~/.config/fish/config.fish\n\n# Verify installation\ntfgrid-compose --version\n</code></pre></p>"},{"location":"getting-started/installation/#method-2-manual-clone-and-install","title":"Method 2: Manual Clone and Install","text":"<pre><code># Clone repository\ngit clone https://github.com/tfgrid-studio/tfgrid-compose\ncd tfgrid-compose\n\n# Run install script (automatically sets up PATH)\nmake install\n\n# Verify installation\ntfgrid-compose --version\n</code></pre>"},{"location":"getting-started/installation/#method-3-manual-installation","title":"Method 3: Manual Installation","text":"<pre><code># Clone repository\ngit clone https://github.com/tfgrid-studio/tfgrid-compose\ncd tfgrid-compose\n\n# Make CLI executable\nchmod +x cli/tfgrid-compose\n\n# Add to PATH (choose your shell)\n# Bash/Zsh:\necho 'export PATH=\"$PATH:'$(pwd)'/cli\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Fish:\necho 'set -gx PATH $PATH '(pwd)'/cli' &gt;&gt; ~/.config/fish/config.fish\nsource ~/.config/fish/config.fish\n\n# Verify\ntfgrid-compose --version\n</code></pre>"},{"location":"getting-started/installation/#configure-threefold","title":"Configure ThreeFold","text":""},{"location":"getting-started/installation/#1-store-mnemonic-securely","title":"1. Store Mnemonic Securely","text":"<pre><code># Create config directory\nmkdir -p ~/.config/threefold\n\n# Save mnemonic (replace with your actual mnemonic)\necho \"your twelve word mnemonic phrase here\" &gt; ~/.config/threefold/mnemonic\n\n# Set secure permissions (owner-only read/write)\nchmod 600 ~/.config/threefold/mnemonic\n\n# Verify\ncat ~/.config/threefold/mnemonic\n</code></pre> <p>Security Note: The mnemonic file should have <code>600</code> permissions (owner-only access).</p>"},{"location":"getting-started/installation/#2-set-environment-variable","title":"2. Set Environment Variable","text":"<p>The mnemonic needs to be set as an environment variable for Terraform:</p>"},{"location":"getting-started/installation/#bashzsh","title":"Bash/Zsh","text":"<pre><code># Set for current session\nexport TF_VAR_mnemonic=$(cat ~/.config/threefold/mnemonic)\n\n# Or add to shell config for persistence\necho 'export TF_VAR_mnemonic=$(cat ~/.config/threefold/mnemonic)' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre>"},{"location":"getting-started/installation/#fish","title":"Fish","text":"<pre><code># Set for current session\nset -x TF_VAR_mnemonic (cat ~/.config/threefold/mnemonic)\n\n# Or add to fish config for persistence\necho 'set -x TF_VAR_mnemonic (cat ~/.config/threefold/mnemonic)' &gt;&gt; ~/.config/fish/config.fish\nsource ~/.config/fish/config.fish\n</code></pre>"},{"location":"getting-started/installation/#3-verify-configuration","title":"3. Verify Configuration","text":"<pre><code># Check mnemonic is set\necho $TF_VAR_mnemonic\n\n# Should output your 12-word mnemonic\n</code></pre>"},{"location":"getting-started/installation/#setup-workspace-optional-but-recommended","title":"Setup Workspace (Optional but Recommended)","text":"<p>TFGrid Compose works best with an organized workspace structure:</p> <pre><code># Create standard workspace\nmkdir -p ~/code/github.com/tfgrid-studio\ncd ~/code/github.com/tfgrid-studio\n\n# Clone deployer\ngit clone https://github.com/tfgrid-studio/tfgrid-compose\n\n# Clone apps you want to deploy\ngit clone https://github.com/tfgrid-studio/tfgrid-ai-agent\n\n# Your workspace should look like:\n# ~/code/github.com/tfgrid-studio/\n# \u251c\u2500\u2500 tfgrid-compose/\n# \u2514\u2500\u2500 tfgrid-ai-agent/\n</code></pre> <p>This structure: - \u2705 Keeps everything organized - \u2705 Makes relative paths consistent - \u2705 Follows standard conventions - \u2705 Easy to manage multiple apps</p>"},{"location":"getting-started/installation/#verify-installation_1","title":"Verify Installation","text":""},{"location":"getting-started/installation/#1-check-cli","title":"1. Check CLI","text":"<pre><code># Show help\ntfgrid-compose --help\n\n# Should display:\n# TFGrid Compose - Universal deployment orchestrator\n# \n# Commands:\n#   up [app]       - Deploy application\n#   down [app]     - Destroy deployment\n#   status [app]   - Show deployment status\n#   ...\n</code></pre>"},{"location":"getting-started/installation/#2-check-prerequisites","title":"2. Check Prerequisites","text":"<pre><code># Run built-in validation\ncd tfgrid-compose\nmake check-prereqs\n\n# Should verify:\n# \u2705 Terraform/OpenTofu installed\n# \u2705 Ansible installed\n# \u2705 WireGuard installed\n# \u2705 Mnemonic configured\n</code></pre>"},{"location":"getting-started/installation/#3-test-deployment-optional","title":"3. Test Deployment (Optional)","text":"<pre><code># Deploy the AI agent to verify everything works\ncd ~/code/github.com/tfgrid-studio/tfgrid-compose\ntfgrid-compose up ../tfgrid-ai-agent\n\n# If successful, you'll see:\n# \u2705 Infrastructure deployed\n# \u2705 WireGuard configured\n# \u2705 Platform configured\n# \u2705 Application deployed\n# \u2705 Deployment complete!\n\n# Clean up test deployment\ntfgrid-compose down ../tfgrid-ai-agent\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#command-not-found","title":"Command Not Found","text":"<pre><code># Check if tfgrid-compose is in PATH\nwhich tfgrid-compose\n\n# If not found, add manually:\nexport PATH=\"$PATH:$HOME/code/github.com/tfgrid-studio/tfgrid-compose/cli\"\n</code></pre>"},{"location":"getting-started/installation/#mnemonic-not-set","title":"Mnemonic Not Set","text":"<pre><code># Check if mnemonic is configured\necho $TF_VAR_mnemonic\n\n# If empty, set it:\nexport TF_VAR_mnemonic=$(cat ~/.config/threefold/mnemonic)\n</code></pre>"},{"location":"getting-started/installation/#permission-denied","title":"Permission Denied","text":"<pre><code># Make CLI executable\nchmod +x ~/code/github.com/tfgrid-studio/tfgrid-compose/cli/tfgrid-compose\n\n# Fix mnemonic permissions\nchmod 600 ~/.config/threefold/mnemonic\n</code></pre>"},{"location":"getting-started/installation/#terraformopentofu-not-found","title":"Terraform/OpenTofu Not Found","text":"<pre><code># Install OpenTofu (recommended)\ncurl --proto '=https' --tlsv1.2 -fsSL https://get.opentofu.org/install-opentofu.sh | bash\n\n# Or install Terraform\n# See: https://www.terraform.io/downloads\n</code></pre>"},{"location":"getting-started/installation/#ansible-not-found","title":"Ansible Not Found","text":"<pre><code># Ubuntu/Debian\nsudo apt install ansible\n\n# macOS\nbrew install ansible\n\n# Verify\nansible --version\n</code></pre>"},{"location":"getting-started/installation/#wireguard-not-found","title":"WireGuard Not Found","text":"<pre><code># Ubuntu/Debian\nsudo apt install wireguard\n\n# macOS\nbrew install wireguard-tools\n\n# Verify\nwg --version\n</code></pre>"},{"location":"getting-started/installation/#optional-configuration","title":"Optional Configuration","text":""},{"location":"getting-started/installation/#context-file","title":"Context File","text":"<p>Create a context file to avoid specifying app paths:</p> <pre><code># In your deployer directory\ncd ~/code/github.com/tfgrid-studio/tfgrid-compose\necho \"app: ../tfgrid-ai-agent\" &gt; .tfgrid-compose.yaml\n\n# Now you can run commands without app path:\ntfgrid-compose up        # instead of: tfgrid-compose up ../tfgrid-ai-agent\ntfgrid-compose status    # instead of: tfgrid-compose status ../tfgrid-ai-agent\n</code></pre>"},{"location":"getting-started/installation/#shell-aliases","title":"Shell Aliases","text":"<p>Add convenient aliases to your shell config:</p> <pre><code># Bash/Zsh (~/.bashrc or ~/.zshrc)\nalias tfc='tfgrid-compose'\nalias tfc-up='tfgrid-compose up'\nalias tfc-down='tfgrid-compose down'\nalias tfc-status='tfgrid-compose status'\n\n# Fish (~/.config/fish/config.fish)\nalias tfc='tfgrid-compose'\nalias tfc-up='tfgrid-compose up'\nalias tfc-down='tfgrid-compose down'\nalias tfc-status='tfgrid-compose status'\n</code></pre>"},{"location":"getting-started/installation/#ssh-key-setup","title":"SSH Key Setup","text":"<p>If you don't have SSH keys:</p> <pre><code># Generate ed25519 key (recommended)\nssh-keygen -t ed25519 -C \"your_email@example.com\"\n\n# Or RSA key\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n\n# Accept default location (~/.ssh/id_ed25519 or ~/.ssh/id_rsa)\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Installation complete! \ud83c\udf89</p>"},{"location":"getting-started/installation/#whats-next","title":"What's Next?","text":"<ol> <li>Quick Start Guide - Deploy your first application</li> <li>Core Concepts - Understand how TFGrid Compose works</li> <li>Pattern Documentation - Learn about deployment patterns</li> </ol>"},{"location":"getting-started/installation/#upgrade","title":"Upgrade","text":"<p>To upgrade to the latest version:</p> <pre><code>cd ~/code/github.com/tfgrid-studio/tfgrid-compose\ngit pull origin main\n\n# Re-install if needed\nmake install\n</code></pre>"},{"location":"getting-started/installation/#uninstall","title":"Uninstall","text":"<p>To completely remove TFGrid Compose:</p> <pre><code># Remove symlink\nrm ~/.local/bin/tfgrid-compose\n\n# Remove from PATH (edit your shell config and remove the export line)\n# Bash: nano ~/.bashrc\n# Fish: nano ~/.config/fish/config.fish\n\n# Remove workspace (optional)\nrm -rf ~/code/github.com/tfgrid-studio\n</code></pre> <p>Ready to deploy? \u2192 Quick Start Guide</p>"},{"location":"getting-started/introduction/","title":"Introduction to TFGrid Compose","text":"<p>Universal deployment orchestrator for ThreeFold Grid applications</p>"},{"location":"getting-started/introduction/#what-is-tfgrid-compose","title":"What is TFGrid Compose?","text":"<p>TFGrid Compose is a production-ready deployment platform that makes deploying applications on ThreeFold Grid as simple as deploying with docker-compose.</p> <pre><code># One command to deploy any application\ntfgrid-compose up my-app\n</code></pre> <p>Instead of managing Terraform configurations, Ansible playbooks, and WireGuard networks separately, TFGrid Compose unifies everything into a single, intuitive CLI tool.</p>"},{"location":"getting-started/introduction/#the-problem-we-solve","title":"The Problem We Solve","text":""},{"location":"getting-started/introduction/#before-tfgrid-compose","title":"Before TFGrid Compose","text":"<p>Deploying applications on ThreeFold Grid required:</p> <ol> <li>Manual Infrastructure Setup - Writing Terraform/OpenTofu configurations</li> <li>Network Configuration - Setting up WireGuard or Mycelium manually</li> <li>Platform Configuration - Writing Ansible playbooks</li> <li>Application Deployment - Custom scripts for each app</li> <li>State Management - Tracking deployments manually</li> </ol> <p>Result: Hours of work, multiple repos, complex workflows.</p>"},{"location":"getting-started/introduction/#with-tfgrid-compose","title":"With TFGrid Compose","text":"<pre><code># Configure once\necho \"app: ../my-app\" &gt; .tfgrid-compose.yaml\n\n# Deploy anywhere\ntfgrid-compose up\n</code></pre> <p>Result: Minutes to deploy, one command, consistent workflow.</p>"},{"location":"getting-started/introduction/#core-architecture","title":"Core Architecture","text":"<p>TFGrid Compose separates concerns into three layers:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Applications (Standalone, Portable)                \u2502\n\u2502  tfgrid-ai-agent, your-app, any-app                 \u2502\n\u2502  \u2022 Pattern-agnostic                                 \u2502\n\u2502  \u2022 Manifest-driven (tfgrid-compose.yaml)            \u2502\n\u2502  \u2022 Works on any infrastructure                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                        \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Deployer (Universal Orchestrator)                  \u2502\n\u2502  tfgrid-compose                                     \u2502\n\u2502  \u2022 Pattern system (single-vm, gateway, k3s)         \u2502\n\u2502  \u2022 Terraform + Ansible automation                   \u2502\n\u2502  \u2022 State management                                 \u2502\n\u2502  \u2022 CLI tool (tfgrid-compose)                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                        \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Infrastructure (ThreeFold Grid)                    \u2502\n\u2502  Decentralized compute, storage, networking         \u2502\n\u2502  \u2022 VMs, Kubernetes, networking                      \u2502\n\u2502  \u2022 WireGuard, Mycelium                              \u2502\n\u2502  \u2022 Cost-effective, distributed                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"getting-started/introduction/#key-concepts","title":"Key Concepts","text":""},{"location":"getting-started/introduction/#1-applications","title":"1. Applications","text":"<p>Standalone, portable codebases that can be deployed anywhere.</p> <ul> <li>Contain app source code (<code>src/</code>, <code>app/</code>, etc.)</li> <li>Include deployment manifest (<code>tfgrid-compose.yaml</code>)</li> <li>Define deployment hooks (<code>deployment/setup.sh</code>, etc.)</li> <li>Pattern-agnostic - work with any deployment pattern</li> </ul> <p>Example: <code>tfgrid-ai-agent</code> is a complete application</p>"},{"location":"getting-started/introduction/#2-patterns","title":"2. Patterns","text":"<p>Reusable deployment strategies for different infrastructure needs.</p> Pattern Description Status single-vm Single VM with private networking \u2705 Production gateway Gateway VM + backend VMs with public IPv4 \ud83d\udea7 Q4 2025 k3s Kubernetes cluster with auto-scaling \ud83d\udea7 Q1 2026"},{"location":"getting-started/introduction/#3-deployer","title":"3. Deployer","text":"<p>Universal orchestrator that: - Reads app manifests - Selects deployment pattern - Provisions infrastructure (Terraform) - Configures platform (Ansible) - Deploys application - Manages state</p>"},{"location":"getting-started/introduction/#4-manifest","title":"4. Manifest","text":"<p>Simple YAML file (<code>tfgrid-compose.yaml</code>) that describes your app:</p> <pre><code>name: my-app\nversion: 1.0.0\n\npatterns:\n  recommended: single-vm\n\nresources:\n  cpu: {recommended: 4}\n  memory: {recommended: 8192}\n  disk: {recommended: 100}\n\nhooks:\n  setup: deployment/setup.sh\n  configure: deployment/configure.sh\n  healthcheck: deployment/healthcheck.sh\n</code></pre>"},{"location":"getting-started/introduction/#workflow-example","title":"Workflow Example","text":""},{"location":"getting-started/introduction/#traditional-deployment-without-tfgrid-compose","title":"Traditional Deployment (Without TFGrid Compose)","text":"<pre><code># 1. Navigate to project\ncd my-tfgrid-project\n\n# 2. Configure Terraform\ncd infrastructure\ncp terraform.tfvars.example terraform.tfvars\nnano terraform.tfvars\nexport TF_VAR_mnemonic=\"...\"\n\n# 3. Deploy infrastructure\nterraform init\nterraform apply\n\n# 4. Setup WireGuard\ncd ../scripts\n./setup-wireguard.sh\n\n# 5. Generate Ansible inventory\n./generate-inventory.sh\n\n# 6. Run Ansible\ncd ../platform\nansible-playbook site.yml\n\n# 7. Deploy application\ncd ../\n./deploy-app.sh\n</code></pre> <p>Time: 30-60 minutes Complexity: High Error-prone: Yes</p>"},{"location":"getting-started/introduction/#with-tfgrid-compose_1","title":"With TFGrid Compose","text":"<pre><code># 1. One-time setup\necho \"app: ../my-app\" &gt; .tfgrid-compose.yaml\n\n# 2. Deploy\ntfgrid-compose up\n</code></pre> <p>Time: 2-3 minutes Complexity: Low Error-prone: No</p>"},{"location":"getting-started/introduction/#benefits","title":"Benefits","text":""},{"location":"getting-started/introduction/#speed","title":"\ud83d\ude80 Speed","text":"<p>Deploy in 2-3 minutes instead of 30-60 minutes.</p>"},{"location":"getting-started/introduction/#simplicity","title":"\ud83c\udfaf Simplicity","text":"<p>One command instead of multiple manual steps.</p>"},{"location":"getting-started/introduction/#consistency","title":"\ud83d\udd04 Consistency","text":"<p>Same workflow for all applications, all patterns.</p>"},{"location":"getting-started/introduction/#portability","title":"\ud83d\udce6 Portability","text":"<p>Apps are pattern-agnostic - deploy on single-vm, gateway, or k3s without changes.</p>"},{"location":"getting-started/introduction/#no-lock-in","title":"\ud83d\udd13 No Lock-in","text":"<p>Uses industry standards (Terraform, Ansible, Kubernetes). Easy to migrate away.</p>"},{"location":"getting-started/introduction/#safety","title":"\ud83d\udd12 Safety","text":"<p>Idempotent operations, state tracking, validation before deployment.</p>"},{"location":"getting-started/introduction/#use-cases","title":"Use Cases","text":""},{"location":"getting-started/introduction/#1-aiml-development","title":"1. AI/ML Development","text":"<p>Deploy isolated coding environments for AI agents. <pre><code>tfgrid-compose up tfgrid-ai-agent\n</code></pre></p>"},{"location":"getting-started/introduction/#2-web-applications","title":"2. Web Applications","text":"<p>Deploy traditional web apps with public access. <pre><code>tfgrid-compose up my-webapp --pattern=gateway\n</code></pre></p>"},{"location":"getting-started/introduction/#3-microservices","title":"3. Microservices","text":"<p>Deploy cloud-native apps on Kubernetes. <pre><code>tfgrid-compose up my-saas --pattern=k3s\n</code></pre></p>"},{"location":"getting-started/introduction/#4-databases","title":"4. Databases","text":"<p>Deploy databases with persistent storage. <pre><code>tfgrid-compose up my-postgres --pattern=single-vm\n</code></pre></p>"},{"location":"getting-started/introduction/#how-it-works","title":"How It Works","text":""},{"location":"getting-started/introduction/#deployment-flow","title":"Deployment Flow","text":"<pre><code>1. Read app manifest (tfgrid-compose.yaml)\n        \u2193\n2. Select pattern (single-vm, gateway, k3s)\n        \u2193\n3. Validate configuration\n        \u2193\n4. Generate Terraform config\n        \u2193\n5. Provision infrastructure (VM, networking)\n        \u2193\n6. Setup WireGuard/Mycelium\n        \u2193\n7. Generate Ansible inventory\n        \u2193\n8. Configure platform (Ansible)\n        \u2193\n9. Deploy application source\n        \u2193\n10. Run deployment hooks (setup \u2192 configure \u2192 healthcheck)\n        \u2193\n11. Verify deployment\n        \u2193\n12. Save state\n        \u2193\n13. \u2705 Done! (2-3 minutes total)\n</code></pre>"},{"location":"getting-started/introduction/#state-management","title":"State Management","text":"<p>TFGrid Compose automatically tracks: - Deployed infrastructure - Network configurations - Application state - Pattern used - Timestamps</p> <p>Stored in: <code>.tfgrid-compose/state.yaml</code></p>"},{"location":"getting-started/introduction/#comparison","title":"Comparison","text":""},{"location":"getting-started/introduction/#vs-docker-compose","title":"vs Docker Compose","text":"Feature TFGrid Compose Docker Compose Deployment Target Cloud VMs Local containers Infrastructure Automated (Terraform) None Networking WireGuard/Mycelium Docker networks Use Case Production deployment Development Complexity Simple (one command) Simple"},{"location":"getting-started/introduction/#vs-kubernetes","title":"vs Kubernetes","text":"Feature TFGrid Compose Kubernetes Learning Curve Low High Setup Time 2-3 minutes Hours/Days Patterns Multiple (VM, K8s, etc.) K8s only Simplicity High Low Power Medium-High High"},{"location":"getting-started/introduction/#vs-herokuvercel","title":"vs Heroku/Vercel","text":"Feature TFGrid Compose Heroku/Vercel Vendor Lock-in \u274c No \u2705 Yes Cost Low Medium-High Control Full Limited Infrastructure Decentralized Centralized Patterns Multiple Single"},{"location":"getting-started/introduction/#source-credits","title":"Source &amp; Credits","text":"<p>TFGrid Compose was built by extracting and unifying proven, production-ready implementations:</p> <ul> <li>Gateway Pattern: Inspired by mik-tf/tfgrid-gateway</li> <li>K3s Pattern: Inspired by ucli-tools/tfgrid-k3s</li> <li>AI Agent App: Based on mik-tf/tfgrid-ai-agent</li> </ul> <p>These repositories contain complete, working code that has been validated in real deployments.</p> <p>Learn more about source repositories \u2192</p>"},{"location":"getting-started/introduction/#next-steps","title":"Next Steps","text":"<ul> <li>Installation - Install tfgrid-compose and prerequisites</li> <li>Quick Start - Deploy your first application in 5 minutes</li> <li>Core Concepts - Deep dive into patterns and manifests</li> </ul> <p>Ready to get started? \u2192 Install TFGrid Compose</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>Deploy your first application on ThreeFold Grid in 5 minutes.</p> <p>:::tip New in v0.13.4 Complete workflow from installation to deployment with registry integration! :::</p>"},{"location":"getting-started/quickstart/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have: - \u2705 Basic command line knowledge - \u2705 Internet connection - \u2705 ThreeFold Grid account (get one at threefold.io)</p>"},{"location":"getting-started/quickstart/#complete-quick-start","title":"\ud83d\ude80 Complete Quick Start","text":"<p>Deploy an AI coding assistant in 5 minutes:</p>"},{"location":"getting-started/quickstart/#step-1-install-tfgrid-compose-30-seconds","title":"Step 1: Install TFGrid Compose (30 seconds)","text":"<pre><code># One-command installation\ncurl -sSL install.tfgrid.studio/install.sh | sh\n</code></pre> <p>This installs <code>tfgrid-compose</code> and creates a default <code>tfgrid</code> shortcut.</p>"},{"location":"getting-started/quickstart/#step-2-login-configure-1-minute","title":"Step 2: Login &amp; Configure (1 minute)","text":"<pre><code># Interactive setup (configures mnemonic, git, optional tokens)\ntfgrid-compose login\n</code></pre> <p>What it configures: - ThreeFold mnemonic (for deployments) - Git identity (for AI-generated commits) - Optional: GitHub/Gitea tokens</p>"},{"location":"getting-started/quickstart/#step-3-set-up-shortcuts-30-seconds","title":"Step 3: Set Up Shortcuts (30 seconds)","text":"<pre><code># Create convenient shortcuts\ntfgrid-compose shortcut tfc  # Creates 'tfc' command\n</code></pre>"},{"location":"getting-started/quickstart/#step-4-explore-deploy-2-minutes","title":"Step 4: Explore &amp; Deploy (2 minutes)","text":"<pre><code># Browse available apps\ntfc search\n\n# Deploy AI agent by name\ntfc up tfgrid-ai-agent\n\n# Watch deployment:\n# \u2705 Validating prerequisites...\n# \u2705 Downloading from registry...\n# \u2705 Provisioning ThreeFold Grid VM...\n# \u2705 Configuring networking...\n# \u2705 Installing AI agent...\n# \u2705 Deployment complete!\n</code></pre>"},{"location":"getting-started/quickstart/#step-5-use-your-ai-agent-1-minute","title":"Step 5: Use Your AI Agent (1 minute)","text":"<pre><code># Create your first AI project\ntfc create my-website\n\n# Monitor AI coding in real-time\ntfc monitor my-website\n\n# Check all projects\ntfc projects\n\n# SSH to see generated code\ntfc ssh\ncd /home/developer/code/my-website\nls -la\n</code></pre> <p>That's it! \ud83c\udf89 Your AI agent is now autonomously coding on ThreeFold Grid.</p>"},{"location":"getting-started/quickstart/#alternative-manual-setup","title":"\ud83d\udce6 Alternative: Manual Setup","text":"<p>If you prefer working with local repositories or need custom configurations:</p>"},{"location":"getting-started/quickstart/#manual-installation","title":"Manual Installation","text":"<pre><code># Create workspace\nmkdir -p ~/code/github.com/tfgrid-studio\ncd ~/code/github.com/tfgrid-studio\n\n# Clone repositories\ngit clone https://github.com/tfgrid-studio/tfgrid-compose\ngit clone https://github.com/tfgrid-studio/tfgrid-ai-agent\n\n# Install CLI\ncd tfgrid-compose\nmake install\n\n# Configure mnemonic\nmkdir -p ~/.config/threefold\necho \"your twelve word mnemonic\" &gt; ~/.config/threefold/mnemonic\nchmod 600 ~/.config/threefold/mnemonic\nexport TF_VAR_mnemonic=$(cat ~/.config/threefold/mnemonic)\n\n# Create context file\necho \"app: ../tfgrid-ai-agent\" &gt; .tfgrid-compose.yaml\n\n# Deploy\ntfgrid-compose up\n</code></pre> <p>See Complete Setup Guide for detailed manual instructions.</p>"},{"location":"getting-started/quickstart/#step-6-verify-use","title":"Step 6: Verify &amp; Use","text":""},{"location":"getting-started/quickstart/#check-deployment-status","title":"Check Deployment Status","text":"<pre><code># Check deployment status\ntfc status\n\n# Output:\n# App: tfgrid-ai-agent\n# Status: Running\n# Pattern: single-vm\n# Network: main\n# IP Address: 10.1.3.2 (WireGuard)\n# Deployed: 2025-10-21 15:52:00\n</code></pre>"},{"location":"getting-started/quickstart/#use-your-ai-agent","title":"Use Your AI Agent","text":"<pre><code># Create a project\ntfc create my-first-app\n# Interactive prompts guide you through setup\n\n# Monitor AI coding in real-time\ntfc monitor my-first-app\n\n# List all projects\ntfc projects\n\n# SSH to inspect generated code\ntfc ssh\ncd /home/developer/code/my-first-app\nls -la\ncat README.md\n\n# Stop when done\ntfc stop my-first-app\n</code></pre>"},{"location":"getting-started/quickstart/#view-logs","title":"View Logs","text":"<pre><code># View application logs\ntfgrid-compose logs\n</code></pre>"},{"location":"getting-started/quickstart/#step-7-clean-up","title":"Step 7: Clean Up","text":"<p>When you're done:</p> <pre><code># Destroy the deployment\ntfgrid-compose down\n\n# Confirm: yes\n\n# All resources are now deleted:\n# \u2705 VM destroyed\n# \u2705 Network cleaned up\n# \u2705 State removed\n</code></pre>"},{"location":"getting-started/quickstart/#complete-workflow-summary","title":"Complete Workflow Summary","text":"<pre><code># 1. Install &amp; Setup (one-time)\ncurl -sSL install.tfgrid.studio/install.sh | sh\ntfgrid-compose login\ntfgrid-compose shortcut tfc\n\n# 2. Explore &amp; Deploy\ntfc search\ntfc up tfgrid-ai-agent\n\n# 3. Use AI Agent\ntfc create my-project\ntfc monitor my-project\ntfc projects\n\n# 4. Access &amp; Inspect\ntfc ssh\ncd /home/developer/code/my-project\nls -la\n\n# 5. Clean up\ntfc stop my-project\ntfc down\n</code></pre>"},{"location":"getting-started/quickstart/#available-commands","title":"Available Commands","text":""},{"location":"getting-started/quickstart/#deployment","title":"Deployment","text":"<pre><code>tfgrid-compose up [app]       # Deploy application\ntfgrid-compose down [app]     # Destroy deployment\ntfgrid-compose status [app]   # Show status\n</code></pre>"},{"location":"getting-started/quickstart/#access","title":"Access","text":"<pre><code>tfgrid-compose ssh [app]      # SSH to VM\ntfgrid-compose logs [app]     # View logs\ntfgrid-compose exec [app] &lt;cmd&gt;  # Execute command\n</code></pre>"},{"location":"getting-started/quickstart/#ai-agent-when-using-tfgrid-ai-agent","title":"AI Agent (when using tfgrid-ai-agent)","text":"<pre><code>tfgrid-compose projects            # List projects\ntfgrid-compose create              # Create project (interactive)\ntfgrid-compose run &lt;project&gt;       # Start AI agent\ntfgrid-compose monitor &lt;project&gt;   # Monitor progress\ntfgrid-compose stop &lt;project&gt;      # Stop agent\n</code></pre>"},{"location":"getting-started/quickstart/#patterns","title":"Patterns","text":"<pre><code>tfgrid-compose patterns       # List available patterns\n</code></pre>"},{"location":"getting-started/quickstart/#without-context-file","title":"Without Context File","text":"<p>If you don't use a context file, specify the app path:</p> <pre><code># Deploy\ntfgrid-compose up ../tfgrid-ai-agent\n\n# Status\ntfgrid-compose status ../tfgrid-ai-agent\n\n# SSH\ntfgrid-compose ssh ../tfgrid-ai-agent\n\n# Destroy\ntfgrid-compose down ../tfgrid-ai-agent\n</code></pre>"},{"location":"getting-started/quickstart/#multiple-applications","title":"Multiple Applications","text":"<p>You can deploy multiple apps:</p> <pre><code># Deploy app 1\ntfgrid-compose up ../tfgrid-ai-agent\n\n# Deploy app 2\ntfgrid-compose up ../my-other-app\n\n# Each app gets its own:\n# - VM\n# - Network\n# - State\n# - Resources\n</code></pre>"},{"location":"getting-started/quickstart/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quickstart/#deployment-fails","title":"Deployment Fails","text":"<pre><code># Check prerequisites\ntfgrid-compose --help\ntofu version\nansible --version\nwg --version\n\n# Check mnemonic\necho $TF_VAR_mnemonic\n\n# Try again\ntfgrid-compose down\ntfgrid-compose up\n</code></pre>"},{"location":"getting-started/quickstart/#cant-connect-to-vm","title":"Can't Connect to VM","text":"<pre><code># Check WireGuard\nsudo wg show\n\n# Reconnect\ncd ~/code/github.com/tfgrid-studio/tfgrid-compose\nmake wg APP=../tfgrid-ai-agent\n\n# Test SSH\ntfgrid-compose ssh\n</code></pre>"},{"location":"getting-started/quickstart/#command-not-found","title":"Command Not Found","text":"<pre><code># Re-install CLI\ncd ~/code/github.com/tfgrid-studio/tfgrid-compose\nmake install\n\n# Or add to PATH manually\nexport PATH=\"$PATH:$(pwd)/cli\"\n</code></pre>"},{"location":"getting-started/quickstart/#app-not-found","title":"App Not Found","text":"<pre><code># Check context file\ncat .tfgrid-compose.yaml\n\n# Should show:\n# app: ../tfgrid-ai-agent\n\n# Or specify full path\ntfgrid-compose up ../tfgrid-ai-agent\n</code></pre> <p>See Troubleshooting Guide for more solutions.</p>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you've deployed your first app:</p>"},{"location":"getting-started/quickstart/#learn-more","title":"Learn More","text":"<ul> <li>Core Concepts - Understand patterns, apps, and manifests</li> <li>Pattern Documentation - Learn about deployment patterns</li> <li>CLI Reference - Complete command reference</li> </ul>"},{"location":"getting-started/quickstart/#deploy-more-apps","title":"Deploy More Apps","text":"<ul> <li>AI Agent Guide - Complete AI agent workflows</li> <li>Gitea Guide - Self-hosted Git service</li> <li>App Registry - Discover more applications</li> </ul>"},{"location":"getting-started/quickstart/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Advanced Deployment - Production strategies</li> <li>Networking Guide - WireGuard and Mycelium</li> <li>Security Best Practices - Secure your deployments</li> </ul>"},{"location":"getting-started/quickstart/#quick-reference-card","title":"Quick Reference Card","text":"<pre><code># Setup (one-time)\nmake install\nexport TF_VAR_mnemonic=$(cat ~/.config/threefold/mnemonic)\necho \"app: ../my-app\" &gt; .tfgrid-compose.yaml\n\n# Daily workflow\ntfgrid-compose up        # Deploy\ntfgrid-compose status    # Check status\ntfgrid-compose ssh       # Connect\ntfgrid-compose logs      # View logs\ntfgrid-compose down      # Destroy\n</code></pre> <p>Congratulations! You've successfully deployed on ThreeFold Grid. \ud83d\ude80</p> <p>Need help? Join our community or open an issue.</p>"},{"location":"getting-started/setup/","title":"Complete Setup Guide","text":"<p>This guide covers the complete setup process for TFGrid Compose, from installation to productive use. Follow these steps to get started with deploying applications on ThreeFold Grid.</p>"},{"location":"getting-started/setup/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have: - \u2705 Basic command line knowledge - \u2705 Internet connection - \u2705 ThreeFold Grid account (threefold.io)</p>"},{"location":"getting-started/setup/#step-1-install-tfgrid-compose","title":"Step 1: Install TFGrid Compose","text":""},{"location":"getting-started/setup/#one-command-installation","title":"One-Command Installation","text":"<pre><code># Install TFGrid Compose and CLI\ncurl -sSL install.tfgrid.studio/install.sh | sh\n</code></pre> <p>What this does: - Downloads and installs <code>tfgrid-compose</code> CLI - Adds it to your PATH automatically - Creates a default <code>tfgrid</code> shortcut - Sets up configuration directories</p>"},{"location":"getting-started/setup/#verify-installation","title":"Verify Installation","text":"<pre><code># Check installation\ntfgrid-compose --version\n# Output: TFGrid Compose v0.13.4\n\n# Test basic functionality\ntfgrid-compose --help\n</code></pre>"},{"location":"getting-started/setup/#step-2-login-configure-credentials","title":"Step 2: Login &amp; Configure Credentials","text":""},{"location":"getting-started/setup/#interactive-login","title":"Interactive Login","text":"<pre><code># Start interactive setup\ntfgrid-compose login\n</code></pre> <p>Configuration flow: 1. ThreeFold Mnemonic: Enter your 12 or 24-word seed phrase (hidden input for security) 2. Git Identity: Configure name and email for AI-generated commits 3. Optional Tokens: GitHub/Gitea tokens for private repositories</p> <p>Example session: <pre><code>ThreeFold Mnemonic (required):\n  This is your seed phrase from your ThreeFold Chain wallet\n  \u2139  Need help? See: tfgrid-compose docs\n\n\u2192 Enter mnemonic (12 or 24 words):\n  (input hidden for security)\n\u2705 Validated: 12 words\n\nGit Name (for commits):\n\u2192 Git name: John Doe\n\u2705 Git name set: John Doe\n\nGit Email (for commits):\n\u2192 Git email: john@example.com\n\u2705 Git email set: john@example.com\n\n\u2705 Credentials saved securely!\nStored at: /home/user/.config/tfgrid-compose/credentials.yaml\n</code></pre></p>"},{"location":"getting-started/setup/#manual-configuration-alternative","title":"Manual Configuration (Alternative)","text":"<p>If you prefer manual setup:</p> <pre><code># Store mnemonic securely\nmkdir -p ~/.config/threefold\necho \"your twelve word mnemonic here\" &gt; ~/.config/threefold/mnemonic\nchmod 600 ~/.config/threefold/mnemonic\n\n# Set environment variable\nexport TF_VAR_mnemonic=$(cat ~/.config/threefold/mnemonic)\n</code></pre>"},{"location":"getting-started/setup/#step-3-set-up-command-shortcuts","title":"Step 3: Set Up Command Shortcuts","text":""},{"location":"getting-started/setup/#create-shortcuts","title":"Create Shortcuts","text":"<pre><code># Create convenient shortcuts\ntfgrid-compose shortcut tfc    # Creates 'tfc' command\ntfgrid-compose shortcut grid   # Creates 'grid' command\n</code></pre> <p>Available shortcuts: - <code>tfgrid</code> (created automatically during install) - <code>tfc</code>, <code>grid</code>, or any custom name you choose</p>"},{"location":"getting-started/setup/#manage-shortcuts","title":"Manage Shortcuts","text":"<pre><code># List all shortcuts\ntfgrid-compose shortcut --list\n\n# Remove a shortcut\ntfgrid-compose shortcut --remove tfc\n\n# Reset to default\ntfgrid-compose shortcut --default\n</code></pre>"},{"location":"getting-started/setup/#step-4-explore-the-app-registry","title":"Step 4: Explore the App Registry","text":""},{"location":"getting-started/setup/#browse-available-apps","title":"Browse Available Apps","text":"<pre><code># List all available apps\ntfgrid-compose search\n\n# Search by keyword\ntfgrid-compose search ai\ntfgrid-compose search git\n\n# Search by tag\ntfgrid-compose search --tag development\ntfgrid-compose search --tag ai\n</code></pre> <p>Current official apps: - <code>tfgrid-ai-agent</code> - AI coding assistant (v0.3.0) - <code>tfgrid-gitea</code> - Self-hosted Git service (v1.0.0)</p>"},{"location":"getting-started/setup/#get-app-information","title":"Get App Information","text":"<pre><code># Detailed app information\ntfgrid-compose info tfgrid-ai-agent\n\n# Shows: version, resources, patterns, documentation links\n</code></pre>"},{"location":"getting-started/setup/#step-5-deploy-your-first-app","title":"Step 5: Deploy Your First App","text":""},{"location":"getting-started/setup/#deploy-ai-agent","title":"Deploy AI Agent","text":"<pre><code># Deploy the AI coding assistant\ntfgrid-compose up tfgrid-ai-agent\n</code></pre> <p>Deployment process: <pre><code>\u2705 Validating prerequisites...\n\u2705 Downloading from registry...\n\u2705 Provisioning ThreeFold Grid VM (4 CPU, 8GB RAM, 100GB disk)...\n\u2705 Configuring WireGuard networking...\n\u2705 Installing Node.js 20.x, Qwen CLI...\n\u2705 Setting up workspace at /home/developer/code...\n\u2705 Running health checks...\n\u2705 Deployment complete!\n\n\u2139 App: tfgrid-ai-agent v0.3.0\n\u2139 Pattern: single-vm\n\u2139 Next steps:\n  \u2022 Check status: tfgrid-compose status tfgrid-ai-agent\n  \u2022 SSH access: tfgrid-compose ssh tfgrid-ai-agent\n</code></pre></p>"},{"location":"getting-started/setup/#verify-deployment","title":"Verify Deployment","text":"<pre><code># Check deployment status\ntfgrid-compose status\n\n# SSH into the VM\ntfgrid-compose ssh\n\n# View logs\ntfgrid-compose logs\n</code></pre>"},{"location":"getting-started/setup/#step-6-use-your-ai-agent","title":"Step 6: Use Your AI Agent","text":""},{"location":"getting-started/setup/#create-first-project","title":"Create First Project","text":"<pre><code># Create a new AI coding project\ntfgrid-compose create my-website\n</code></pre> <p>Interactive prompts: 1. Project name: (auto-filled or enter custom) 2. Duration: 30m, 1h, 2h, indefinite 3. Prompt type: Custom or template 4. Your prompt: Describe what you want the AI to build 5. Start now?: y/N</p>"},{"location":"getting-started/setup/#monitor-progress","title":"Monitor Progress","text":"<pre><code># Monitor AI coding in real-time\ntfgrid-compose monitor my-website\n\n# List all projects\ntfgrid-compose projects\n\n# Check project status\ntfgrid-compose summary my-website\n</code></pre>"},{"location":"getting-started/setup/#access-generated-code","title":"Access Generated Code","text":"<pre><code># SSH to inspect files\ntfgrid-compose ssh\ncd /home/developer/code/my-website\nls -la\ncat README.md\n</code></pre>"},{"location":"getting-started/setup/#step-7-deploy-additional-apps","title":"Step 7: Deploy Additional Apps","text":""},{"location":"getting-started/setup/#deploy-gitea-git-service","title":"Deploy Gitea (Git Service)","text":"<pre><code># Deploy self-hosted Git service\ntfgrid-compose up tfgrid-gitea\n\n# Get access information\ntfgrid-compose address tfgrid-gitea\n# Output: http://10.1.3.5:3000\n\n# Access at: http://&lt;vm-ip&gt;:3000\n# Default credentials: gitadmin / changeme123\n</code></pre>"},{"location":"getting-started/setup/#run-multiple-apps-concurrently","title":"Run Multiple Apps Concurrently","text":"<pre><code># Deploy both AI agent and Gitea\ntfgrid-compose up tfgrid-ai-agent\ntfgrid-compose up tfgrid-gitea\n\n# List all deployments\ntfgrid-compose list\n\n# Each app runs on its own VM with dedicated resources\n</code></pre>"},{"location":"getting-started/setup/#configuration-customization","title":"Configuration &amp; Customization","text":""},{"location":"getting-started/setup/#environment-variables","title":"Environment Variables","text":"<p>Set these for advanced configuration:</p> <pre><code># Required\nexport TF_VAR_mnemonic=$(cat ~/.config/threefold/mnemonic)\n\n# Optional - AI Agent\nexport QWEN_API_KEY='your-api-key'\nexport GITHUB_TOKEN='your-token'\n\n# Optional - Gitea\nexport GITEA_ADMIN_USER='admin'\nexport GITEA_ADMIN_PASSWORD='secure-password'\n</code></pre>"},{"location":"getting-started/setup/#custom-resources","title":"Custom Resources","text":"<p>Deploy with custom resource allocation:</p> <pre><code># AI Agent with more resources\ntfgrid-compose up tfgrid-ai-agent --cpu 8 --memory 16384 --disk 200\n\n# Gitea with custom domain (requires gateway pattern)\ntfgrid-compose up tfgrid-gitea --pattern gateway --domain git.example.com\n</code></pre>"},{"location":"getting-started/setup/#troubleshooting-setup-issues","title":"Troubleshooting Setup Issues","text":""},{"location":"getting-started/setup/#installation-problems","title":"Installation Problems","text":"<pre><code># Check system requirements\ncurl --version\ngit --version\nmake --version\n\n# Re-run installation\ncurl -sSL install.tfgrid.studio/install.sh | sh\n</code></pre>"},{"location":"getting-started/setup/#login-issues","title":"Login Issues","text":"<pre><code># Check mnemonic format\ntfgrid-compose login --check\n\n# Re-enter credentials\ntfgrid-compose login\n</code></pre>"},{"location":"getting-started/setup/#deployment-failures","title":"Deployment Failures","text":"<pre><code># Check prerequisites\ntfgrid-compose up tfgrid-ai-agent --dry-run\n\n# View detailed logs\ntfgrid-compose logs tfgrid-ai-agent\n\n# Clean and retry\ntfgrid-compose down tfgrid-ai-agent\ntfgrid-compose up tfgrid-ai-agent\n</code></pre>"},{"location":"getting-started/setup/#network-issues","title":"Network Issues","text":"<pre><code># Check WireGuard connection\nsudo wg show\n\n# Reconnect if needed\ntfgrid-compose ssh tfgrid-ai-agent\n# Then from VM: sudo systemctl restart wg-quick@wg0\n</code></pre>"},{"location":"getting-started/setup/#next-steps","title":"Next Steps","text":"<p>Now that you're set up:</p>"},{"location":"getting-started/setup/#learn-more","title":"Learn More","text":"<ul> <li>Quick Start - 5-minute deployment guide</li> <li>AI Agent Guide - Complete AI agent workflows</li> <li>Gitea Guide - Self-hosted Git service</li> <li>App Registry - Discover more apps</li> </ul>"},{"location":"getting-started/setup/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Pattern Documentation - Deployment patterns</li> <li>CLI Reference - Complete command reference</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"getting-started/setup/#community","title":"Community","text":"<ul> <li>GitHub: tfgrid-studio</li> <li>Discussions: Community forum</li> <li>Issues: Report bugs</li> </ul> <p>Setup Complete! \ud83c\udf89 You're now ready to deploy applications on ThreeFold Grid.</p> <p>Quick Commands Reference: ```bash</p>"},{"location":"getting-started/setup/#daily-workflow","title":"Daily workflow","text":"<p>tfc search              # Browse apps tfc up            # Deploy app tfc status             # Check status tfc ssh                # Access VM tfc logs               # View logs tfc down               # Clean up"},{"location":"getting-started/threefold-setup/","title":"ThreeFold Setup Guide (DIY Path)","text":"<p>This guide walks you through setting up your ThreeFold Chain wallet and preparing to use <code>tfgrid-compose</code>.</p> <p>Estimated time: 1-2 hours Cost: Minimum ~$10-20 USD for initial TFT Prerequisites: Smartphone (iOS or Android)</p>"},{"location":"getting-started/threefold-setup/#overview","title":"Overview","text":"<p>To deploy applications on ThreeFold Grid using <code>tfgrid-compose</code>, you need:</p> <ol> <li>\u2705 ThreeFold Chain wallet (with seed phrase)</li> <li>\u2705 Funded wallet with TFT (ThreeFold Token)</li> <li>\u2705 Completed KYC verification</li> <li>\u2705 Basic understanding of the process</li> </ol> <p>This is the DIY path - you manage your own wallet and funds. For a simpler managed experience, see TFGrid Studio Cloud (coming soon).</p>"},{"location":"getting-started/threefold-setup/#step-1-install-threefold-connect","title":"Step 1: Install ThreeFold Connect","text":"<p>ThreeFold Connect is your mobile wallet for ThreeFold Chain.</p>"},{"location":"getting-started/threefold-setup/#download-the-app","title":"Download the App","text":"<ul> <li>iOS: App Store Link</li> <li>Android: Google Play Link</li> </ul>"},{"location":"getting-started/threefold-setup/#create-your-wallet","title":"Create Your Wallet","text":"<ol> <li>Open ThreeFold Connect</li> <li>Tap \"Create New Wallet\"</li> <li>Choose a strong password</li> <li>CRITICAL: Write down your seed phrase!</li> <li>You'll see 12 or 24 words</li> <li>Write them on paper (NOT digitally)</li> <li>Store in a safe place</li> <li> <p>You CANNOT recover your wallet without this</p> </li> <li> <p>Verify your seed phrase (the app will ask)</p> </li> <li>Your wallet is created! \u2705</li> </ol>"},{"location":"getting-started/threefold-setup/#important-notes","title":"Important Notes","text":"<p>\u26a0\ufe0f Your seed phrase is your private key - Never share it with anyone - Never store it digitally (no screenshots, no cloud) - If you lose it, your funds are GONE forever - ThreeFold cannot recover your wallet</p> <p>\ud83d\udca1 This is your TFChain address - You'll see an address like: <code>5F3sa...</code> - This is where you'll receive TFT - You'll use your seed phrase with <code>tfgrid-compose</code></p>"},{"location":"getting-started/threefold-setup/#step-2-get-tft-threefold-token","title":"Step 2: Get TFT (ThreeFold Token)","text":"<p>You need TFT to deploy on ThreeFold Grid. Here are the main ways to acquire it:</p>"},{"location":"getting-started/threefold-setup/#option-a-buy-on-stellar-via-lobstr","title":"Option A: Buy on Stellar (via Lobstr)","text":"<p>This is the most common method for new users.</p>"},{"location":"getting-started/threefold-setup/#21-install-lobstr","title":"2.1 Install Lobstr","text":"<ul> <li>iOS: App Store</li> <li>Android: Google Play</li> </ul>"},{"location":"getting-started/threefold-setup/#22-import-your-wallet-to-lobstr","title":"2.2 Import Your Wallet to Lobstr","text":"<ol> <li>Open Lobstr</li> <li>Tap \"Import Wallet\"</li> <li>Enter the SAME seed phrase from ThreeFold Connect</li> <li>Your wallet is now accessible in both apps</li> </ol>"},{"location":"getting-started/threefold-setup/#23-buy-usdc-or-xlm","title":"2.3 Buy USDC or XLM","text":"<ol> <li>In Lobstr, tap \"Buy Crypto\"</li> <li>Choose USDC or XLM</li> <li>Enter amount (start with $20-50)</li> <li>Complete payment with credit card</li> <li>Wait for confirmation (~5 minutes)</li> </ol>"},{"location":"getting-started/threefold-setup/#24-swap-to-tft","title":"2.4 Swap to TFT","text":"<ol> <li>Tap \"Trade\" in Lobstr</li> <li>Search for \"TFT\" (ThreeFold Token)</li> <li>Select the swap: USDC \u2192 TFT (or XLM \u2192 TFT)</li> <li>Enter amount</li> <li>Confirm the swap</li> <li>You now have TFT on Stellar! \u2705</li> </ol>"},{"location":"getting-started/threefold-setup/#option-b-buy-on-decentralized-exchanges","title":"Option B: Buy on Decentralized Exchanges","text":"<ul> <li>PancakeSwap (BSC network)</li> <li>Uniswap (Ethereum network)</li> <li>Check ThreeFold website for current listings</li> </ul>"},{"location":"getting-started/threefold-setup/#option-c-receive-from-someone","title":"Option C: Receive from Someone","text":"<p>If someone else has TFT, they can send it directly to your wallet address.</p>"},{"location":"getting-started/threefold-setup/#step-3-bridge-tft-to-threefold-chain","title":"Step 3: Bridge TFT to ThreeFold Chain","text":"<p>Important: TFT on Stellar needs to be bridged to ThreeFold Chain for deployments.</p>"},{"location":"getting-started/threefold-setup/#why-bridge","title":"Why Bridge?","text":"<pre><code>TFT on Stellar Network    \u2192    TFT on ThreeFold Chain\n(For trading/swaps)             (For Grid deployments)\n</code></pre> <p>Only TFT on ThreeFold Chain can be used to deploy VMs on the Grid.</p>"},{"location":"getting-started/threefold-setup/#how-to-bridge","title":"How to Bridge","text":"<ol> <li>Open ThreeFold Connect app</li> <li>Tap \"Bridge\" or \"Stellar Bridge\"</li> <li>Select amount of TFT to bridge</li> <li>Confirm: Stellar \u2192 TFChain</li> <li>Wait ~5-10 minutes for confirmation</li> <li>Check your TFChain balance in the app</li> </ol>"},{"location":"getting-started/threefold-setup/#verify-balance","title":"Verify Balance","text":"<p>In ThreeFold Connect: - Check \"TFChain Balance\" (not Stellar) - This is what you can use for deployments - Example: <code>1000 TFT</code> on TFChain = ready to deploy</p>"},{"location":"getting-started/threefold-setup/#step-4-complete-kyc-verification","title":"Step 4: Complete KYC Verification","text":"<p>ThreeFold Grid requires KYC (Know Your Customer) for certain features.</p>"},{"location":"getting-started/threefold-setup/#start-kyc-process","title":"Start KYC Process","text":"<ol> <li>Open ThreeFold Connect</li> <li>Go to Settings \u2192 KYC Verification</li> <li>Choose verification method:</li> <li>Passport (recommended)</li> <li>National ID</li> <li>Driver's License</li> </ol>"},{"location":"getting-started/threefold-setup/#upload-documents","title":"Upload Documents","text":"<ol> <li>Take a clear photo of your ID</li> <li>Good lighting</li> <li>All corners visible</li> <li> <p>Text readable</p> </li> <li> <p>Take a selfie</p> </li> <li>Follow the on-screen instructions</li> <li> <p>Hold your ID next to your face if required</p> </li> <li> <p>Submit for review</p> </li> </ol>"},{"location":"getting-started/threefold-setup/#wait-for-approval","title":"Wait for Approval","text":"<ul> <li>Typical time: 24-72 hours</li> <li>Status: Check in app (Pending \u2192 Approved)</li> <li>Notification: You'll receive an email when approved</li> </ul>"},{"location":"getting-started/threefold-setup/#what-if-rejected","title":"What if Rejected?","text":"<ul> <li>Check email for reason</li> <li>Common issues:</li> <li>Photo too blurry</li> <li>Glare on ID</li> <li>Expired ID</li> <li>Name mismatch</li> <li>Resubmit with corrections</li> </ul>"},{"location":"getting-started/threefold-setup/#step-5-use-with-tfgrid-compose","title":"Step 5: Use with tfgrid-compose","text":"<p>Once you have: - \u2705 Seed phrase - \u2705 TFT on TFChain - \u2705 KYC approved</p> <p>You're ready to deploy!</p>"},{"location":"getting-started/threefold-setup/#login","title":"Login","text":"<pre><code>tfgrid-compose login\n</code></pre> <p>When prompted, enter your seed phrase (12 or 24 words).</p>"},{"location":"getting-started/threefold-setup/#check-your-setup","title":"Check Your Setup","text":"<pre><code>tfgrid-compose login --check\n</code></pre> <p>This verifies: - \u2713 Seed phrase is valid - \u2713 Can connect to TFChain - \u2713 Balance is sufficient</p>"},{"location":"getting-started/threefold-setup/#your-first-deployment","title":"Your First Deployment","text":"<pre><code># Search for apps\ntfgrid-compose search\n\n# Deploy a simple VM\ntfgrid-compose up single-vm\n\n# Check status\ntfgrid-compose status\n\n# View logs\ntfgrid-compose logs\n\n# Stop when done\ntfgrid-compose down\n</code></pre>"},{"location":"getting-started/threefold-setup/#cost-estimates","title":"Cost Estimates","text":""},{"location":"getting-started/threefold-setup/#initial-setup","title":"Initial Setup","text":"<ul> <li>TFT purchase: $20-50 (your choice)</li> <li>Transaction fees: ~$0.10-0.50</li> <li>KYC: Free</li> </ul>"},{"location":"getting-started/threefold-setup/#deployment-costs-approximate","title":"Deployment Costs (Approximate)","text":"Resource Cost (USD/month) Cost (TFT/month) Small VM (1 CPU, 2GB RAM) $3-5 60-100 TFT Medium VM (2 CPU, 4GB RAM) $8-12 160-240 TFT Large VM (4 CPU, 8GB RAM) $15-25 300-500 TFT AI Agent (API-based) $5-10 100-200 TFT <p>Prices vary by farmer and resource availability</p>"},{"location":"getting-started/threefold-setup/#how-long-will-my-tft-last","title":"How Long Will My TFT Last?","text":"<pre><code>$50 \u2192 ~1000 TFT\nSmall VM = ~80 TFT/month\n= 12+ months of runtime\n\nMedium VM = ~200 TFT/month  \n= 5 months of runtime\n</code></pre>"},{"location":"getting-started/threefold-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/threefold-setup/#cant-find-my-seed-phrase","title":"\"Can't find my seed phrase\"","text":"<p>\u274c If you lost your seed phrase, your wallet is unrecoverable.</p> <p>You must: 1. Create a NEW wallet 2. Write down the NEW seed phrase 3. Transfer any remaining funds (if you still have access)</p>"},{"location":"getting-started/threefold-setup/#bridge-is-taking-too-long","title":"\"Bridge is taking too long\"","text":"<ul> <li>Normal wait: 5-10 minutes</li> <li>If &gt; 30 minutes:</li> <li>Check Stellar network status</li> <li>Check ThreeFold Chain status</li> <li>Contact support if &gt; 2 hours</li> </ul>"},{"location":"getting-started/threefold-setup/#kyc-pending-for-days","title":"\"KYC pending for days\"","text":"<ul> <li>Normal: 24-72 hours</li> <li>If &gt; 5 days:</li> <li>Check spam folder for emails</li> <li>Resubmit with clearer photos</li> <li>Contact ThreeFold support</li> </ul>"},{"location":"getting-started/threefold-setup/#not-enough-tft-for-deployment","title":"\"Not enough TFT for deployment\"","text":"<p>Check: <pre><code>tfgrid-compose login --check\n</code></pre></p> <p>Shows your balance. If low: - Bridge more from Stellar - Buy more TFT - Use smaller deployment</p>"},{"location":"getting-started/threefold-setup/#deployment-failed","title":"\"Deployment failed\"","text":"<p>Common causes: - Insufficient TFT - KYC not approved - Invalid seed phrase - Network congestion - No available nodes</p> <p>Check logs: <pre><code>tfgrid-compose logs\n</code></pre></p>"},{"location":"getting-started/threefold-setup/#security-best-practices","title":"Security Best Practices","text":""},{"location":"getting-started/threefold-setup/#seed-phrase-security","title":"Seed Phrase Security","text":"<p>\u2705 DO: - Write on paper, store in safe - Use multiple copies in different locations - Consider a hardware wallet (advanced) - Test recovery process with small amount first</p> <p>\u274c DON'T: - Screenshot or photo - Store in cloud (Google Drive, Dropbox, etc.) - Store in password manager (debated, but risky) - Email or message to yourself - Share with anyone (even support!)</p>"},{"location":"getting-started/threefold-setup/#account-security","title":"Account Security","text":"<ul> <li>Use strong password on ThreeFold Connect</li> <li>Enable biometric lock (fingerprint/face)</li> <li>Keep apps updated</li> <li>Be wary of phishing (fake apps, emails)</li> <li>Double-check addresses before sending TFT</li> </ul>"},{"location":"getting-started/threefold-setup/#computer-security","title":"Computer Security","text":"<p>When using <code>tfgrid-compose</code>: - Keep OS updated - Use antivirus software - Don't enter seed phrase on shared computers - Be careful with command history:</p> <pre><code># Prevent seed phrase in history\nset +o history\ntfgrid-compose login\nset -o history\n</code></pre>"},{"location":"getting-started/threefold-setup/#resources","title":"Resources","text":""},{"location":"getting-started/threefold-setup/#official-links","title":"Official Links","text":"<ul> <li>ThreeFold Website: https://threefold.io</li> <li>ThreeFold Manual: https://manual.grid.tf</li> <li>ThreeFold Forum: https://forum.threefold.io</li> <li>TFGrid Dashboard: https://dashboard.grid.tf</li> </ul>"},{"location":"getting-started/threefold-setup/#community","title":"Community","text":"<ul> <li>Telegram: https://t.me/threefold</li> <li>Discord: https://discord.gg/threefold</li> </ul>"},{"location":"getting-started/threefold-setup/#tfgrid-studio","title":"TFGrid Studio","text":"<ul> <li>Documentation: https://docs.tfgrid.studio</li> <li>GitHub: https://github.com/tfgrid-studio</li> <li>Support: support@tfgrid.studio (coming soon)</li> </ul>"},{"location":"getting-started/threefold-setup/#whats-next","title":"What's Next?","text":"<p>Once you're set up:</p> <ol> <li>Learn the CLI: tfgrid-compose Commands</li> <li>Deploy Apps: Deployment Guide</li> <li>Browse Patterns: Available Patterns</li> <li>Join Community: Share your experience!</li> </ol>"},{"location":"getting-started/threefold-setup/#alternative-managed-path","title":"Alternative: Managed Path","text":"<p>Don't want to manage wallets and TFT?</p> <p>TFGrid Studio Cloud (coming soon) offers: - Email + password login - Credit card payment - We handle all the complexity - Same powerful deployments</p> <p>Learn more \u2192</p> <p>Ready to deploy?</p> <pre><code>tfgrid-compose login\ntfgrid-compose search\ntfgrid-compose up &lt;app&gt;\n</code></pre> <p>Happy deploying! \ud83d\ude80</p>"},{"location":"guides/ai-agent/","title":"AI Agent Guide","text":"<p>Complete guide for deploying and using the AI coding agent on ThreeFold Grid.</p>"},{"location":"guides/ai-agent/#overview","title":"Overview","text":"<p>The TFGrid AI Agent is an autonomous AI coding assistant that runs on ThreeFold Grid. It can:</p> <ul> <li>\ud83e\udd16 Write and edit code autonomously</li> <li>\ud83d\udd04 Run iterative improvement loops</li> <li>\ud83e\uddea Test and debug automatically</li> <li>\ud83d\udcdd Generate documentation</li> <li>\ud83d\udd27 Refactor and optimize code</li> <li>\u23f0 Work within time constraints</li> </ul> <p>Deployment time: 2-3 minutes Cost: Pay-as-you-go on ThreeFold Grid Access: Native commands via <code>tfgrid-compose</code></p> <p>Version: 0.3.0 (Pre-1.0)</p>"},{"location":"guides/ai-agent/#prerequisites-setup","title":"Prerequisites &amp; Setup","text":""},{"location":"guides/ai-agent/#1-install-tfgrid-compose","title":"1. Install TFGrid Compose","text":"<p>First, install the TFGrid Compose CLI:</p> <pre><code># One-command installation\ncurl -sSL install.tfgrid.studio/install.sh | sh\n</code></pre> <p>This installs <code>tfgrid-compose</code> to your system and creates a default <code>tfgrid</code> shortcut.</p>"},{"location":"guides/ai-agent/#2-login-configure-credentials","title":"2. Login &amp; Configure Credentials","text":"<p>Set up your ThreeFold Grid credentials:</p> <pre><code># Interactive login (collects mnemonic, git config, optional tokens)\ntfgrid-compose login\n</code></pre> <p>What it configures: - ThreeFold mnemonic (required for deployments) - Git identity (name/email for commits) - GitHub token (optional, for private repos) - Gitea credentials (optional, for private Gitea repos)</p>"},{"location":"guides/ai-agent/#3-set-up-shortcuts-optional","title":"3. Set Up Shortcuts (Optional)","text":"<p>Create command shortcuts for convenience:</p> <pre><code># Create a custom shortcut (e.g., 'tfc' for tfgrid-compose)\ntfgrid-compose shortcut tfc\n\n# Now you can use: tfc up tfgrid-ai-agent\ntfc up tfgrid-ai-agent\n\n# List all shortcuts\ntfgrid-compose shortcut --list\n</code></pre>"},{"location":"guides/ai-agent/#4-explore-available-apps","title":"4. Explore Available Apps","text":"<p>Browse the app registry:</p> <pre><code># Search all available apps\ntfgrid-compose search\n\n# Search with query\ntfgrid-compose search ai\n\n# Search by tag\ntfgrid-compose search --tag development\n</code></pre> <p>Current official apps: - <code>tfgrid-ai-agent</code> - AI coding assistant - <code>tfgrid-gitea</code> - Self-hosted Git service</p>"},{"location":"guides/ai-agent/#quick-start","title":"Quick Start","text":""},{"location":"guides/ai-agent/#deploy-the-ai-agent","title":"Deploy the AI Agent","text":"<pre><code># Deploy to ThreeFold Grid\ntfgrid-compose up tfgrid-ai-agent\n</code></pre> <p>What happens:</p> <ol> <li>\u2705 Creates Ubuntu 24.04 VM (4 CPU, 8GB RAM, 100GB disk)</li> <li>\u2705 Configures WireGuard networking  </li> <li>\u2705 Installs Node.js 20.x, Qwen CLI</li> <li>\u2705 Prompts for git credentials (one time)</li> <li>\u2705 Sets up workspace at <code>/home/developer/code</code></li> <li>\u2705 Runs health checks</li> </ol> <p>Duration: ~2-3 minutes</p> <p>Output: <pre><code>\u2705 \ud83c\udf89 Deployment complete!\n\u2139 App: tfgrid-ai-agent v0.3.0\n\u2139 Pattern: single-vm v1.0.0\n\u2139 Next steps:\n  \u2022 Check status: tfgrid-compose status tfgrid-ai-agent\n  \u2022 View logs: tfgrid-compose logs tfgrid-ai-agent\n  \u2022 Connect: tfgrid-compose ssh tfgrid-ai-agent\n</code></pre></p>"},{"location":"guides/ai-agent/#2-create-your-first-project","title":"2. Create Your First Project","text":"<p>Create and start your first AI coding project:</p> <pre><code>tfgrid-compose create my-project\n</code></pre> <p>Interactive prompts: 1. Project name (if not specified) 2. Duration (30m, 1h, 2h, indefinite) 3. Git credentials (auto-configured from login) 4. Prompt type (Custom or Generic template) 5. Your coding prompt 6. Start now? (y/N)</p>"},{"location":"guides/ai-agent/#3-monitor-your-project","title":"3. Monitor Your Project","text":"<p>Monitor progress and manage your AI coding project:</p> <pre><code># Check all projects\ntfgrid-compose projects\n\n# Monitor specific project in real-time\ntfgrid-compose monitor my-project\n\n# View project logs\ntfgrid-compose logs my-project\n\n# View project summary\ntfgrid-compose summary my-project\n</code></pre>"},{"location":"guides/ai-agent/#4-manage-projects","title":"4. Manage Projects","text":"<p>Control your AI projects:</p> <pre><code># Run a stopped project\ntfgrid-compose run my-project\n\n# Stop a running project\ntfgrid-compose stop my-project\n\n# Stop all projects\ntfgrid-compose stopall\n\n# Remove a project\ntfgrid-compose remove my-project\n\n# Edit project configuration\ntfgrid-compose edit my-project\n</code></pre>"},{"location":"guides/ai-agent/#complete-workflow-example","title":"Complete Workflow Example","text":"<p>Here's the full workflow from installation to running your first AI project:</p> <pre><code># 1. Install TFGrid Compose\ncurl -sSL install.tfgrid.studio/install.sh | sh\n\n# 2. Login and configure credentials\ntfgrid-compose login\n\n# 3. Set up a shortcut (optional)\ntfgrid-compose shortcut tfc\n\n# 4. Explore available apps\ntfgrid-compose search\n\n# 5. Deploy the AI agent\ntfc up tfgrid-ai-agent\n\n# 6. Create your first project\ntfc create my-web-app\n\n# 7. Monitor progress\ntfc monitor my-web-app\n\n# 8. Check all projects\ntfc projects\n\n# 9. View results\ntfc summary my-web-app\n\n# 10. SSH to inspect files\ntfc ssh\ncd /home/developer/code/my-web-app\nls -la\n\n# 11. Stop when done\ntfc stop my-web-app\n\n# 12. Cleanup (optional)\ntfc down\n</code></pre>"},{"location":"guides/ai-agent/#app-registry-discovery","title":"App Registry &amp; Discovery","text":""},{"location":"guides/ai-agent/#exploring-available-apps","title":"Exploring Available Apps","text":"<p>TFGrid Studio maintains a registry of deployable applications at <code>registry.tfgrid.studio</code>:</p> <pre><code># List all available apps\ntfgrid-compose search\n\n# Search by keyword\ntfgrid-compose search ai\ntfgrid-compose search git\n\n# Search by tag\ntfgrid-compose search --tag development\ntfgrid-compose search --tag ai\n</code></pre>"},{"location":"guides/ai-agent/#current-official-apps","title":"Current Official Apps","text":"App Description Pattern Status <code>tfgrid-ai-agent</code> AI coding assistant with Qwen integration single-vm Production <code>tfgrid-gitea</code> Self-hosted Git service for AI agent repos single-vm Production"},{"location":"guides/ai-agent/#community-apps","title":"Community Apps","text":"<p>Community-contributed apps are reviewed and approved by the TFGrid Studio team:</p> <pre><code># Future community apps will appear here\n# Submit your app: https://github.com/tfgrid-studio/app-registry\n</code></pre>"},{"location":"guides/ai-agent/#complete-command-reference","title":"Complete Command Reference","text":""},{"location":"guides/ai-agent/#tfgrid-compose-core-commands","title":"TFGrid Compose Core Commands","text":"Command Description Example <code>search</code> Browse app registry <code>tfgrid-compose search ai</code> <code>up</code> Deploy app <code>tfgrid-compose up tfgrid-ai-agent</code> <code>down</code> Destroy deployment <code>tfgrid-compose down</code> <code>status</code> Check deployment status <code>tfgrid-compose status</code> <code>logs</code> View deployment logs <code>tfgrid-compose logs</code> <code>ssh</code> SSH into deployed VM <code>tfgrid-compose ssh</code> <code>exec</code> Execute command on VM <code>tfgrid-compose exec ls /opt</code> <code>list</code> Show deployed apps <code>tfgrid-compose list</code> <code>select</code> Set active app context <code>tfgrid-compose select tfgrid-ai-agent</code> <code>login</code> Configure credentials <code>tfgrid-compose login</code> <code>shortcut</code> Manage command shortcuts <code>tfgrid-compose shortcut tfc</code>"},{"location":"guides/ai-agent/#ai-agent-app-specific-commands","title":"AI Agent App-Specific Commands","text":"Command Description Context <code>create</code> Create new AI project App selected <code>run</code> Start agent loop App selected <code>stop</code> Stop agent loop App selected <code>projects</code> Show all projects App selected <code>monitor</code> Watch progress live App selected <code>logs</code> View project logs App selected <code>summary</code> Show project summary App selected <code>edit</code> Edit project config App selected <code>remove</code> Delete project App selected <code>stopall</code> Stop all projects App selected <p>Note: App-specific commands require selecting the AI agent app first: <code>tfgrid-compose select tfgrid-ai-agent</code></p>"},{"location":"guides/ai-agent/#project-selection-context","title":"Project Selection &amp; Context","text":"<p>The AI agent supports project-level context for streamlined command usage.</p>"},{"location":"guides/ai-agent/#two-level-context-system","title":"Two-Level Context System","text":"<pre><code>App Context (tfgrid-ai-agent)\n  \u2514\u2500\u2500 Project Context (my-project)\n</code></pre>"},{"location":"guides/ai-agent/#select-active-project","title":"Select Active Project","text":"<pre><code># Interactive selection (shows all projects with status)\ntfgrid-compose select-project\n\n# Direct selection\ntfgrid-compose select-project my-project\n</code></pre>"},{"location":"guides/ai-agent/#context-aware-commands","title":"Context-Aware Commands","text":"<p>Once a project is selected, commands use it automatically:</p> <pre><code># Select project once\ntfgrid-compose select-project frontend-app\n\n# All subsequent commands use selected project\ntfgrid-compose run        # Runs frontend-app\ntfgrid-compose logs       # Logs for frontend-app\ntfgrid-compose monitor    # Monitors frontend-app\ntfgrid-compose stop       # Stops frontend-app\n</code></pre>"},{"location":"guides/ai-agent/#override-context","title":"Override Context","text":"<p>Provide project name to override selection:</p> <pre><code># Context is set to frontend-app\ntfgrid-compose select-project frontend-app\n\n# But you can still run commands on other projects\ntfgrid-compose run backend-api     # Runs backend-api\ntfgrid-compose logs mobile-app     # Logs for mobile-app\n</code></pre>"},{"location":"guides/ai-agent/#clear-selection","title":"Clear Selection","text":"<pre><code># Clear project context\ntfgrid-compose unselect-project\n\n# Commands now require project name\ntfgrid-compose run          # Error: No project specified\ntfgrid-compose run my-app   # Works\n</code></pre>"},{"location":"guides/ai-agent/#workflows","title":"Workflows","text":""},{"location":"guides/ai-agent/#workflow-1-complete-setup-to-first-project","title":"Workflow 1: Complete Setup to First Project","text":"<pre><code># 1. Install and setup\ncurl -sSL install.tfgrid.studio/install.sh | sh\ntfgrid-compose login\ntfgrid-compose shortcut tfc\n\n# 2. Explore and deploy\ntfc search\ntfc up tfgrid-ai-agent\n\n# 3. Create and run project\ntfc create my-first-app\n# Interactive prompts guide you through setup\n\n# 4. Monitor and manage\ntfc monitor my-first-app\ntfc projects\ntfc summary my-first-app\n\n# 5. Access results\ntfc ssh\ncd /home/developer/code/my-first-app\nls -la\n\n# 6. Cleanup\ntfc stop my-first-app\ntfc down\n</code></pre>"},{"location":"guides/ai-agent/#workflow-2-multiple-concurrent-projects","title":"Workflow 2: Multiple Concurrent Projects","text":"<pre><code># Deploy AI agent once\ntfgrid-compose up tfgrid-ai-agent\n\n# Create multiple projects\ntfgrid-compose create frontend-app\ntfgrid-compose create backend-api\ntfgrid-compose create mobile-app\n\n# Run them all concurrently (each gets dedicated resources)\ntfgrid-compose run frontend-app &amp;\ntfgrid-compose run backend-api &amp;\ntfgrid-compose run mobile-app &amp;\n\n# Monitor all projects\ntfgrid-compose projects\n\n# Monitor specific project\ntfgrid-compose monitor frontend-app\n\n# Stop all when done\ntfgrid-compose stopall\n</code></pre>"},{"location":"guides/ai-agent/#workflow-3-multiple-projects-concurrent-execution","title":"Workflow 3: Multiple Projects (Concurrent Execution)","text":"<pre><code># Create several projects\ntfgrid-compose create frontend-app\ntfgrid-compose create backend-api\ntfgrid-compose create mobile-app\n\n# Run them all - executes concurrently via systemd\ntfgrid-compose run frontend-app\ntfgrid-compose run backend-api\ntfgrid-compose run mobile-app\n\n# All three projects run simultaneously\n# Each has isolated resources: 2GB memory, 150% CPU quota\n# Auto-restart on failure with 10s delay\n\n# Check status of all running projects\ntfgrid-compose projects\n\n# Monitor specific one\ntfgrid-compose monitor frontend-app\n\n# Stop all when done\ntfgrid-compose stopall\n</code></pre> <p>New Feature: Projects execute in parallel using systemd template services (<code>tfgrid-ai-project@{name}.service</code>). Each project runs in an isolated service instance with dedicated resource limits (2GB memory, 150% CPU quota) and automatic failure recovery. You can now run unlimited concurrent AI agents simultaneously.</p>"},{"location":"guides/ai-agent/#best-practices","title":"Best Practices","text":""},{"location":"guides/ai-agent/#1-clear-prompts","title":"1. Clear Prompts","text":"<p>Good: <pre><code>\"Create a REST API with Express.js and PostgreSQL for a todo app with authentication\"\n\"Refactor this code to use async/await and add error handling\"\n\"Generate API documentation with examples for all endpoints\"\n</code></pre></p> <p>Bad: <pre><code>\"Make it better\" (too vague)\n\"Build everything\" (too broad)\n\"Fix bugs\" (which bugs?)\n</code></pre></p>"},{"location":"guides/ai-agent/#2-time-constraints","title":"2. Time Constraints","text":"<pre><code># Short tasks\ntfgrid-compose create quick-fix\n# Duration: 30m\n\n# Medium projects\ntfgrid-compose create web-dashboard  \n# Duration: 2h\n\n# Long-running projects\ntfgrid-compose create full-refactor\n# Duration: indefinite\n</code></pre>"},{"location":"guides/ai-agent/#3-monitor-progress","title":"3. Monitor Progress","text":"<pre><code># Always monitor long-running tasks\ntfgrid-compose run big-project &amp;\ntfgrid-compose monitor big-project\n\n# Check all projects regularly\ntfgrid-compose projects\n</code></pre>"},{"location":"guides/ai-agent/#4-resource-management","title":"4. Resource Management","text":"<pre><code># Stop when not needed\ntfgrid-compose stopall\n\n# Remove completed projects\ntfgrid-compose remove old-project\n\n# Destroy VM when done\ntfgrid-compose down\n</code></pre>"},{"location":"guides/ai-agent/#configuration","title":"Configuration","text":""},{"location":"guides/ai-agent/#environment-variables","title":"Environment Variables","text":"<p>Set these on your local machine before deployment:</p> <pre><code># Required\nexport TF_VAR_mnemonic=$(cat ~/.config/threefold/mnemonic)\n\n# Optional\nexport QWEN_API_KEY='your-api-key'        # Qwen API key\nexport GITHUB_TOKEN='your-token'           # GitHub personal token\nexport GITEA_URL='https://gitea.example'   # Gitea URL\nexport GITEA_TOKEN='your-token'            # Gitea personal token\n</code></pre>"},{"location":"guides/ai-agent/#custom-resources","title":"Custom Resources","text":"<p>Edit <code>tfgrid-ai-agent/tfgrid-compose.yaml</code>:</p> <pre><code>resources:\n  cpu:\n    minimum: 2\n    recommended: 4     # Change this\n  memory:\n    minimum: 4096\n    recommended: 8192  # Change this\n  disk:\n    minimum: 50\n    recommended: 100   # Change this\n</code></pre> <p>Then redeploy: <pre><code>tfgrid-compose down &amp;&amp; tfgrid-compose up tfgrid-ai-agent\n</code></pre></p>"},{"location":"guides/ai-agent/#git-integration","title":"Git Integration","text":""},{"location":"guides/ai-agent/#setup-github","title":"Setup GitHub","text":"<pre><code># 1. Show SSH key (from VM)\ntfgrid-compose ssh\ncat ~/.ssh/id_rsa.pub\n\n# 2. Add to GitHub\n# Copy the key and add it to https://github.com/settings/keys\n\n# 3. Setup git remote in project\ntfgrid-compose ssh\ncd /home/developer/code/my-project\ngit remote add origin git@github.com:user/repo.git\ngit push -u origin main\n</code></pre>"},{"location":"guides/ai-agent/#setup-gitea","title":"Setup Gitea","text":"<pre><code># 1. Show SSH key (from VM)\ntfgrid-compose ssh\ncat ~/.ssh/id_rsa.pub\n\n# 2. Add to your Gitea instance\n# Go to Gitea \u2192 Settings \u2192 SSH Keys\n\n# 3. Setup git remote in project\ncd /home/developer/code/my-project\ngit remote add origin git@git.example.com:user/repo.git\ngit push -u origin main\n</code></pre>"},{"location":"guides/ai-agent/#manual-git-configuration","title":"Manual Git Configuration","text":"<pre><code># SSH into VM\ntfgrid-compose ssh\n\n# Configure git\ncd /home/developer/code/my-project\ngit remote add origin git@github.com:user/repo.git\ngit push -u origin main\n</code></pre>"},{"location":"guides/ai-agent/#monitoring-logs","title":"Monitoring &amp; Logs","text":""},{"location":"guides/ai-agent/#real-time-monitoring","title":"Real-time Monitoring","text":"<pre><code># Watch agent progress\ntfgrid-compose monitor my-project\n\n# View live logs\ntfgrid-compose logs my-project\n\n# View project summary\ntfgrid-compose summary my-project\n</code></pre>"},{"location":"guides/ai-agent/#ssh-access","title":"SSH Access","text":"<pre><code># SSH into VM\ntfgrid-compose ssh\n\n# Check running processes\nps aux | grep ai-agent\n\n# View project files\nls -la /home/developer/code/\n\n# Check system logs (per-project systemd services)\njournalctl -u tfgrid-ai-project@my-project.service -f\n</code></pre>"},{"location":"guides/ai-agent/#status-overview","title":"Status Overview","text":"<pre><code># All projects status\ntfgrid-compose projects\n\n# Deployment status\ntfgrid-compose status\n\n# Per-project service status on VM\ntfgrid-compose ssh\nsystemctl status tfgrid-ai-project@my-project.service\nsystemctl list-units 'tfgrid-ai-project@*'  # List all project services\n</code></pre>"},{"location":"guides/ai-agent/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/ai-agent/#agent-wont-start","title":"Agent Won't Start","text":"<pre><code># Check logs\ntfgrid-compose logs my-project\n\n# Check service status (per-project)\ntfgrid-compose ssh\nsystemctl status tfgrid-ai-project@my-project.service\njournalctl -u tfgrid-ai-project@my-project.service -n 50\n\n# Restart service if needed\nsystemctl restart tfgrid-ai-project@my-project.service\n</code></pre>"},{"location":"guides/ai-agent/#ssh-connection-issues","title":"SSH Connection Issues","text":"<pre><code># Check WireGuard\nsudo wg show\n\n# Test connectivity (get IP from status)\ntfgrid-compose status\nping -c 3 10.1.3.2  # Use your actual IP\n\n# Reconnect if needed\ntfgrid-compose ssh\n</code></pre>"},{"location":"guides/ai-agent/#out-of-disk-space","title":"Out of Disk Space","text":"<pre><code># SSH in and check\ntfgrid-compose ssh\ndf -h\n\n# Clean up old projects\ntfgrid-compose remove old-project-name\n\n# Or increase disk size (requires redeployment)\n# Edit app's tfgrid-compose.yaml \u2192 resources.disk\ntfgrid-compose down\ntfgrid-compose up tfgrid-ai-agent\n</code></pre>"},{"location":"guides/ai-agent/#performance-issues","title":"Performance Issues","text":"<pre><code># Check resource usage\ntfgrid-compose ssh\nhtop\n\n# Consider upgrading resources\n# Edit app's tfgrid-compose.yaml \u2192 resources (cpu/memory)\ntfgrid-compose down\ntfgrid-compose up tfgrid-ai-agent\n</code></pre>"},{"location":"guides/ai-agent/#best-practices_1","title":"Best Practices","text":""},{"location":"guides/ai-agent/#1-project-organization","title":"1. Project Organization","text":"<pre><code># Use descriptive names\nai-agent create webapp-dashboard  # Good\nai-agent create test1             # Bad\n\n# One project per goal\nai-agent create frontend-app\nai-agent create backend-api\n# Not: ai-agent create fullstack-everything\n</code></pre>"},{"location":"guides/ai-agent/#2-prompts","title":"2. Prompts","text":"<p>Good prompts:</p> <ul> <li>\"Create a REST API with Express.js and PostgreSQL for a todo app\"</li> <li>\"Refactor this code to use async/await instead of callbacks\"</li> <li>\"Add comprehensive error handling and logging\"</li> </ul> <p>Bad prompts:</p> <ul> <li>\"Make it better\" (too vague)</li> <li>\"Build everything\" (too broad)</li> <li>\"Fix bugs\" (which bugs?)</li> </ul>"},{"location":"guides/ai-agent/#3-monitoring","title":"3. Monitoring","text":"<pre><code># Always monitor long-running tasks\ntfgrid-compose run big-project &amp;\ntfgrid-compose monitor big-project\n</code></pre>"},{"location":"guides/ai-agent/#4-git-workflow","title":"4. Git Workflow","text":"<pre><code># Agent auto-commits to local git\n# Review before pushing\ntfgrid-compose ssh\ncd /home/developer/code/my-project\ngit log\ngit diff\ngit push origin main\n</code></pre>"},{"location":"guides/ai-agent/#5-resource-management","title":"5. Resource Management","text":"<pre><code># Stop projects when not needed\ntfgrid-compose stopall\n\n# Remove completed projects\ntfgrid-compose remove old-project\n\n# Destroy VM when not in use\ntfgrid-compose down\n</code></pre>"},{"location":"guides/ai-agent/#advanced-usage","title":"Advanced Usage","text":""},{"location":"guides/ai-agent/#multiple-projects","title":"Multiple Projects","text":"<pre><code># Create and run multiple projects\ntfgrid-compose create frontend\ntfgrid-compose create backend\ntfgrid-compose create docs\n\ntfgrid-compose run frontend &amp;\ntfgrid-compose run backend &amp;\ntfgrid-compose run docs &amp;\n\n# Monitor all\ntfgrid-compose projects\n</code></pre>"},{"location":"guides/ai-agent/#custom-automation-scripts","title":"Custom Automation Scripts","text":"<pre><code># Create local automation script\ncat &gt; ~/ai-agent-batch.sh &lt;&lt; 'EOF'\n#!/bin/bash\nfor project in \"$@\"; do\n  tfgrid-compose create \"$project\"\n  tfgrid-compose run \"$project\" &amp;\ndone\ntfgrid-compose projects\nEOF\n\nchmod +x ~/ai-agent-batch.sh\n\n# Use it\n~/ai-agent-batch.sh frontend backend docs\n</code></pre>"},{"location":"guides/ai-agent/#scheduled-runs","title":"Scheduled Runs","text":"<pre><code># SSH into VM and setup cron\ntfgrid-compose ssh\ncrontab -e\n\n# Add scheduled runs (runs on VM)\n0 2 * * * cd /opt/ai-agent &amp;&amp; ./scripts/run-project.sh nightly-refactor\n0 9 * * * cd /opt/ai-agent &amp;&amp; ./scripts/run-project.sh morning-docs\n</code></pre>"},{"location":"guides/ai-agent/#faq","title":"FAQ","text":"<p>Q: Can I run multiple agents simultaneously? A: Yes! Projects run concurrently using systemd template services. Each project has dedicated resources (2GB memory, 150% CPU quota) and automatic failure recovery. You can run unlimited concurrent AI agents, each working on different projects simultaneously. Use <code>tfgrid-compose projects</code> to view all running projects.</p> <p>Q: How much does it cost? A: Depends on ThreeFold Grid pricing. Typically $10-30/month for a 4CPU/8GB VM.</p> <p>Q: Can I access from multiple machines? A: Yes, deploy once and use <code>tfgrid-compose exec</code> from any machine with access.</p> <p>Q: What if my local machine disconnects? A: Agent keeps running on the VM. Reconnect anytime with <code>tfgrid-compose ssh</code>.</p> <p>Q: Can I use my own AI API keys? A: Yes, set <code>QWEN_API_KEY</code> before deployment or SSH in and configure.</p> <p>Q: How do I backup projects? A: SSH in and copy <code>/home/developer/code/</code> or use git push to remote.</p> <p>Q: Can I upgrade the agent version? A: Yes, <code>tfgrid-compose down</code> then deploy updated app from registry.</p>"},{"location":"guides/ai-agent/#next-steps","title":"Next Steps","text":"<ul> <li>Try it: Deploy and create your first project</li> <li>Explore: Test different prompts and workflows</li> <li>Share: Push your projects to GitHub/Gitea</li> <li>Scale: Deploy multiple instances for different teams</li> </ul> <p>Need help? </p> <ul> <li>Check logs: <code>tfgrid-compose logs &lt;project&gt;</code></li> <li>SSH debug: <code>tfgrid-compose ssh</code></li> <li>Community: https://forum.threefold.io</li> </ul> <p>Ready to code with AI on ThreeFold Grid! \ud83d\ude80</p>"},{"location":"guides/ai-gateway-stack/","title":"TFGrid AI Stack Guide","text":"<p>Complete AI-powered development environment with integrated Git hosting and live deployment.</p>"},{"location":"guides/ai-gateway-stack/#overview","title":"Overview","text":"<p>The AI Gateway Stack provides a seamless, end-to-end development experience on ThreeFold Grid. Deploy a complete environment where AI generates code, stores it in Git repositories, and serves live websites - all with a single command.</p> <p>Key Features:</p> <ul> <li>\ud83e\udd16 AI-Powered Development - Integrated tfgrid-ai-agent for code generation</li> <li>\ud83c\udfdd\ufe0f Isolated Environment - Secure, private VMs with no external access by default</li> <li>\ud83c\udf10 Optional Public Access - Gateway pattern for SSL-enabled public websites and Git UI</li> <li>\ud83d\udce6 Project Management - Create, manage, and deploy multiple projects concurrently</li> <li>\ud83d\udd12 Flexible Privacy - Private-only or public-facing deployments</li> <li>\u26a1 One-Command Setup - Deploy complete stack in under 10 minutes</li> </ul>"},{"location":"guides/ai-gateway-stack/#quick-start","title":"Quick Start","text":""},{"location":"guides/ai-gateway-stack/#prerequisites","title":"Prerequisites","text":"<ul> <li>TFGrid account with mnemonic configured</li> <li><code>tfgrid-compose</code> installed (available via app registry)</li> </ul>"},{"location":"guides/ai-gateway-stack/#option-1-private-development-environment","title":"Option 1: Private Development Environment","text":"<p>Deploy for personal development with internal access only:</p> <pre><code># Search for the stack in registry\ntfgrid-compose search tfgrid-ai-stack\n\n# Deploy private stack\ntfgrid-compose up tfgrid-ai-stack\n\n# Get access information\ntfgrid-compose launch\n</code></pre> <p>Access:</p> <ul> <li>AI Agent: <code>tfgrid-compose ssh ai-agent</code> (internal VM)</li> <li>Gitea: <code>http://10.x.x.x:3000</code> (internal IP via WireGuard)</li> </ul>"},{"location":"guides/ai-gateway-stack/#option-2-public-development-environment","title":"Option 2: Public Development Environment","text":"<p>Deploy with public access for collaboration and live websites:</p> <pre><code># Deploy with custom domain\ntfgrid-compose up tfgrid-ai-stack --domain example.com\n\n# Initialize admin access\ntfgrid-compose init\n</code></pre> <p>Access:</p> <ul> <li>AI Agent: <code>tfgrid-compose ssh ai-agent</code> (internal only)</li> <li>Gitea: <code>https://example.com/gitea</code> (public SSL)</li> <li>Projects: <code>https://example.com/project-name</code> (public SSL)</li> </ul>"},{"location":"guides/ai-gateway-stack/#usage","title":"Usage","text":""},{"location":"guides/ai-gateway-stack/#project-management","title":"Project Management","text":""},{"location":"guides/ai-gateway-stack/#create-a-new-project","title":"Create a New Project","text":"<pre><code># Select the AI agent app\ntfgrid-compose select ai-agent\n\n# Create project with AI\ntfgrid-compose create \"modern portfolio website\"\n\n# Output:\n# \u2705 Project 'portfolio' created\n# \ud83d\udcdd Repository: https://example.com/gitea/repos/portfolio\n# \ud83c\udf10 Live site: https://example.com/portfolio\n# \ud83e\udd16 AI Agent: Ready for development\n</code></pre>"},{"location":"guides/ai-gateway-stack/#list-projects","title":"List Projects","text":"<pre><code>tfgrid-compose projects\n\n# Output:\n# Projects:\n# - portfolio (https://example.com/portfolio) \u2192 https://example.com/gitea/repos/portfolio\n# - blog (https://example.com/blog) \u2192 https://example.com/gitea/repos/blog\n</code></pre>"},{"location":"guides/ai-gateway-stack/#run-ai-development-loop","title":"Run AI Development Loop","text":"<pre><code># Continue development on existing project\ntfgrid-compose run portfolio\n\n# Monitor AI agent progress\ntfgrid-compose monitor portfolio\n</code></pre>"},{"location":"guides/ai-gateway-stack/#update-existing-project","title":"Update Existing Project","text":"<pre><code># Modify project requirements\ntfgrid-compose update portfolio \"add contact form and dark mode\"\n</code></pre>"},{"location":"guides/ai-gateway-stack/#delete-project","title":"Delete Project","text":"<pre><code>tfgrid-compose delete portfolio\n# Removes from gateway, deletes Gitea repo, cleans up AI workspace\n</code></pre>"},{"location":"guides/ai-gateway-stack/#stack-management","title":"Stack Management","text":""},{"location":"guides/ai-gateway-stack/#check-status","title":"Check Status","text":"<pre><code>tfgrid-compose status tfgrid-ai-stack\n\n# Output:\n# tfgrid-ai-stack: running\n# \u251c\u2500\u2500 gateway: running (example.com)\n# \u251c\u2500\u2500 ai-agent: running (10.1.2.3)\n# \u2514\u2500\u2500 gitea: running (10.1.3.2)\n</code></pre>"},{"location":"guides/ai-gateway-stack/#access-components","title":"Access Components","text":"<pre><code># SSH to AI agent VM\ntfgrid-compose ssh ai-agent\n\n# SSH to Gitea VM\ntfgrid-compose ssh gitea\n\n# SSH to gateway VM\ntfgrid-compose ssh gateway\n</code></pre>"},{"location":"guides/ai-gateway-stack/#view-logs","title":"View Logs","text":"<pre><code># Stack-wide logs\ntfgrid-compose logs tfgrid-ai-stack\n\n# Component-specific logs\ntfgrid-compose logs ai-agent\ntfgrid-compose logs gitea\ntfgrid-compose logs gateway\n</code></pre>"},{"location":"guides/ai-gateway-stack/#stopstart-stack","title":"Stop/Start Stack","text":"<pre><code># Stop all components\ntfgrid-compose down tfgrid-ai-stack\n\n# Start all components\ntfgrid-compose up tfgrid-ai-stack\n</code></pre>"},{"location":"guides/ai-gateway-stack/#architecture","title":"Architecture","text":""},{"location":"guides/ai-gateway-stack/#vm-layout","title":"VM Layout","text":"<pre><code>tfgrid-ai-stack/\n\u251c\u2500\u2500 Gateway VM (Public IPv4 + SSL)\n\u2502   \u251c\u2500\u2500 Nginx reverse proxy\n\u2502   \u251c\u2500\u2500 SSL certificates (Let's Encrypt)\n\u2502   \u251c\u2500\u2500 Dynamic route management\n\u2502   \u2514\u2500\u2500 Static file serving (/var/www/)\n\u251c\u2500\u2500 AI Agent VM (Private networking)\n\u2502   \u251c\u2500\u2500 Node.js + Qwen CLI\n\u2502   \u251c\u2500\u2500 Project workspaces\n\u2502   \u251c\u2500\u2500 Git integration\n\u2502   \u2514\u2500\u2500 API clients\n\u2514\u2500\u2500 Gitea VM (Private networking)\n    \u251c\u2500\u2500 Git repositories\n    \u251c\u2500\u2500 Web UI (port 3000)\n    \u251c\u2500\u2500 REST API\n    \u2514\u2500\u2500 User management\n</code></pre>"},{"location":"guides/ai-gateway-stack/#networking","title":"Networking","text":"<p>Private Mode:</p> <ul> <li>All VMs on WireGuard/Mycelium private network</li> <li>No external IPv4 allocation</li> <li>Access via <code>tfgrid-compose ssh</code> only</li> </ul> <p>Public Mode:</p> <ul> <li>Gateway VM gets public IPv4</li> <li>SSL/TLS for all public access</li> <li>Gitea and projects proxied through gateway</li> <li>AI agent remains private</li> </ul>"},{"location":"guides/ai-gateway-stack/#security-model","title":"Security Model","text":"<ul> <li>AI Agent: Isolated VM, no external access</li> <li>Gitea: Private by default, optional public proxy</li> <li>Projects: Served via gateway with SSL</li> <li>APIs: Token-based authentication between components</li> <li>Data: All user data on private VMs</li> </ul>"},{"location":"guides/ai-gateway-stack/#configuration","title":"Configuration","text":""},{"location":"guides/ai-gateway-stack/#environment-variables","title":"Environment Variables","text":"<p>Set before deployment:</p> <pre><code># Gitea configuration\nexport GITEA_ADMIN_USER=myadmin\nexport GITEA_ADMIN_PASSWORD=securepass123\nexport GITEA_ADMIN_EMAIL=admin@example.com\n\n# AI Agent configuration\nexport QWEN_API_KEY=your_qwen_key\nexport GIT_USER_NAME=\"Your Name\"\nexport GIT_USER_EMAIL=\"you@example.com\"\n\n# Deploy\ntfgrid-compose up tfgrid-ai-stack --domain example.com\n</code></pre>"},{"location":"guides/ai-gateway-stack/#resource-allocation","title":"Resource Allocation","text":"<p>Default resources (customizable in <code>tfgrid-compose.yaml</code>):</p> <pre><code>resources:\n  gateway:\n    cpu: 2\n    memory: 4096  # 4GB\n    disk: 50      # 50GB\n  ai-agent:\n    cpu: 4\n    memory: 8192  # 8GB\n    disk: 100     # 100GB\n  gitea:\n    cpu: 2\n    memory: 4096  # 4GB\n    disk: 100     # 100GB\n</code></pre>"},{"location":"guides/ai-gateway-stack/#how-it-works","title":"How It Works","text":""},{"location":"guides/ai-gateway-stack/#project-creation-flow","title":"Project Creation Flow","text":"<ol> <li> <p>AI Code Generation</p> </li> <li> <p>AI agent analyzes requirements</p> </li> <li>Generates complete project code</li> <li> <p>Tests and validates locally</p> </li> <li> <p>Git Repository Setup</p> </li> <li> <p>Creates repository in Gitea via API</p> </li> <li>Initializes with generated code</li> <li> <p>Sets up proper Git configuration</p> </li> <li> <p>Live Deployment</p> </li> <li> <p>Copies code to gateway <code>/var/www/project-name/</code></p> </li> <li>Adds Nginx location block dynamically</li> <li> <p>Reloads configuration without downtime</p> </li> <li> <p>Access Provisioning</p> </li> <li> <p>Returns repository URL for code access</p> </li> <li>Returns live site URL for viewing</li> <li>Updates project registry</li> </ol>"},{"location":"guides/ai-gateway-stack/#concurrent-projects","title":"Concurrent Projects","text":"<ul> <li>Multiple projects can run simultaneously</li> <li>Each project gets isolated workspace</li> <li>Resources shared efficiently across VMs</li> <li>Independent deployment and management</li> </ul>"},{"location":"guides/ai-gateway-stack/#security-considerations","title":"Security Considerations","text":""},{"location":"guides/ai-gateway-stack/#private-mode-recommended-for-development","title":"Private Mode (Recommended for Development)","text":"<ul> <li>No external exposure</li> <li>All access via secure WireGuard tunnels</li> <li>Perfect for personal projects and testing</li> </ul>"},{"location":"guides/ai-gateway-stack/#public-mode-for-collaboration","title":"Public Mode (For Collaboration)","text":"<ul> <li>SSL/TLS encryption for all public access</li> <li>Gitea authentication required for repository access</li> <li>Projects served over HTTPS</li> <li>Gateway VM is the only public-facing component</li> </ul>"},{"location":"guides/ai-gateway-stack/#best-practices","title":"Best Practices","text":"<ul> <li>Change default Gitea credentials immediately</li> <li>Use strong passwords and API tokens</li> <li>Enable 2FA on Gitea accounts</li> <li>Regular backups of project data</li> <li>Monitor resource usage and costs</li> </ul>"},{"location":"guides/ai-gateway-stack/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/ai-gateway-stack/#deployment-issues","title":"Deployment Issues","text":"<p>Stack deployment fails: <pre><code># Check prerequisites\ntfgrid-compose doctor\n\n# View detailed logs\ntfgrid-compose logs tfgrid-ai-stack --verbose\n\n# Retry deployment\ntfgrid-compose up tfgrid-ai-stack --force\n</code></pre></p> <p>Component not accessible: <pre><code># Check component status\ntfgrid-compose status ai-agent\n\n# Restart component\ntfgrid-compose restart ai-agent\n\n# Check networking\ntfgrid-compose exec ai-agent ping gitea\n</code></pre></p>"},{"location":"guides/ai-gateway-stack/#project-creation-issues","title":"Project Creation Issues","text":"<p>AI generation fails: <pre><code># Check AI agent logs\ntfgrid-compose logs ai-agent\n\n# Verify Qwen API key\ntfgrid-compose exec ai-agent env | grep QWEN\n\n# Restart AI agent\ntfgrid-compose restart ai-agent\n</code></pre></p> <p>Git push fails: <pre><code># Check Gitea connectivity\ntfgrid-compose exec ai-agent curl http://gitea:3000\n\n# Verify API token\ntfgrid-compose exec ai-agent cat ~/.gitea_token\n\n# Check repository permissions\ntfgrid-compose ssh gitea\nsudo -u git gitea admin user list\n</code></pre></p>"},{"location":"guides/ai-gateway-stack/#public-access-issues","title":"Public Access Issues","text":"<p>SSL certificate fails: <pre><code># Check domain DNS\nnslookup example.com\n\n# Verify gateway configuration\ntfgrid-compose ssh gateway\ncat /etc/nginx/sites-available/default\n\n# Renew certificates\ntfgrid-compose exec gateway certbot renew\n</code></pre></p> <p>Gitea not accessible: <pre><code># Check gateway proxy configuration\ntfgrid-compose ssh gateway\ncat /etc/nginx/conf.d/gitea.conf\n\n# Test local Gitea access\ntfgrid-compose exec gitea curl localhost:3000\n\n# Reload nginx\ntfgrid-compose exec gateway nginx -t &amp;&amp; nginx -s reload\n</code></pre></p>"},{"location":"guides/ai-gateway-stack/#advanced-usage","title":"Advanced Usage","text":""},{"location":"guides/ai-gateway-stack/#custom-project-templates","title":"Custom Project Templates","text":"<p>Create project templates for consistent development:</p> <pre><code># Create template directory\ntfgrid-compose ssh ai-agent\nmkdir -p /opt/ai-agent/templates/react-app\n\n# Add template files\n# ... customize template ...\n\n# Use template\ntfgrid-compose create \"React dashboard\" --template react-app\n</code></pre>"},{"location":"guides/ai-gateway-stack/#api-integration","title":"API Integration","text":"<p>Access stack APIs for automation:</p> <pre><code># Gateway route management\ncurl -H \"Authorization: Bearer $GATEWAY_TOKEN\" \\\n  https://example.com/api/routes\n\n# Gitea repository API\ncurl -H \"Authorization: token $GITEA_TOKEN\" \\\n  https://example.com/gitea/api/v1/user/repos\n\n# AI agent project API\ntfgrid-compose exec ai-agent curl localhost:8080/api/projects\n</code></pre>"},{"location":"guides/ai-gateway-stack/#backup-and-restore","title":"Backup and Restore","text":"<pre><code># Backup entire stack\ntfgrid-compose backup tfgrid-ai-stack\n\n# Backup specific component\ntfgrid-compose backup ai-agent\ntfgrid-compose backup gitea\n\n# Restore from backup\ntfgrid-compose restore tfgrid-ai-stack backup-20251021.tar.gz\n</code></pre>"},{"location":"guides/ai-gateway-stack/#examples","title":"Examples","text":""},{"location":"guides/ai-gateway-stack/#personal-blog","title":"Personal Blog","text":"<pre><code>tfgrid-compose up tfgrid-ai-stack --domain myblog.com\ntfgrid-compose create \"personal blog with markdown support\"\n# Access: https://myblog.com/blog and https://myblog.com/gitea\n</code></pre>"},{"location":"guides/ai-gateway-stack/#team-development-platform","title":"Team Development Platform","text":"<pre><code>tfgrid-compose up tfgrid-ai-stack --domain dev.team.com\ntfgrid-compose create \"project management dashboard\"\ntfgrid-compose create \"API backend\"\ntfgrid-compose create \"mobile app frontend\"\n# Multiple projects accessible via sub-paths\n</code></pre>"},{"location":"guides/ai-gateway-stack/#learning-environment","title":"Learning Environment","text":"<pre><code>tfgrid-compose up tfgrid-ai-stack  # Private mode\ntfgrid-compose create \"React tutorial project\"\ntfgrid-compose create \"Node.js API example\"\n# Safe learning environment with full Git history\n</code></pre>"},{"location":"guides/ai-gateway-stack/#related-documentation","title":"Related Documentation","text":"<ul> <li>TFGrid Compose CLI Reference</li> <li>AI Agent Guide</li> <li>Gitea Integration Guide</li> <li>Gateway Pattern Documentation</li> <li>Security Best Practices</li> </ul>"},{"location":"guides/ai-gateway-stack/#support","title":"Support","text":"<ul> <li>Documentation: docs.tfgrid.studio</li> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> <li>Community: [Discord/Forum links]</li> </ul> <p>AI Gateway Stack v0.12.0 - Complete AI-powered development platform on ThreeFold Grid.</p>"},{"location":"guides/app-registry/","title":"App Registry","text":"<p>The TFGrid App Registry catalogs official and verified community applications that can be deployed using <code>tfgrid-compose</code>. Applications listed here are discoverable at registry.tfgrid.studio and can be deployed with a simple command:</p> <pre><code># Deploy official app (v0.13.4+)\ntfgrid-compose up tfgrid-ai-agent\n\n# Deploy community app\ntfgrid-compose up username/app-name\n\n# Deploy from any git URL\ntfgrid-compose up https://gitlab.com/org/app\n</code></pre>"},{"location":"guides/app-registry/#how-it-works","title":"How It Works","text":""},{"location":"guides/app-registry/#for-users","title":"For Users","text":"<ol> <li>Browse Apps: Visit registry.tfgrid.studio</li> <li>Deploy: Run <code>tfgrid-compose up &lt;app-name&gt;</code> (v0.10.0+)</li> <li>Done: App is automatically cloned and deployed</li> </ol> <p>No configuration needed - apps include their own <code>tfgrid-compose.yaml</code>.</p>"},{"location":"guides/app-registry/#for-developers","title":"For Developers","text":"<p>Apps in the registry:</p> <ul> <li>Include <code>tfgrid-compose.yaml</code> in their repository</li> <li>Follow app guidelines</li> <li>Can be submitted for verification via PR</li> </ul>"},{"location":"guides/app-registry/#official-apps","title":"Official Apps","text":"<p>Maintained by TFGrid Studio:</p>"},{"location":"guides/app-registry/#tfgrid-ai-agent","title":"tfgrid-ai-agent","text":"<p>AI coding agent with Qwen integration and loop technique for safe AI development.</p> <pre><code>tfgrid-compose up tfgrid-ai-agent\n</code></pre> <p>Details: - Pattern: single-vm - Version: v0.3.0 - Status: Production Ready - Repo: tfgrid-studio/tfgrid-ai-agent - Docs: AI Agent Guide - Requirements: 4 CPU, 8GB RAM, 100GB disk</p>"},{"location":"guides/app-registry/#tfgrid-gitea","title":"tfgrid-gitea","text":"<p>Self-hosted Git service with web interface - perfect for AI agent repositories.</p> <pre><code>tfgrid-compose up tfgrid-gitea\n</code></pre> <p>Details: - Pattern: single-vm - Version: v1.0.0 - Status: Production Ready - Repo: tfgrid-studio/tfgrid-gitea - Docs: Gitea Guide - Requirements: 2 CPU, 4GB RAM, 50GB disk</p>"},{"location":"guides/app-registry/#community-apps","title":"Community Apps","text":"<p>Community-contributed apps that have passed verification:</p> <p>Ready to share your app? Submit it for verification! See Submission Guidelines \u2192</p>"},{"location":"guides/app-registry/#using-apps","title":"Using Apps","text":""},{"location":"guides/app-registry/#deploy-official-app","title":"Deploy Official App","text":"<pre><code># Deploy with auto-generated name\ntfgrid-compose up tfgrid-ai-agent\n# \u2192 Deployment name: tfgrid-ai-agent\n\n# Deploy with custom name (if supported)\ntfgrid-compose up tfgrid-ai-agent --name=my-agent\n# \u2192 Deployment name: my-agent\n</code></pre>"},{"location":"guides/app-registry/#search-and-discover-apps","title":"Search and Discover Apps","text":"<pre><code># List all available apps\ntfgrid-compose search\n\n# Search by keyword\ntfgrid-compose search ai\ntfgrid-compose search git\n\n# Search by tag\ntfgrid-compose search --tag development\ntfgrid-compose search --tag ai\n</code></pre>"},{"location":"guides/app-registry/#deploy-community-app-unverified","title":"Deploy Community App (Unverified)","text":"<pre><code># From GitHub\ntfgrid-compose up username/repo-name\n\n# From any git URL\ntfgrid-compose up https://gitlab.com/org/app\n</code></pre> <p>\u26a0\ufe0f Security Note: Always review code before deploying unverified apps!</p>"},{"location":"guides/app-registry/#get-app-information","title":"Get App Information","text":"<pre><code># Get detailed app information\ntfgrid-compose info tfgrid-ai-agent\n\n# View app manifest and requirements\n# Shows: version, resources, patterns, documentation\n</code></pre>"},{"location":"guides/app-registry/#manage-cached-apps","title":"Manage Cached Apps","text":"<pre><code># Pull/update app\ntfgrid-compose pull tfgrid-ai-agent\n\n# List cached apps\ntfgrid-compose cache\n\n# Clean unused apps\ntfgrid-compose prune\n</code></pre>"},{"location":"guides/app-registry/#app-structure","title":"App Structure","text":"<p>All apps must include <code>tfgrid-compose.yaml</code>:</p> <pre><code>name: my-app\nversion: 1.0.0\ndescription: My application\n\npatterns:\n  recommended: single-vm\n\nresources:\n  cpu:\n    recommended: 4\n  memory:\n    recommended: 8192\n  disk:\n    recommended: 100\n\nhooks:\n  setup: deployment/setup.sh\n  configure: deployment/configure.sh\n  healthcheck: deployment/healthcheck.sh\n</code></pre> <p>See App Manifest Reference for full specification.</p>"},{"location":"guides/app-registry/#registry-structure","title":"Registry Structure","text":"<p>Apps are organized by verification status:</p>"},{"location":"guides/app-registry/#official-apps_1","title":"Official Apps","text":"<ul> <li>\u2705 Maintained by TFGrid Studio team</li> <li>\u2705 Full support and documentation</li> <li>\u2705 Production-ready and tested</li> <li>\u2705 Regular security updates</li> <li>\u2705 Example: <code>tfgrid-ai-agent</code>, <code>tfgrid-gitea</code></li> </ul>"},{"location":"guides/app-registry/#community-apps-future","title":"Community Apps (Future)","text":"<ul> <li>\u2705 Community-contributed and maintained</li> <li>\u2705 Code reviewed by TFGrid Studio team</li> <li>\u2705 Security checked and approved</li> <li>\u2705 Documentation verified</li> <li>\u2705 Listed in registry with \"Community\" badge</li> </ul>"},{"location":"guides/app-registry/#unverified-apps","title":"Unverified Apps","text":"<ul> <li>\u26a0\ufe0f Any public GitHub/GitLab repository</li> <li>\u26a0\ufe0f Use at your own risk</li> <li>\u26a0\ufe0f Not listed in official registry</li> <li>\u26a0\ufe0f Deploy via direct URL: <code>tfgrid-compose up https://github.com/user/repo</code></li> </ul>"},{"location":"guides/app-registry/#submitting-your-app","title":"Submitting Your App","text":"<p>Want to share your app with the community?</p> <ol> <li>Develop Your App</li> <li>Include <code>tfgrid-compose.yaml</code></li> <li>Add deployment scripts</li> <li> <p>Write comprehensive README</p> </li> <li> <p>Test Locally <pre><code>tfgrid-compose up ./my-app\n</code></pre></p> </li> <li> <p>Submit for Verification</p> </li> <li>Fork tfgrid-studio/app-registry</li> <li>Add your app to <code>registry/verified/community.yaml</code></li> <li> <p>Create pull request</p> </li> <li> <p>Review Process</p> </li> <li>Code review (~3 days)</li> <li>Security check</li> <li>Testing</li> <li> <p>Documentation review</p> </li> <li> <p>Approved!</p> </li> <li>Merged to registry</li> <li>Appears in <code>tfgrid-compose search</code></li> <li>Listed on registry.tfgrid.studio</li> </ol> <p>Full Guide: How to Submit \u2192</p>"},{"location":"guides/app-registry/#app-cache-location","title":"App Cache Location","text":"<p>Apps are cached locally:</p> <pre><code>~/.config/tfgrid-compose/\n\u251c\u2500\u2500 apps/                    # Cached app repositories\n\u2502   \u251c\u2500\u2500 tfgrid-ai-agent/\n\u2502   \u2514\u2500\u2500 other-apps/\n\u251c\u2500\u2500 deployments/             # Your deployments\n\u2514\u2500\u2500 registry.yaml            # Cached registry\n</code></pre>"},{"location":"guides/app-registry/#version-pinning","title":"Version Pinning","text":"<p>Pin apps to specific versions:</p> <pre><code># Latest version (default)\ntfgrid-compose up tfgrid-ai-agent\n\n# Specific version\ntfgrid-compose up tfgrid-ai-agent:v0.9.0\n\n# Specific branch\ntfgrid-compose up tfgrid-ai-agent:develop\n</code></pre>"},{"location":"guides/app-registry/#registry-api","title":"Registry API","text":"<p>For automation and integrations:</p> <pre><code># JSON API\ncurl https://registry.tfgrid.studio/api/apps.json\n\n# YAML API\ncurl https://registry.tfgrid.studio/api/apps.yaml\n\n# App details\ncurl https://registry.tfgrid.studio/api/apps/tfgrid-ai-agent.json\n</code></pre>"},{"location":"guides/app-registry/#security","title":"Security","text":""},{"location":"guides/app-registry/#official-apps_2","title":"Official Apps","text":"<ul> <li>\u2705 Audited by TFGrid Studio</li> <li>\u2705 Regular security updates</li> <li>\u2705 Full support</li> </ul>"},{"location":"guides/app-registry/#verified-apps","title":"Verified Apps","text":"<ul> <li>\u2705 Code reviewed</li> <li>\u2705 Security checked</li> <li>\u2705 No hardcoded secrets</li> <li>\u2705 Documentation verified</li> </ul>"},{"location":"guides/app-registry/#unverified-apps_1","title":"Unverified Apps","text":"<ul> <li>\u26a0\ufe0f Use at your own risk</li> <li>\u26a0\ufe0f Review code before deploying</li> <li>\u26a0\ufe0f Check for secrets/malicious code</li> </ul> <p>Best Practice: Always inspect app code before deployment:</p> <pre><code># Clone and inspect\ngit clone https://github.com/username/app\ncd app\n# Review code, check for secrets\nless deployment/setup.sh\n\n# Deploy if satisfied\ntfgrid-compose up ./app\n</code></pre>"},{"location":"guides/app-registry/#resources","title":"Resources","text":"<ul> <li>Registry Website: registry.tfgrid.studio \u2705 Live</li> <li>Registry Data: tfgrid-studio/app-registry</li> <li>Submit Your App: Submission Guide</li> <li>App Manifest: Manifest Reference</li> </ul> <p>Registry Status: \u2705 Active (v0.13.4 CLI integration complete) Browse Apps Now: registry.tfgrid.studio Official Apps: 2 (tfgrid-ai-agent v0.3.0, tfgrid-gitea v1.0.0) Community Apps: Coming soon - submit yours!</p>"},{"location":"guides/getting-started-workflow/","title":"Complete Getting Started Workflow","text":"<p>This guide provides a comprehensive overview of the complete user journey for TFGrid Compose, from first installation to productive AI-assisted development on ThreeFold Grid.</p>"},{"location":"guides/getting-started-workflow/#user-journey-overview","title":"User Journey Overview","text":"<pre><code>1. Install \u2192 2. Login \u2192 3. Shortcuts \u2192 4. Registry \u2192 5. Deploy \u2192 6. Use \u2192 7. Scale\n</code></pre> <p>Each step builds on the previous, creating a smooth onboarding experience.</p>"},{"location":"guides/getting-started-workflow/#phase-1-installation-setup","title":"Phase 1: Installation &amp; Setup","text":""},{"location":"guides/getting-started-workflow/#step-1-one-command-installation","title":"Step 1: One-Command Installation","text":"<pre><code># Install everything needed\ncurl -sSL install.tfgrid.studio/install.sh | sh\n</code></pre> <p>What happens: - Downloads TFGrid Compose CLI (v0.13.4) - Installs to <code>~/.local/bin/tfgrid-compose</code> - Adds to PATH automatically - Creates default <code>tfgrid</code> shortcut - Sets up configuration directories</p> <p>Verification: <pre><code>tfgrid-compose --version  # TFGrid Compose v0.13.4\ntfgrid --help            # Works via shortcut\n</code></pre></p>"},{"location":"guides/getting-started-workflow/#step-2-interactive-login","title":"Step 2: Interactive Login","text":"<pre><code># Configure all credentials interactively\ntfgrid-compose login\n</code></pre> <p>Configuration collected: - ThreeFold Mnemonic: 12/24-word seed phrase (secure input) - Git Identity: Name and email for commits - Optional Tokens: GitHub/Gitea for private repos</p> <p>Security features: - Hidden input for sensitive data - Validation of mnemonic format - Secure file permissions (600) - Encrypted storage in <code>~/.config/tfgrid-compose/credentials.yaml</code></p>"},{"location":"guides/getting-started-workflow/#step-3-command-shortcuts","title":"Step 3: Command Shortcuts","text":"<pre><code># Create convenient shortcuts\ntfgrid-compose shortcut tfc\ntfgrid-compose shortcut grid\n</code></pre> <p>Benefits: - Shorter commands (<code>tfc up</code> vs <code>tfgrid-compose up</code>) - Custom naming (<code>grid</code>, <code>tfc</code>, etc.) - Multiple shortcuts allowed - Easy management (<code>--list</code>, <code>--remove</code>)</p>"},{"location":"guides/getting-started-workflow/#phase-2-discovery-exploration","title":"Phase 2: Discovery &amp; Exploration","text":""},{"location":"guides/getting-started-workflow/#step-4-app-registry-exploration","title":"Step 4: App Registry Exploration","text":"<pre><code># Discover available applications\ntfgrid-compose search        # List all apps\ntfgrid-compose search ai     # Search by keyword\ntfgrid-compose search --tag development  # Search by tag\n</code></pre> <p>Current registry contents: - tfgrid-ai-agent (v0.3.0): AI coding assistant - tfgrid-gitea (v1.0.0): Self-hosted Git service</p> <p>Registry features: - Cached locally (1-hour TTL) - Search by name, description, tags - Version information and requirements - Direct deployment from registry</p>"},{"location":"guides/getting-started-workflow/#step-5-app-information-selection","title":"Step 5: App Information &amp; Selection","text":"<pre><code># Get detailed app information\ntfgrid-compose info tfgrid-ai-agent\n</code></pre> <p>Information provided: - Version and status - Resource requirements (CPU, RAM, disk) - Supported patterns - Documentation links - Repository information</p>"},{"location":"guides/getting-started-workflow/#phase-3-deployment-usage","title":"Phase 3: Deployment &amp; Usage","text":""},{"location":"guides/getting-started-workflow/#step-6-first-deployment","title":"Step 6: First Deployment","text":"<pre><code># Deploy AI agent from registry\ntfgrid-compose up tfgrid-ai-agent\n</code></pre> <p>Complete deployment flow: 1. \u2705 Validate prerequisites (mnemonic, tools) 2. \u2705 Download app from registry/cache 3. \u2705 Provision ThreeFold Grid VM (4 CPU, 8GB RAM, 100GB disk) 4. \u2705 Configure WireGuard networking 5. \u2705 Run Ansible playbooks for setup 6. \u2705 Install dependencies (Node.js, Qwen CLI) 7. \u2705 Configure systemd services 8. \u2705 Health checks and verification</p> <p>Time: 2-3 minutes Cost: Pay-as-you-go on ThreeFold Grid</p>"},{"location":"guides/getting-started-workflow/#step-7-basic-usage","title":"Step 7: Basic Usage","text":"<pre><code># Verify deployment\ntfgrid-compose status\n\n# Access the VM\ntfgrid-compose ssh\n\n# View logs\ntfgrid-compose logs\n</code></pre>"},{"location":"guides/getting-started-workflow/#phase-4-ai-agent-workflow","title":"Phase 4: AI Agent Workflow","text":""},{"location":"guides/getting-started-workflow/#step-8-create-ai-project","title":"Step 8: Create AI Project","text":"<pre><code># Create first AI coding project\ntfgrid-compose create my-website\n</code></pre> <p>Interactive workflow: 1. Project Name: Auto-suggested or custom 2. Duration: 30m, 1h, 2h, indefinite 3. Git Config: Auto-detected from login 4. Prompt Type: Custom prompt or template 5. Coding Prompt: User's specific requirements 6. Start Now: Immediate execution option</p>"},{"location":"guides/getting-started-workflow/#step-9-monitor-ai-development","title":"Step 9: Monitor AI Development","text":"<pre><code># Real-time monitoring\ntfgrid-compose monitor my-website\n\n# Project overview\ntfgrid-compose projects\n\n# Detailed status\ntfgrid-compose summary my-website\n</code></pre> <p>AI Agent features: - Qwen CLI integration with yolo mode - Git commits after each successful iteration - Time management and safety constraints - Concurrent project execution - Systemd service management with auto-restart</p>"},{"location":"guides/getting-started-workflow/#step-10-access-results","title":"Step 10: Access Results","text":"<pre><code># SSH to inspect generated code\ntfgrid-compose ssh\ncd /home/developer/code/my-website\nls -la\ncat README.md\ngit log --oneline\n</code></pre>"},{"location":"guides/getting-started-workflow/#phase-5-scaling-integration","title":"Phase 5: Scaling &amp; Integration","text":""},{"location":"guides/getting-started-workflow/#step-11-deploy-additional-services","title":"Step 11: Deploy Additional Services","text":"<pre><code># Deploy Gitea for code storage\ntfgrid-compose up tfgrid-gitea\n\n# List all deployments\ntfgrid-compose list\n</code></pre>"},{"location":"guides/getting-started-workflow/#step-12-multi-app-workflows","title":"Step 12: Multi-App Workflows","text":"<pre><code># Run multiple AI projects concurrently\ntfgrid-compose create frontend-app\ntfgrid-compose create backend-api\ntfgrid-compose create docs\n\n# Start all projects\ntfgrid-compose run frontend-app &amp;\ntfgrid-compose run backend-api &amp;\ntfgrid-compose run docs &amp;\n\n# Monitor everything\ntfgrid-compose projects\n</code></pre> <p>Concurrent execution: - Each project runs in isolated systemd service - Dedicated resource limits (2GB memory, 150% CPU quota) - Automatic failure recovery - Independent git repositories</p>"},{"location":"guides/getting-started-workflow/#step-13-integration-workflows","title":"Step 13: Integration Workflows","text":"<p>AI Agent + Gitea Integration: <pre><code># Configure git remote in AI projects\ntfgrid-compose ssh tfgrid-ai-agent\ncd /home/developer/code/my-project\ngit remote add origin http://gitea-vm-ip:3000/gitadmin/my-project.git\ngit push -u origin main\n</code></pre></p>"},{"location":"guides/getting-started-workflow/#phase-6-management-cleanup","title":"Phase 6: Management &amp; Cleanup","text":""},{"location":"guides/getting-started-workflow/#step-14-resource-management","title":"Step 14: Resource Management","text":"<pre><code># Stop specific projects\ntfgrid-compose stop my-website\n\n# Stop all running projects\ntfgrid-compose stopall\n\n# Check resource usage\ntfgrid-compose status\n</code></pre>"},{"location":"guides/getting-started-workflow/#step-15-cleanup","title":"Step 15: Cleanup","text":"<pre><code># Destroy deployments when done\ntfgrid-compose down tfgrid-ai-agent\ntfgrid-compose down tfgrid-gitea\n\n# Clean local cache (optional)\ntfgrid-compose prune\n</code></pre>"},{"location":"guides/getting-started-workflow/#complete-workflow-summary","title":"Complete Workflow Summary","text":""},{"location":"guides/getting-started-workflow/#quick-start-5-minutes","title":"Quick Start (5 minutes)","text":"<pre><code># 1. Install\ncurl -sSL install.tfgrid.studio/install.sh | sh\n\n# 2. Configure\ntfgrid-compose login\ntfgrid-compose shortcut tfc\n\n# 3. Deploy &amp; Use\ntfc search\ntfc up tfgrid-ai-agent\ntfc create my-project\ntfc monitor my-project\n</code></pre>"},{"location":"guides/getting-started-workflow/#full-development-stack-15-minutes","title":"Full Development Stack (15 minutes)","text":"<pre><code># Install &amp; setup\ncurl -sSL install.tfgrid.studio/install.sh | sh\ntfgrid-compose login\ntfgrid-compose shortcut tfc\n\n# Deploy services\ntfc up tfgrid-ai-agent\ntfc up tfgrid-gitea\n\n# Create projects\ntfc create frontend\ntfc create backend\ntfc create docs\n\n# Run concurrently\ntfc run frontend &amp;\ntfc run backend &amp;\ntfc run docs &amp;\n\n# Monitor all\ntfc projects\n</code></pre>"},{"location":"guides/getting-started-workflow/#workflow-diagrams","title":"Workflow Diagrams","text":""},{"location":"guides/getting-started-workflow/#basic-user-journey","title":"Basic User Journey","text":"<pre><code>Install CLI \u2192 Login \u2192 Set Shortcuts \u2192 Search Registry \u2192 Deploy App \u2192 Create Project \u2192 Monitor \u2192 Access Code\n</code></pre>"},{"location":"guides/getting-started-workflow/#ai-development-workflow","title":"AI Development Workflow","text":"<pre><code>User Prompt \u2192 AI Agent VM \u2192 Qwen CLI \u2192 Code Generation \u2192 Git Commit \u2192 User Review \u2192 Iterate/Deploy\n</code></pre>"},{"location":"guides/getting-started-workflow/#multi-app-architecture","title":"Multi-App Architecture","text":"<pre><code>User Machine\n\u251c\u2500\u2500 tfgrid-compose CLI\n\u2514\u2500\u2500 Multiple ThreeFold VMs\n    \u251c\u2500\u2500 AI Agent VM (Projects: frontend, backend, docs)\n    \u251c\u2500\u2500 Gitea VM (Repositories)\n    \u2514\u2500\u2500 Future: Database VM, Web Server VM\n</code></pre>"},{"location":"guides/getting-started-workflow/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"guides/getting-started-workflow/#installation-issues","title":"Installation Issues","text":"<pre><code># Check prerequisites\ncurl --version &amp;&amp; git --version &amp;&amp; make --version\n\n# Reinstall\ncurl -sSL install.tfgrid.studio/install.sh | sh\n</code></pre>"},{"location":"guides/getting-started-workflow/#login-problems","title":"Login Problems","text":"<pre><code># Validate credentials\ntfgrid-compose login --check\n\n# Reconfigure\ntfgrid-compose login\n</code></pre>"},{"location":"guides/getting-started-workflow/#deployment-failures","title":"Deployment Failures","text":"<pre><code># Check logs\ntfgrid-compose logs\n\n# Clean and retry\ntfgrid-compose down\ntfgrid-compose up tfgrid-ai-agent\n</code></pre>"},{"location":"guides/getting-started-workflow/#network-issues","title":"Network Issues","text":"<pre><code># Check WireGuard\nsudo wg show\n\n# Restart networking\ntfgrid-compose exec sudo systemctl restart wg-quick@wg0\n</code></pre>"},{"location":"guides/getting-started-workflow/#next-steps-resources","title":"Next Steps &amp; Resources","text":""},{"location":"guides/getting-started-workflow/#continue-learning","title":"Continue Learning","text":"<ul> <li>AI Agent Guide - Deep dive into AI development</li> <li>Gitea Guide - Self-hosted Git workflows</li> <li>App Registry - Discover more applications</li> <li>CLI Reference - Complete command reference</li> </ul>"},{"location":"guides/getting-started-workflow/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Pattern Documentation - Gateway and K3s patterns</li> <li>Custom Apps - Build your own deployable apps</li> <li>Security Best Practices - Production deployments</li> </ul>"},{"location":"guides/getting-started-workflow/#community-support","title":"Community &amp; Support","text":"<ul> <li>GitHub: tfgrid-studio</li> <li>Discussions: Community forum</li> <li>Issues: Bug reports</li> </ul> <p>Complete workflow mastered! \ud83d\ude80 You're now equipped to deploy, manage, and scale applications on ThreeFold Grid with AI assistance.</p>"},{"location":"guides/gitea/","title":"TFGrid Gitea Guide","text":"<p>Self-hosted Git service with web interface - perfect for AI agent repositories and team collaboration.</p>"},{"location":"guides/gitea/#overview","title":"Overview","text":"<p>TFGrid Gitea (v0.1.0) provides a lightweight, self-hosted Git service similar to GitHub but running on your ThreeFold Grid infrastructure. Ideal for storing code generated by tfgrid-ai-agent, private repositories, and team collaboration.</p> <p>Status: \u2705 Production Ready</p>"},{"location":"guides/gitea/#features","title":"Features","text":"<ul> <li>\ud83d\udd12 Self-hosted - Your code, your infrastructure, full control</li> <li>\ud83c\udf10 Web Interface - GitHub-like UI for browsing repos and managing projects</li> <li>\ud83d\udd11 User Management - Multiple users, organizations, and teams</li> <li>\ud83d\udcdd Issues &amp; PRs - Built-in issue tracking and pull requests</li> <li>\ud83d\udd17 API Access - Full RESTful API for automation</li> <li>\ud83e\udeb6 Lightweight - Runs efficiently on 2 cores, 4GB RAM</li> <li>\ud83d\udd10 Secure - Keep your code private on decentralized infrastructure</li> <li>\u26a1 Auto-configured - Admin user created automatically during deployment</li> <li>\ud83c\udf0d Dual Network - Access via WireGuard (private) or Mycelium (P2P)</li> </ul>"},{"location":"guides/gitea/#quick-deployment","title":"Quick Deployment","text":""},{"location":"guides/gitea/#option-1-standalone-deployment","title":"Option 1: Standalone Deployment","text":"<pre><code># Deploy Gitea on single VM\ntfgrid-compose up tfgrid-gitea\n\n# Get access URLs and credentials\ntfgrid-compose launch tfgrid-gitea\n\n# Access displayed URLs automatically:\n# \ud83d\udd17 WireGuard:  http://10.1.3.2:3000\n# \ud83d\udd17 Mycelium:   http://[ipv6:address]:3000\n</code></pre> <p>What happens during deployment: 1. \u2705 VM provisioned on ThreeFold Grid 2. \u2705 WireGuard &amp; Mycelium networking configured 3. \u2705 Gitea 1.24.6 installed 4. \u2705 SQLite database initialized 5. \u2705 Admin user <code>gitadmin</code> created automatically 6. \u2705 Service started and verified 7. \u2705 Environment variables set for easy access</p> <p>Total deployment time: ~2-3 minutes</p>"},{"location":"guides/gitea/#option-2-with-gateway-recommended","title":"Option 2: With Gateway (Recommended)","text":"<p>Deploy Gitea behind a gateway for SSL and custom domain:</p> <pre><code># Deploy with gateway pattern\ntfgrid-compose up tfgrid-gitea --pattern gateway --domain example.com\n\n# Select and configure\ntfgrid-compose select tfgrid-gitea\ntfgrid-compose init\ntfgrid-compose launch\n\n# Access at: https://example.com/gitea\n</code></pre>"},{"location":"guides/gitea/#option-3-full-ai-dev-stack","title":"Option 3: Full AI Dev Stack","text":"<p>Deploy AI agent + Gateway + Gitea together:</p> <pre><code># Complete integrated workflow\ntfgrid-compose up tfgrid-ai-stack --domain example.com\n\n# Access:\n# - example.com/gitea \u2192 Gitea UI\n# - example.com/website1 \u2192 AI-generated sites\n</code></pre>"},{"location":"guides/gitea/#default-credentials","title":"Default Credentials","text":"<p>Admin user automatically created during deployment:</p> <ul> <li>Username: <code>gitadmin</code></li> <li>Password: <code>changeme123</code></li> <li>Email: <code>admin@localhost</code></li> </ul> <p>\u26a0\ufe0f CRITICAL SECURITY: Change the password immediately after first login!</p>"},{"location":"guides/gitea/#custom-admin-credentials","title":"Custom Admin Credentials","text":"<p>Set environment variables before deployment:</p> <pre><code>export GITEA_ADMIN_USER=myadmin\nexport GITEA_ADMIN_PASSWORD=SecurePass123!\nexport GITEA_ADMIN_EMAIL=admin@example.com\n\ntfgrid-compose up tfgrid-gitea\n</code></pre>"},{"location":"guides/gitea/#changing-admin-password","title":"Changing Admin Password","text":"<p>Via Web Interface: 1. Login to Gitea 2. Click your avatar (top right) \u2192 Settings 3. Account \u2192 Change Password 4. Enter old password and new password 5. Save changes</p> <p>Via CLI: <pre><code>tfgrid-compose ssh tfgrid-gitea\nsudo -u gitea /usr/local/bin/gitea admin user change-password \\\n  --username gitadmin \\\n  --password YourNewPassword \\\n  --config /etc/gitea/app.ini\n</code></pre></p>"},{"location":"guides/gitea/#using-with-ai-agent","title":"Using with AI Agent","text":"<p>Perfect companion for tfgrid-ai-agent - automatically store generated code in Gitea:</p>"},{"location":"guides/gitea/#enhanced-repository-management","title":"Enhanced Repository Management","text":"<p>Use the new app-specific commands for easy repository management:</p> <pre><code># Select Gitea app for shorter commands\ntfgrid-compose select tfgrid-gitea\n\n# Create repositories easily\ntfgrid-compose create-repo my-website --description \"AI-generated website\"\ntfgrid-compose create-repo api-backend --private --description \"Backend API\"\n\n# List all repositories\ntfgrid-compose list-repos\n\n# Clone repositories\ntfgrid-compose clone-repo my-website\n\n# Push code from AI agent\ntfgrid-compose push-code my-website /path/to/ai/generated/code\n</code></pre>"},{"location":"guides/gitea/#setup-git-remote-manual","title":"Setup Git Remote (Manual)","text":"<pre><code># SSH to AI agent VM\ntfgrid-compose ssh tfgrid-ai-stack --vm ai-agent\n\n# Configure git\ngit config --global user.name \"AI Agent\"\ngit config --global user.email \"ai@example.com\"\n\n# Create and push project\ncd /home/developer/code\nmkdir my-website &amp;&amp; cd my-website\ngit init\ngit remote add origin http://example.com/gitea/gitadmin/my-website.git\ngit add .\ngit commit -m \"Initial commit\"\ngit push -u origin main\n</code></pre>"},{"location":"guides/gitea/#automated-workflow","title":"Automated Workflow","text":"<p>Coming in v0.11.0 - AI agent automatically: 1. Creates code 2. Pushes to Gitea (example.com/gitea/repos/projectname) 3. Deploys to gateway (example.com/projectname) 4. Complete visibility of all changes</p>"},{"location":"guides/gitea/#api-usage","title":"API Usage","text":"<p>Gitea provides a full RESTful API for automation:</p>"},{"location":"guides/gitea/#generate-api-token","title":"Generate API Token","text":"<ol> <li>Login to Gitea</li> <li>Settings \u2192 Applications</li> <li>Generate New Token</li> <li>Copy token (shown only once!)</li> </ol>"},{"location":"guides/gitea/#api-examples","title":"API Examples","text":"<pre><code># Create repository\ncurl -X POST \"http://example.com/gitea/api/v1/user/repos\" \\\n  -H \"Authorization: token YOUR_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\":\"new-repo\",\"description\":\"My new repository\",\"private\":false}'\n\n# List repositories\ncurl \"http://example.com/gitea/api/v1/user/repos\" \\\n  -H \"Authorization: token YOUR_TOKEN\"\n\n# Get repository info\ncurl \"http://example.com/gitea/api/v1/repos/gitadmin/my-repo\" \\\n  -H \"Authorization: token YOUR_TOKEN\"\n\n# Create issue\ncurl -X POST \"http://example.com/gitea/api/v1/repos/gitadmin/my-repo/issues\" \\\n  -H \"Authorization: token YOUR_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"title\":\"Bug found\",\"body\":\"Description of the bug\"}'\n</code></pre> <p>Full API docs available at: <code>http://your-gitea/api/swagger</code></p>"},{"location":"guides/gitea/#configuration","title":"Configuration","text":""},{"location":"guides/gitea/#automatic-configuration","title":"Automatic Configuration","text":"<p>Gitea is pre-configured during deployment with:</p> <ul> <li>\u2705 SQLite database (no external DB needed)</li> <li>\u2705 HTTP server on port 3000</li> <li>\u2705 Admin user created automatically</li> <li>\u2705 Registration enabled (first user after admin becomes regular user)</li> <li>\u2705 ROOT_URL auto-detected from available IPs</li> <li>\u2705 Secure secrets generated automatically</li> </ul>"},{"location":"guides/gitea/#environment-variables","title":"Environment Variables","text":"<p>TFGrid environment variables are automatically available in Gitea scripts:</p> <pre><code># Access from any Gitea script\necho $TFGRID_APP_NAME        # \"tfgrid-gitea\"\necho $TFGRID_WIREGUARD_IP    # \"10.1.3.2\"\necho $TFGRID_MYCELIUM_IP     # \"ipv6:address\"\necho $TFGRID_VM_IP           # Primary IP\n</code></pre>"},{"location":"guides/gitea/#custom-admin-user","title":"Custom Admin User","text":"<p>Set before deployment to override defaults:</p> <pre><code>export GITEA_ADMIN_USER=myadmin\nexport GITEA_ADMIN_PASSWORD=SecurePass123!\nexport GITEA_ADMIN_EMAIL=admin@example.com\n\ntfgrid-compose up tfgrid-gitea\n</code></pre>"},{"location":"guides/gitea/#resource-requirements","title":"Resource Requirements","text":"<p>Minimum: - 2 CPU cores - 2 GB RAM - 25 GB disk</p> <p>Recommended: - 2 CPU cores - 4 GB RAM - 50 GB disk (for multiple large repos)</p>"},{"location":"guides/gitea/#gateway-integration","title":"Gateway Integration","text":"<p>When deployed with the gateway pattern, Gitea is automatically proxied:</p> <pre><code># Gateway automatically configures nginx:\nlocation /gitea/ {\n    proxy_pass http://gitea-vm:3000/;\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n}\n</code></pre> <p>Benefits: - SSL/TLS encryption via Let's Encrypt - Custom domain support - No port specification needed - Professional URL: <code>https://example.com/gitea</code></p>"},{"location":"guides/gitea/#user-management","title":"User Management","text":""},{"location":"guides/gitea/#creating-users","title":"Creating Users","text":"<p>Via tfgrid-compose commands (Recommended): <pre><code># Select Gitea app first\ntfgrid-compose select tfgrid-gitea\n\n# Create regular user\ntfgrid-compose create-user developer dev@example.com\n\n# Create admin user\ntfgrid-compose create-user admin admin@example.com --admin\n\n# List all users\ntfgrid-compose list-users\n\n# Reset password\ntfgrid-compose reset-password developer\n</code></pre></p> <p>Via Web UI: 1. Login as admin 2. Site Administration \u2192 User Accounts 3. Create New Account 4. Fill in details and save</p> <p>Via CLI (Legacy): <pre><code># SSH to Gitea VM\ntfgrid-compose ssh tfgrid-gitea\n\n# Create user\nsu - git -c \"gitea admin user create \\\n  --username newuser \\\n  --password secretpass \\\n  --email user@example.com \\\n  --config /etc/gitea/app.ini\"\n</code></pre></p>"},{"location":"guides/gitea/#organizations","title":"Organizations","text":"<ol> <li>Click + icon \u2192 New Organization</li> <li>Fill in organization details</li> <li>Add members and set permissions</li> <li>Create repos under organization</li> </ol>"},{"location":"guides/gitea/#backup-restore","title":"Backup &amp; Restore","text":""},{"location":"guides/gitea/#enhanced-backup-commands","title":"Enhanced Backup Commands","text":"<pre><code># Select Gitea app\ntfgrid-compose select tfgrid-gitea\n\n# Create backup with timestamp\ntfgrid-compose backup\n\n# Create named backup\ntfgrid-compose backup my-backup-2025\n\n# List available backups\ntfgrid-compose exec ls -la /opt/gitea/backups/\n</code></pre>"},{"location":"guides/gitea/#manual-backup","title":"Manual Backup","text":"<pre><code># SSH to Gitea VM\ntfgrid-compose ssh tfgrid-gitea\n\n# Create backup\nsudo tar -czf /tmp/gitea-backup-$(date +%Y%m%d).tar.gz \\\n  /var/lib/gitea/data \\\n  /etc/gitea\n\n# Download backup\nexit\nscp root@&lt;gitea-ip&gt;:/tmp/gitea-backup-*.tar.gz ./\n</code></pre>"},{"location":"guides/gitea/#restore","title":"Restore","text":"<pre><code># Upload backup to new VM\nscp gitea-backup-*.tar.gz root@&lt;new-gitea-ip&gt;:/tmp/\n\n# Restore using command\ntfgrid-compose restore tfgrid-gitea /tmp/gitea-backup-20251021.tar.gz\n\n# Or manually:\ntfgrid-compose ssh tfgrid-gitea\n\n# Stop service\nsudo systemctl stop gitea\n\n# Restore\nsudo tar -xzf /tmp/gitea-backup-*.tar.gz -C /\n\n# Fix permissions\nsudo chown -R git:git /var/lib/gitea\nsudo chown -R git:git /etc/gitea\n\n# Start service\nsudo systemctl start gitea\n</code></pre>"},{"location":"guides/gitea/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/gitea/#service-not-starting","title":"Service Not Starting","text":"<pre><code># Check service status\nsystemctl status gitea\n\n# View logs\njournalctl -u gitea -f\n\n# Check configuration\nsudo -u git /usr/local/bin/gitea doctor --config /etc/gitea/app.ini\n\n# Restart service\nsystemctl restart gitea\n</code></pre>"},{"location":"guides/gitea/#cant-access-web-interface","title":"Can't Access Web Interface","text":"<pre><code># Check if port is listening\nnetstat -tuln | grep 3000\n\n# Test local connection\ncurl http://localhost:3000\n\n# Check firewall (if using standalone)\nufw status\nufw allow 3000/tcp\n</code></pre>"},{"location":"guides/gitea/#database-issues","title":"Database Issues","text":"<pre><code># Check database file\nls -lh /var/lib/gitea/data/gitea.db\n\n# Check permissions\nls -ld /var/lib/gitea/data\n# Should be owned by git:git\n\n# Repair if needed\nsudo -u git sqlite3 /var/lib/gitea/data/gitea.db \"PRAGMA integrity_check;\"\n</code></pre>"},{"location":"guides/gitea/#performance-issues","title":"Performance Issues","text":"<p>For large repositories:</p> <ol> <li> <p>Increase resources in tfgrid-compose.yaml: <pre><code>resources:\n  cpu: 4\n  memory: 8192\n  disk: 100\n</code></pre></p> </li> <li> <p>Redeploy: <pre><code>tfgrid-compose down tfgrid-gitea\ntfgrid-compose up tfgrid-gitea\n</code></pre></p> </li> </ol>"},{"location":"guides/gitea/#security-best-practices","title":"Security Best Practices","text":""},{"location":"guides/gitea/#essential-security-steps","title":"Essential Security Steps","text":"<ol> <li>Change default password immediately</li> <li>Enable 2FA (Settings \u2192 Security \u2192 Two-Factor Authentication)</li> <li>Use strong passwords for all accounts</li> <li>Disable registration if not needed (app.ini: <code>DISABLE_REGISTRATION = true</code>)</li> <li>Regular backups of /var/lib/gitea/data</li> <li>Keep updated - monitor Gitea releases</li> </ol>"},{"location":"guides/gitea/#ssltls","title":"SSL/TLS","text":"<p>Always deploy behind a gateway with SSL in production:</p> <pre><code>tfgrid-compose up tfgrid-gitea --pattern gateway --domain example.com\n</code></pre> <p>This provides: - \u2705 Free Let's Encrypt SSL certificates - \u2705 Automatic HTTPS redirect - \u2705 Certificate auto-renewal</p>"},{"location":"guides/gitea/#advanced-usage","title":"Advanced Usage","text":""},{"location":"guides/gitea/#webhooks","title":"Webhooks","text":"<p>Configure webhooks to trigger actions on push:</p> <ol> <li>Repository \u2192 Settings \u2192 Webhooks</li> <li>Add Webhook</li> <li>Set URL (e.g., https://example.com/deploy-hook)</li> <li>Select events (push, pull request, etc.)</li> <li>Save</li> </ol> <p>Use case: Auto-deploy to gateway when AI agent pushes code.</p>"},{"location":"guides/gitea/#git-lfs","title":"Git LFS","text":"<p>For large files (&gt;100MB):</p> <pre><code># Install git-lfs on client\ngit lfs install\n\n# Track large files\ngit lfs track \"*.psd\"\ngit lfs track \"*.zip\"\n\n# Commit and push as normal\ngit add .\ngit commit -m \"Add large files\"\ngit push\n</code></pre>"},{"location":"guides/gitea/#mirror-repositories","title":"Mirror Repositories","text":"<p>Mirror external repos to Gitea:</p> <ol> <li>New Migration \u2192 GitHub/GitLab/etc.</li> <li>Enter source URL</li> <li>Configure mirror settings</li> <li>Gitea will sync automatically</li> </ol>"},{"location":"guides/gitea/#app-specific-commands","title":"App-Specific Commands","text":"<p>tfgrid-gitea provides command-line management through tfgrid-compose. Commands defined in the manifest but not all are implemented yet.</p>"},{"location":"guides/gitea/#launch-access-fully-implemented","title":"Launch &amp; Access (\u2705 Fully Implemented)","text":"<pre><code># Get access URLs with automatic IP detection\ntfgrid-compose launch tfgrid-gitea\n\n# Output shows:\n# \ud83d\udd17 WireGuard:  http://10.1.3.2:3000\n# \ud83d\udd17 Mycelium:   http://[ipv6:addr]:3000\n# \ud83d\udd11 Default login: gitadmin / changeme123\n</code></pre> <p>Features: - \u2705 Automatically sources TFGrid environment variables - \u2705 Detects WireGuard IP from system or environment - \u2705 Detects Mycelium IPv6 address - \u2705 Falls back to interface detection if vars not set - \u2705 Shows default credentials</p>"},{"location":"guides/gitea/#status-monitoring-implemented","title":"Status Monitoring (\u2705 Implemented)","text":"<pre><code># Check deployment status\ntfgrid-compose status tfgrid-gitea\n\n# SSH access\ntfgrid-compose ssh tfgrid-gitea\n\n# View logs\ntfgrid-compose logs tfgrid-gitea\n</code></pre>"},{"location":"guides/gitea/#repository-management-planned","title":"Repository Management (\ud83d\udccb Planned)","text":"<pre><code># Future commands (defined in manifest):\ntfgrid-compose create-repo my-project --description \"My project\"\ntfgrid-compose list-repos\ntfgrid-compose clone-repo my-project\ntfgrid-compose delete-repo old-project --confirm\n</code></pre> <p>Status: Command hooks defined, implementation pending</p>"},{"location":"guides/gitea/#user-management-planned","title":"User Management (\ud83d\udccb Planned)","text":"<pre><code># Future commands (defined in manifest):\ntfgrid-compose create-user developer dev@example.com\ntfgrid-compose list-users\ntfgrid-compose reset-password developer\n</code></pre> <p>Status: Command hooks defined, implementation pending</p>"},{"location":"guides/gitea/#backup-restore-planned","title":"Backup &amp; Restore (\ud83d\udccb Planned)","text":"<pre><code># Future commands (defined in manifest):\ntfgrid-compose backup tfgrid-gitea\ntfgrid-compose restore tfgrid-gitea backup-file.tar.gz\n</code></pre> <p>Status: Command hooks defined, implementation pending</p>"},{"location":"guides/gitea/#current-workarounds","title":"Current Workarounds","text":"<p>Until commands are implemented, use direct access:</p> <pre><code># SSH and use Gitea CLI directly\ntfgrid-compose ssh tfgrid-gitea\n\n# Create user\nsudo -u gitea /usr/local/bin/gitea admin user create \\\n  --username newuser \\\n  --email user@example.com \\\n  --password userpass \\\n  --config /etc/gitea/app.ini\n\n# List users\nsudo -u gitea /usr/local/bin/gitea admin user list \\\n  --config /etc/gitea/app.ini\n</code></pre>"},{"location":"guides/gitea/#next-steps","title":"Next Steps","text":"<ul> <li>AI Agent Guide - Use AI agent with Gitea</li> <li>Gateway Pattern - Deploy with SSL</li> <li>App Registry - Explore more apps</li> <li>Gitea Official Docs - Full Gitea documentation</li> </ul>"},{"location":"guides/gitea/#support","title":"Support","text":"<ul> <li>TFGrid Docs: https://docs.tfgrid.studio</li> <li>Gitea Docs: https://docs.gitea.com</li> <li>GitHub Issues: https://github.com/tfgrid-studio/tfgrid-gitea/issues</li> <li>Discussions: https://github.com/orgs/tfgrid-studio/discussions</li> </ul> <p>Made with \ud83d\udd25 for decentralized development</p>"},{"location":"patterns/gateway/","title":"Gateway Pattern","text":"<p>Multi-VM with public access and SSL for production web apps</p> <p>The gateway pattern deploys a multi-VM architecture with a reverse proxy gateway that provides public IPv4 access, automatic SSL/TLS certificates, and load balancing for your backend services.</p>"},{"location":"patterns/gateway/#overview","title":"Overview","text":"<pre><code>Internet \u2192 [Gateway VM] \u2192 [Backend VMs]\n        (Public IPv4)   (Private Network)\n        (SSL/TLS)       (Your App + DB)\n</code></pre> <p>Perfect For: - Production websites &amp; web apps - E-commerce sites - SaaS applications - Anything needing public HTTPS access</p>"},{"location":"patterns/gateway/#quick-start","title":"Quick Start","text":"<pre><code>tfgrid-compose up my-saas --pattern=gateway --domain=myapp.com\n</code></pre> <p>Deploy time: 5-7 minutes Cost: $30-100/month</p>"},{"location":"patterns/gateway/#features","title":"Features","text":"<ul> <li>\ud83d\udd12 Free SSL certificates - Automatic Let's Encrypt SSL/TLS</li> <li>\ud83c\udf10 Public IPv4 included - Direct internet access</li> <li>\u2696\ufe0f Load balancing - Distribute traffic across backends</li> <li>\u2764\ufe0f Health checks - Automatic failover for reliability</li> <li>\ud83d\udd04 Reverse proxy - Nginx-based gateway with custom configs</li> <li>\ud83d\udee1\ufe0f Private backend network - Backends only accessible via gateway</li> </ul>"},{"location":"patterns/gateway/#example-deployment","title":"Example Deployment","text":"<p>Deploy a SaaS application with SSL:</p> <pre><code>$ tfgrid-compose up my-saas --pattern=gateway --domain=myapp.com\n\n\u2728 Live with SSL in 5 minutes!\n</code></pre> <p>The gateway pattern will: 1. Create a gateway VM with public IPv4 2. Deploy your backend application VMs 3. Configure reverse proxy and SSL 4. Set up health checks and load balancing</p>"},{"location":"patterns/gateway/#architecture","title":"Architecture","text":""},{"location":"patterns/gateway/#gateway-vm","title":"Gateway VM","text":"<ul> <li>Public IPv4 address</li> <li>Nginx reverse proxy</li> <li>Let's Encrypt SSL automation</li> <li>Load balancer</li> <li>Health check monitoring</li> </ul>"},{"location":"patterns/gateway/#backend-vms","title":"Backend VMs","text":"<ul> <li>Private network only</li> <li>Your application code</li> <li>Database services</li> <li>Internal APIs</li> </ul>"},{"location":"patterns/gateway/#network-flow","title":"Network Flow","text":"<pre><code>User \u2192 Public IP \u2192 Gateway VM \u2192 WireGuard/Mycelium \u2192 Backend VMs\n</code></pre>"},{"location":"patterns/gateway/#configuration","title":"Configuration","text":"<p>Example <code>tfgrid-compose.yaml</code> for gateway pattern:</p> <pre><code>name: my-webapp\npattern: gateway\n\ngateway:\n  domain: myapp.com\n  ssl: true\n\nbackends:\n  - name: app\n    cpu: 2\n    memory: 4096\n    port: 3000\n\n  - name: db\n    cpu: 2\n    memory: 8192\n    private: true\n</code></pre>"},{"location":"patterns/gateway/#use-cases","title":"Use Cases","text":""},{"location":"patterns/gateway/#production-web-apps","title":"Production Web Apps","text":"<p>Deploy full-stack web applications with SSL:</p> <pre><code>tfgrid-compose up my-webapp --pattern=gateway --domain=example.com\n</code></pre>"},{"location":"patterns/gateway/#e-commerce-sites","title":"E-commerce Sites","text":"<p>Run online stores with secure payments:</p> <pre><code>tfgrid-compose up my-store --pattern=gateway --domain=store.com\n</code></pre>"},{"location":"patterns/gateway/#saas-applications","title":"SaaS Applications","text":"<p>Launch multi-tenant SaaS products:</p> <pre><code>tfgrid-compose up my-saas --pattern=gateway --domain=app.mycompany.com\n</code></pre>"},{"location":"patterns/gateway/#ssltls-configuration","title":"SSL/TLS Configuration","text":"<p>The gateway pattern automatically handles SSL certificate:</p> <ol> <li>Automatic issuance - Let's Encrypt certificates on deployment</li> <li>Auto-renewal - Certificates renew automatically</li> <li>HTTPS redirect - HTTP traffic automatically redirects to HTTPS</li> <li>Modern security - TLS 1.2+ with strong cipher suites</li> </ol>"},{"location":"patterns/gateway/#load-balancing","title":"Load Balancing","text":"<p>When you deploy multiple backend instances:</p> <pre><code>backends:\n  - name: app-1\n    port: 3000\n  - name: app-2\n    port: 3000\n  - name: app-3\n    port: 3000\n</code></pre> <p>The gateway automatically: - Distributes traffic across all instances - Performs health checks - Routes traffic away from unhealthy instances - Provides zero-downtime deployments</p>"},{"location":"patterns/gateway/#full-documentation","title":"Full Documentation","text":"<p>For complete implementation details, see the gateway pattern source.</p>"},{"location":"patterns/gateway/#next-steps","title":"Next Steps","text":"<ul> <li>Deploy your first gateway app</li> <li>Learn about Single-VM pattern for simpler deployments</li> <li>Explore K3s pattern for cloud-native applications</li> </ul>"},{"location":"patterns/k3s/","title":"K3s Pattern","text":"<p>Full Kubernetes cluster for cloud-native applications</p> <p>The k3s pattern deploys a complete Kubernetes cluster using K3s (lightweight Kubernetes) with management tools, load balancing, and ingress controllers pre-configured.</p>"},{"location":"patterns/k3s/#overview","title":"Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  K3s Kubernetes Cluster      \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  Management Node       \u2502  \u2502\n\u2502  \u2502  (kubectl, helm, k9s)  \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  Control + Workers     \u2502  \u2502\n\u2502  \u2502  (MetalLB + Ingress)   \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Perfect For: - Cloud-native applications - Microservices architectures - Enterprise deployments - Production SaaS at scale</p>"},{"location":"patterns/k3s/#quick-start","title":"Quick Start","text":"<pre><code>tfgrid-compose up my-cluster --pattern=k3s\n</code></pre> <p>Deploy time: 10-15 minutes Cost: $100-500/month</p>"},{"location":"patterns/k3s/#features","title":"Features","text":"<ul> <li>\u2638\ufe0f Full Kubernetes cluster - Production-ready K3s deployment</li> <li>\u2696\ufe0f MetalLB load balancer - Built-in load balancing for services</li> <li>\ud83c\udf10 Nginx Ingress - HTTP/HTTPS routing to your applications</li> <li>\ud83d\udcc8 Auto-scaling - Horizontal pod autoscaling ready</li> <li>\ud83d\udee1\ufe0f HA control plane - High availability for production</li> <li>\ud83d\udd27 Management tools - kubectl, helm, k9s pre-installed</li> <li>\ud83d\udce6 Persistent storage - StatefulSets and persistent volumes supported</li> </ul>"},{"location":"patterns/k3s/#example-deployment","title":"Example Deployment","text":"<p>Deploy a Kubernetes cluster:</p> <pre><code>$ tfgrid-compose up my-cluster --pattern=k3s\n\n\u2728 Kubernetes ready in 10 minutes!\n</code></pre> <p>Access your cluster:</p> <pre><code>$ tfgrid-compose ssh my-cluster\n# Now you have kubectl, helm, and k9s available\nkubectl get nodes\n</code></pre>"},{"location":"patterns/k3s/#architecture","title":"Architecture","text":""},{"location":"patterns/k3s/#management-node","title":"Management Node","text":"<ul> <li>SSH access point</li> <li>kubectl configured and ready</li> <li>helm package manager</li> <li>k9s TUI for cluster management</li> <li>Direct access to cluster API</li> </ul>"},{"location":"patterns/k3s/#control-plane-nodes","title":"Control Plane Node(s)","text":"<ul> <li>K3s server (control plane)</li> <li>etcd datastore</li> <li>API server</li> <li>Scheduler and controller manager</li> </ul>"},{"location":"patterns/k3s/#worker-nodes","title":"Worker Nodes","text":"<ul> <li>K3s agent</li> <li>Container runtime</li> <li>Pod networking</li> <li>Storage provisioning</li> </ul>"},{"location":"patterns/k3s/#network-components","title":"Network Components","text":"<ul> <li>MetalLB - Layer 2/BGP load balancer</li> <li>Nginx Ingress - HTTP/HTTPS routing</li> <li>Calico/Flannel - Pod networking</li> <li>WireGuard - Secure node communication</li> </ul>"},{"location":"patterns/k3s/#configuration","title":"Configuration","text":"<p>Example <code>tfgrid-compose.yaml</code> for k3s pattern:</p> <pre><code>name: my-cluster\npattern: k3s\n\ncluster:\n  control_nodes: 1  # or 3 for HA\n  worker_nodes: 3\n\nnodes:\n  control:\n    cpu: 4\n    memory: 8192\n    storage: 100\n\n  worker:\n    cpu: 4\n    memory: 16384\n    storage: 200\n\nfeatures:\n  metallb: true\n  ingress: true\n  monitoring: true\n</code></pre>"},{"location":"patterns/k3s/#use-cases","title":"Use Cases","text":""},{"location":"patterns/k3s/#microservices-architecture","title":"Microservices Architecture","text":"<p>Deploy and orchestrate microservices:</p> <pre><code>tfgrid-compose up my-services --pattern=k3s\n# Then deploy your microservices via kubectl/helm\n</code></pre>"},{"location":"patterns/k3s/#cloud-native-saas","title":"Cloud-Native SaaS","text":"<p>Run production SaaS at scale:</p> <pre><code>tfgrid-compose up prod-saas --pattern=k3s\n</code></pre>"},{"location":"patterns/k3s/#multi-tenant-applications","title":"Multi-Tenant Applications","text":"<p>Deploy applications with tenant isolation:</p> <pre><code>tfgrid-compose up multi-tenant --pattern=k3s\n</code></pre>"},{"location":"patterns/k3s/#cicd-platforms","title":"CI/CD Platforms","text":"<p>Run Jenkins, GitLab, or other CI/CD tools:</p> <pre><code>tfgrid-compose up cicd-cluster --pattern=k3s\n</code></pre>"},{"location":"patterns/k3s/#kubernetes-features","title":"Kubernetes Features","text":""},{"location":"patterns/k3s/#deployments","title":"Deployments","text":"<p>Standard Kubernetes deployments work out of the box:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-app\nspec:\n  replicas: 3\n  template:\n    spec:\n      containers:\n      - name: app\n        image: myapp:latest\n</code></pre>"},{"location":"patterns/k3s/#services-ingress","title":"Services &amp; Ingress","text":"<p>Expose applications with LoadBalancer or Ingress:</p> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: my-app\nspec:\n  type: LoadBalancer  # MetalLB provides the IP\n  ports:\n  - port: 80\n    targetPort: 8080\n</code></pre>"},{"location":"patterns/k3s/#persistent-storage","title":"Persistent Storage","text":"<p>Use persistent volumes for stateful applications:</p> <pre><code>apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: data\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n</code></pre>"},{"location":"patterns/k3s/#management-tools","title":"Management Tools","text":""},{"location":"patterns/k3s/#kubectl","title":"kubectl","text":"<p>Standard Kubernetes CLI - pre-configured and ready:</p> <pre><code>kubectl get pods --all-namespaces\nkubectl apply -f deployment.yaml\nkubectl logs my-pod\n</code></pre>"},{"location":"patterns/k3s/#helm","title":"helm","text":"<p>Kubernetes package manager:</p> <pre><code>helm repo add stable https://charts.helm.sh/stable\nhelm install my-app stable/nginx\nhelm list\n</code></pre>"},{"location":"patterns/k3s/#k9s","title":"k9s","text":"<p>Terminal UI for Kubernetes:</p> <pre><code>k9s  # Interactive cluster management\n</code></pre>"},{"location":"patterns/k3s/#high-availability","title":"High Availability","text":"<p>For production deployments, use 3 control plane nodes:</p> <pre><code>cluster:\n  control_nodes: 3  # HA configuration\n  worker_nodes: 5\n</code></pre> <p>This provides: - Control plane redundancy - No single point of failure - Automatic failover - If one control node fails, others continue - Load distribution - API requests distributed across nodes</p>"},{"location":"patterns/k3s/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<p>The k3s pattern can be configured with monitoring:</p> <pre><code>features:\n  monitoring: true  # Deploys Prometheus + Grafana\n  logging: true     # Centralized logging\n</code></pre>"},{"location":"patterns/k3s/#scaling","title":"Scaling","text":""},{"location":"patterns/k3s/#manual-scaling","title":"Manual Scaling","text":"<p>Scale deployments manually:</p> <pre><code>kubectl scale deployment my-app --replicas=10\n</code></pre>"},{"location":"patterns/k3s/#horizontal-pod-autoscaling","title":"Horizontal Pod Autoscaling","text":"<p>Configure automatic scaling based on metrics:</p> <pre><code>apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: my-app\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: my-app\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n</code></pre>"},{"location":"patterns/k3s/#full-documentation","title":"Full Documentation","text":"<p>For complete implementation details, see the k3s pattern source.</p>"},{"location":"patterns/k3s/#next-steps","title":"Next Steps","text":"<ul> <li>Deploy your first Kubernetes cluster</li> <li>Learn about Gateway pattern for simpler web apps</li> <li>Explore Single-VM pattern for development environments</li> </ul>"},{"location":"patterns/overview/","title":"Deployment Patterns Overview","text":"<p>TFGrid Compose provides three deployment patterns that cover every use case from development to enterprise production.</p>"},{"location":"patterns/overview/#pattern-philosophy","title":"Pattern Philosophy","text":"<p>Each pattern is: - \u2705 Production-ready - Tested and verified - \u2705 Purpose-built - Optimized for specific use cases - \u2705 Cost-effective - Pay only for what you need - \u2705 Battle-tested - Based on proven implementations</p>"},{"location":"patterns/overview/#the-three-patterns","title":"The Three Patterns","text":""},{"location":"patterns/overview/#single-vm-pattern","title":"\ud83d\udd39 Single-VM Pattern","text":"<p>Simple VM deployment for development and internal services</p> <pre><code>tfgrid-compose up my-app --pattern=single-vm\n</code></pre> <p>Best for: - AI agents &amp; coding environments - Databases and data stores - Internal APIs and services - Development environments</p> <p>Deployment time: 2-3 minutes Cost: $10-30/month</p> <p>Learn more \u2192</p>"},{"location":"patterns/overview/#gateway-pattern","title":"\ud83c\udf10 Gateway Pattern","text":"<p>Multi-VM with public access and SSL for production web apps</p> <pre><code>tfgrid-compose up my-webapp --pattern=gateway --domain=myapp.com\n</code></pre> <p>Best for: - Production websites - E-commerce sites - SaaS applications - Public web services</p> <p>Deployment time: 5-7 minutes Cost: $30-100/month</p> <p>Learn more \u2192</p>"},{"location":"patterns/overview/#k3s-pattern","title":"\ud83d\ude80 K3s Pattern","text":"<p>Full Kubernetes cluster for cloud-native applications</p> <pre><code>tfgrid-compose up my-cluster --pattern=k3s\n</code></pre> <p>Best for: - Cloud-native applications - Microservices architectures - Enterprise deployments - Production SaaS at scale</p> <p>Deployment time: 10-15 minutes Cost: $100-500/month</p> <p>Learn more \u2192</p>"},{"location":"patterns/overview/#choosing-a-pattern","title":"Choosing a Pattern","text":""},{"location":"patterns/overview/#start-simple-scale-up","title":"Start Simple \u2192 Scale Up","text":"<p>Development &amp; Testing: Start with <code>single-vm</code> for fast, isolated development environments.</p> <p>MVP &amp; Early Production: Move to <code>gateway</code> when you need public access and SSL.</p> <p>Scale &amp; Enterprise: Upgrade to <code>k3s</code> for cloud-native features and horizontal scaling.</p>"},{"location":"patterns/overview/#pattern-comparison","title":"Pattern Comparison","text":"Feature Single-VM Gateway K3s Public IP \u274c \u2705 \u2705 SSL/TLS \u274c \u2705 Auto \u2705 Via Ingress Load Balancing \u274c \u2705 \u2705 MetalLB Scaling Manual Manual Auto Complexity Low Medium High Deploy Time 2-3 min 5-7 min 10-15 min Min Cost $10/mo $30/mo $100/mo"},{"location":"patterns/overview/#pattern-architecture","title":"Pattern Architecture","text":""},{"location":"patterns/overview/#single-vm-architecture","title":"Single-VM Architecture","text":"<pre><code>Your Laptop \u2192 WireGuard VPN \u2192 Single VM\n                              (App + Data)\n</code></pre>"},{"location":"patterns/overview/#gateway-architecture","title":"Gateway Architecture","text":"<pre><code>Internet \u2192 Gateway VM \u2192 Private Network \u2192 Backend VMs\n         (Public IP)   (Reverse Proxy)   (App + DB)\n         (SSL/TLS)\n</code></pre>"},{"location":"patterns/overview/#k3s-architecture","title":"K3s Architecture","text":"<pre><code>Your Laptop \u2192 Management Node \u2192 K3s Cluster\n              (kubectl/helm)    \u251c\u2500 Control Plane\n                                \u251c\u2500 Worker Nodes\n                                \u2514\u2500 Services (MetalLB, Ingress)\n</code></pre>"},{"location":"patterns/overview/#migration-path","title":"Migration Path","text":"<p>Patterns are designed for easy migration:</p> <p>Single-VM \u2192 Gateway - Add public domain configuration - Enable SSL - Deploy gateway VM - Update DNS</p> <p>Gateway \u2192 K3s - Define Kubernetes manifests - Deploy K3s cluster - Migrate services to pods - Update ingress rules</p>"},{"location":"patterns/overview/#next-steps","title":"Next Steps","text":"<ul> <li>New to TFGrid Compose? \u2192 Start with Quick Start Guide</li> <li>Ready to deploy? \u2192 Choose your pattern above</li> <li>Need help deciding? \u2192 See Use Cases</li> </ul>"},{"location":"patterns/overview/#pattern-sources","title":"Pattern Sources","text":"<p>All patterns are built on proven, working implementations:</p> <ul> <li>Single-VM: Standard VM deployment with WireGuard</li> <li>Gateway: Based on mik-tf/tfgrid-gateway</li> <li>K3s: Based on ucli-tools/tfgrid-k3s</li> </ul> <p>See Architecture: Source Repositories for acknowledgments.</p>"},{"location":"patterns/single-vm/","title":"Single-VM Pattern","text":"<p>Simple VM deployment for development and internal services</p> <p>The single-vm pattern is the simplest deployment pattern in TFGrid Compose. It creates a single virtual machine with private networking accessible via WireGuard VPN.</p>"},{"location":"patterns/single-vm/#overview","title":"Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Your Application      \u2502\n\u2502    Private Networking    \u2502\n\u2502    \ud83d\udd12 WireGuard Access   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Perfect For:</p> <ul> <li>AI agents &amp; coding environments</li> <li>Databases (PostgreSQL, MongoDB, Redis)</li> <li>Internal services &amp; APIs</li> <li>Development environments</li> </ul>"},{"location":"patterns/single-vm/#quick-start","title":"Quick Start","text":"<pre><code>tfgrid-compose up tfgrid-ai-agent --pattern=single-vm\n</code></pre> <p>Deploy time: 2-3 minutes Cost: $10-30/month</p>"},{"location":"patterns/single-vm/#features","title":"Features","text":"<ul> <li>\u2705 Isolated VM environment - Complete isolation from your local machine</li> <li>\u2705 Private networking - Secure WireGuard VPN access</li> <li>\u2705 Fast deployment - Up and running in 2-3 minutes</li> <li>\u2705 Cost-effective - Starting at $10/month</li> <li>\u2705 No public IP needed - Perfect for internal services</li> </ul>"},{"location":"patterns/single-vm/#example-tfgrid-ai-agent","title":"Example: TFGrid AI Agent","text":"<p>Deploy an isolated AI coding environment:</p> <pre><code>$ tfgrid-compose up tfgrid-ai-agent --pattern=single-vm\n\n\u2728 Deployed! AI agent ready in 2 minutes.\n</code></pre> <p>Access your AI agent:</p> <pre><code>$ tfgrid-compose ssh tfgrid-ai-agent\n</code></pre>"},{"location":"patterns/single-vm/#configuration","title":"Configuration","text":"<p>The single-vm pattern uses the following default configuration:</p> <ul> <li>CPU: 2 cores</li> <li>Memory: 4 GB RAM</li> <li>Storage: 50 GB SSD</li> <li>Network: WireGuard VPN + Mycelium overlay</li> </ul> <p>You can customize these in your <code>tfgrid-compose.yaml</code> manifest.</p>"},{"location":"patterns/single-vm/#use-cases","title":"Use Cases","text":""},{"location":"patterns/single-vm/#development-environments","title":"Development Environments","text":"<p>Set up isolated development environments that won't affect your local machine:</p> <pre><code>tfgrid-compose up my-dev-env --pattern=single-vm\n</code></pre>"},{"location":"patterns/single-vm/#databases","title":"Databases","text":"<p>Deploy databases with private network access:</p> <pre><code>tfgrid-compose up my-postgres --pattern=single-vm\n</code></pre>"},{"location":"patterns/single-vm/#internal-apis","title":"Internal APIs","text":"<p>Run internal services accessible only via VPN:</p> <pre><code>tfgrid-compose up my-api --pattern=single-vm\n</code></pre>"},{"location":"patterns/single-vm/#full-documentation","title":"Full Documentation","text":"<p>For complete implementation details, see the single-vm pattern source.</p>"},{"location":"patterns/single-vm/#next-steps","title":"Next Steps","text":"<ul> <li>Deploy your first app</li> <li>Learn about the Gateway pattern for public web apps</li> <li>Explore K3s pattern for Kubernetes deployments</li> </ul>"},{"location":"roadmap/","title":"Roadmap","text":"<p>The future of application deployment on ThreeFold Grid</p>"},{"location":"roadmap/#our-vision","title":"\ud83c\udfaf Our Vision","text":"<p>TFGrid Studio is building the complete developer experience for deploying applications on ThreeFold Grid - from code to production with AI assistance.</p>"},{"location":"roadmap/#the-approach-now-next-later","title":"The Approach: Now / Next / Later","text":"<p>We organize our roadmap into three clear phases:</p>"},{"location":"roadmap/#now-active-development","title":"\ud83d\ude80 Now - Active Development","text":"<p>What we're building right now</p> <p>Currently focused on CLI Integration - deploy apps by name from the registry.</p> <p>View Active Features \u2192</p>"},{"location":"roadmap/#next-planned-features","title":"\u23ed\ufe0f Next - Planned Features","text":"<p>What's coming after current work</p> <p>Visual management, AI assistance, and voice interfaces.</p> <p>View Planned Features \u2192</p>"},{"location":"roadmap/#later-future-concepts","title":"\ud83d\udd2e Later - Future Concepts","text":"<p>Long-term vision and concepts</p> <p>Marketplace monetization, white label solutions, and enterprise features.</p> <p>View Future Concepts \u2192</p>"},{"location":"roadmap/#how-we-work","title":"\ud83d\udccd How We Work","text":""},{"location":"roadmap/#transparent-development","title":"Transparent Development","text":"<ul> <li>All progress tracked publicly on GitHub</li> <li>Regular updates in Discussions</li> <li>Community input shapes priorities</li> </ul>"},{"location":"roadmap/#flexible-timeline","title":"Flexible Timeline","text":"<ul> <li>No hard dates - features ship when ready</li> <li>Status indicators show progress</li> <li>Phases move as we learn</li> </ul>"},{"location":"roadmap/#open-source-first","title":"Open Source First","text":"<ul> <li>Core tools remain free forever</li> <li>Premium features fund development</li> <li>Community contributions welcome</li> </ul>"},{"location":"roadmap/#get-involved","title":"\ud83e\udd1d Get Involved","text":""},{"location":"roadmap/#try-whats-available-now","title":"Try What's Available Now","text":"<pre><code>curl -sSL install.tfgrid.studio | sh\ntfgrid-compose up tfgrid-ai-agent\n</code></pre>"},{"location":"roadmap/#influence-whats-next","title":"Influence What's Next","text":"<ul> <li>Join GitHub Discussions</li> <li>Submit Feature Requests</li> <li>Contribute to Documentation</li> </ul>"},{"location":"roadmap/#stay-updated","title":"Stay Updated","text":"<ul> <li>Star repositories on GitHub</li> <li>Follow progress in internal docs</li> <li>Join community discussions</li> </ul> <p>Ready to explore? Start with Now \u2192 to see what's actively being built.</p>"},{"location":"roadmap/later/","title":"Later - Future Concepts","text":"<p>\ud83d\udcad Long-term vision and concepts</p>"},{"location":"roadmap/later/#marketplace","title":"Marketplace","text":"<p>Status: \ud83d\udcad Concept</p>"},{"location":"roadmap/later/#overview","title":"Overview","text":"<p>Monetize your applications - sell apps on the marketplace with automatic billing.</p>"},{"location":"roadmap/later/#for-app-creators","title":"For App Creators","text":"<p>Sell Your Apps:</p> <ul> <li>Submit your app to marketplace</li> <li>Set your own pricing</li> <li>Monthly or one-time payment</li> <li>Automatic billing integration</li> </ul> <p>Hosting Options:</p> <ul> <li>Self-Managed: User deploys and manages</li> <li>Managed: You host and support (SaaS model)</li> <li>Hybrid: Offer both options</li> </ul> <p>Revenue Share:</p> <ul> <li>85% to you</li> <li>15% platform fee</li> <li>Payment in TFT or fiat</li> <li>Monthly payouts</li> </ul> <p>Example Earnings: <pre><code>WordPress hosting at $10/mo \u00d7 100 users\n= $1,000/mo gross\n= $850/mo to you\n= $150/mo platform fee\n</code></pre></p>"},{"location":"roadmap/later/#for-users","title":"For Users","text":"<p>One-Click Installation:</p> <ul> <li>Browse marketplace</li> <li>Click to install</li> <li>Automatic deployment</li> <li>Subscription management</li> </ul> <p>Benefits:</p> <ul> <li>Automatic updates</li> <li>Professional support</li> <li>Managed backups</li> <li>SLA guarantees</li> </ul>"},{"location":"roadmap/later/#use-cases","title":"Use Cases","text":"<p>For Developers:</p> <ul> <li>Build once, sell many times</li> <li>Recurring revenue from subscriptions</li> <li>Focus on product, not infrastructure</li> </ul> <p>For Users:</p> <ul> <li>Vetted, quality applications</li> <li>Managed and supported</li> <li>No deployment hassle</li> <li>Enterprise-grade reliability</li> </ul>"},{"location":"roadmap/later/#white-label-solution","title":"White Label Solution","text":"<p>Status: \ud83d\udcad Concept</p>"},{"location":"roadmap/later/#overview_1","title":"Overview","text":"<p>Rebrand TFGrid Studio as your own platform - perfect for cloud providers, enterprises, and service providers.</p>"},{"location":"roadmap/later/#who-its-for","title":"Who It's For","text":"<ul> <li>Cloud Providers: \"AcmeCloud Studio powered by TFGrid\"</li> <li>Enterprises: \"TechCorp Internal Deployment Platform\"</li> <li>MSPs: \"ManagedApps Platform by YourCompany\"</li> <li>Consulting Firms: \"DevOps Solutions Platform\"</li> </ul>"},{"location":"roadmap/later/#what-you-get","title":"What You Get","text":"<p>Full Platform Rebranding:</p> <ul> <li>Custom domain and logos</li> <li>Your company colors and styling</li> <li>Branded documentation</li> <li>Your support channels</li> <li>Private registry for your apps</li> </ul> <p>Infrastructure:</p> <ul> <li>Self-hosted or managed</li> <li>Your database</li> <li>Your authentication</li> <li>Your billing system</li> <li>Your monitoring</li> </ul> <p>Customization:</p> <ul> <li>Custom features</li> <li>Integration with your tools</li> <li>Your workflows</li> <li>Your compliance requirements</li> </ul>"},{"location":"roadmap/later/#revenue-model","title":"Revenue Model","text":"<p>Annual License:</p> <ul> <li>$50k-$200k/year (based on scale)</li> <li>Tiered by users/deployments</li> <li>Volume discounts available</li> </ul> <p>Revenue Share:</p> <ul> <li>20% of your marketplace sales</li> <li>Optional (if you enable marketplace)</li> </ul> <p>Professional Services:</p> <ul> <li>Custom development</li> <li>Integration support</li> <li>Training and onboarding</li> <li>Dedicated account manager</li> </ul>"},{"location":"roadmap/later/#example-pricing","title":"Example Pricing","text":"<p>Small (up to 100 users): $50k/year Medium (up to 500 users): $100k/year Large (up to 2,000 users): $150k/year Enterprise (unlimited): $200k+/year (custom)</p>"},{"location":"roadmap/later/#enterprise-features","title":"Enterprise Features","text":"<p>Status: \ud83d\udcad Concept</p>"},{"location":"roadmap/later/#overview_2","title":"Overview","text":"<p>Advanced features for large organizations with complex requirements.</p>"},{"location":"roadmap/later/#security-compliance","title":"Security &amp; Compliance","text":"<p>Authentication:</p> <ul> <li>SSO/SAML integration</li> <li>LDAP/Active Directory</li> <li>MFA enforcement</li> <li>Session management</li> </ul> <p>Authorization:</p> <ul> <li>Advanced RBAC</li> <li>Fine-grained permissions</li> <li>Resource-level access control</li> <li>Approval workflows</li> </ul> <p>Compliance:</p> <ul> <li>Audit logging</li> <li>Compliance reports</li> <li>Data residency controls</li> <li>Encryption at rest</li> </ul>"},{"location":"roadmap/later/#operations","title":"Operations","text":"<p>High Availability:</p> <ul> <li>Multi-region deployment</li> <li>Automatic failover</li> <li>Load balancing</li> <li>Disaster recovery</li> </ul> <p>Support:</p> <ul> <li>Custom SLA (99.9% or 99.99%)</li> <li>Dedicated support team</li> <li>24/7 emergency hotline</li> <li>Quarterly business reviews</li> </ul> <p>Deployment Options:</p> <ul> <li>On-premise installation</li> <li>Private cloud</li> <li>Air-gapped environments</li> <li>Hybrid deployments</li> </ul>"},{"location":"roadmap/later/#pricing","title":"Pricing","text":"<p>Enterprise Tier: $499/month</p> <ul> <li>Up to 50 users</li> <li>Custom SLA</li> <li>Priority support</li> <li>All features included</li> </ul> <p>Custom Enterprise: Contact sales</p> <ul> <li>Unlimited users</li> <li>Custom pricing</li> <li>Dedicated resources</li> <li>Professional services</li> </ul>"},{"location":"roadmap/later/#availability","title":"Availability","text":"<p>Free &amp; Open Source: - Core CLI tools remain free forever</p> <p>Premium Tiers: - Marketplace available in all paid tiers - White Label for Enterprise</p> <p>For pricing details: View Pricing \u2192</p> <p>For white label inquiries: enterprise@tfgrid.studio</p>"},{"location":"roadmap/later/#the-complete-ecosystem","title":"The Complete Ecosystem","text":""},{"location":"roadmap/later/#free-open-source","title":"Free &amp; Open Source","text":"<ul> <li>tfgrid-compose CLI</li> <li>App Registry</li> <li>Documentation</li> <li>Community support</li> </ul>"},{"location":"roadmap/later/#premium-features","title":"Premium Features","text":"<ul> <li>Web Dashboard (Pro+)</li> <li>AI Assistant (Pro+)</li> <li>Voice Interface (Team+)</li> <li>Team Collaboration (Team+)</li> </ul>"},{"location":"roadmap/later/#enterprise-revenue","title":"Enterprise Revenue","text":"<ul> <li>Marketplace (15% commission)</li> <li>White Label (annual licenses)</li> <li>Professional services</li> <li>Custom development</li> </ul> <p>Previous: \u2190 Next | Back to: Roadmap Overview</p>"},{"location":"roadmap/next/","title":"Next - Planned Features","text":"<p>\ud83d\udccb What's coming after current work</p>"},{"location":"roadmap/next/#web-dashboard","title":"Web Dashboard","text":"<p>Status: \ud83d\udccb Planned</p>"},{"location":"roadmap/next/#overview","title":"Overview","text":"<p>Visual management interface - deploy and manage apps without touching the CLI.</p>"},{"location":"roadmap/next/#what-youll-get","title":"What You'll Get","text":"<p>Deployment Management:</p> <ul> <li>Deploy apps with GUI (no CLI needed)</li> <li>Drag-and-drop configuration</li> <li>Visual deployment wizard</li> <li>One-click app installation</li> </ul> <p>Monitoring &amp; Observability:</p> <ul> <li>Monitor all deployments in one view</li> <li>Real-time logs and metrics</li> <li>Visual network topology</li> <li>Resource usage graphs</li> <li>Health status indicators</li> </ul> <p>Team Collaboration:</p> <ul> <li>Shared deployments</li> <li>Role-based access control</li> <li>Team activity feed</li> <li>Collaborative debugging</li> </ul> <p>Mobile Experience:</p> <ul> <li>Mobile-responsive design</li> <li>Monitor on the go</li> <li>Quick actions</li> <li>Push notifications</li> </ul>"},{"location":"roadmap/next/#perfect-for","title":"Perfect For","text":"<ul> <li>Non-technical users - No CLI required</li> <li>Team management - Collaborate visually  </li> <li>Quick monitoring - Check status anywhere</li> <li>Mobile access - Manage from phone</li> </ul>"},{"location":"roadmap/next/#ai-terminal-assistant-cli","title":"AI Terminal Assistant (CLI)","text":"<p>Status: \ud83d\udcad Researching</p>"},{"location":"roadmap/next/#overview_1","title":"Overview","text":"<p>Build and deploy applications using natural language - just describe what you want.</p>"},{"location":"roadmap/next/#what-youll-be-able-to-do","title":"What You'll Be Able To Do","text":"<pre><code># Natural language commands\ntfgrid-compose ai \"Create a Node.js API with Redis and deploy it\"\ntfgrid-compose ai \"Deploy WordPress with SSL on mysite.com\"\ntfgrid-compose ai \"Add monitoring to my app\"\ntfgrid-compose ai \"Scale my API to 3 instances\"\n\n# AI generates code, configures, and deploys\n</code></pre>"},{"location":"roadmap/next/#the-killer-feature","title":"The Killer Feature","text":"<p>One-Prompt Deployment:</p> <ol> <li>Tell the AI what you want (in plain English)</li> <li>AI writes the code</li> <li>AI configures infrastructure</li> <li>AI deploys to ThreeFold Grid</li> <li>You get the URL</li> </ol>"},{"location":"roadmap/next/#capabilities","title":"Capabilities","text":"<p>Natural Language Understanding:</p> <ul> <li>Parse intent from plain English</li> <li>Extract requirements</li> <li>Handle ambiguity with clarifying questions</li> </ul> <p>Code Generation:</p> <ul> <li>Generate application code</li> <li>Create Docker configurations</li> <li>Write deployment manifests</li> <li>Set up networking</li> </ul> <p>Smart Deployment:</p> <ul> <li>Choose optimal pattern</li> <li>Configure resources</li> <li>Set up SSL automatically</li> <li>Handle DNS configuration</li> </ul> <p>Learning &amp; Context:</p> <ul> <li>Learns from your preferences</li> <li>Remembers past deployments</li> <li>Suggests improvements</li> <li>Context-aware suggestions</li> </ul>"},{"location":"roadmap/next/#voice-interface-stttts","title":"Voice Interface (STT/TTS)","text":"<p>Status: \ud83d\udcad Researching</p>"},{"location":"roadmap/next/#overview_2","title":"Overview","text":"<p>Layer on top of AI CLI with speech-to-text and text-to-speech - deploy applications hands-free.</p>"},{"location":"roadmap/next/#what-youll-be-able-to-do_1","title":"What You'll Be Able To Do","text":"<pre><code># Speak naturally\n\ud83c\udfa4 \"Deploy a WordPress blog with SSL on mysite.com\"\n\n# AI responds with voice\n\ud83d\udd0a \"Creating WordPress deployment with SSL... \n    Done! Your site is live at https://mysite.com\"\n\n# Hands-free workflow\n\ud83c\udfa4 \"Show me the logs\"\n\ud83c\udfa4 \"Scale to 3 instances\"\n\ud83c\udfa4 \"Check the status\"\n\ud83c\udfa4 \"Restart the application\"\n</code></pre>"},{"location":"roadmap/next/#features","title":"Features","text":"<p>Speech-to-Text (STT):</p> <ul> <li>Speak commands naturally</li> <li>Multi-language support</li> <li>Noise cancellation</li> <li>Continuous listening mode</li> </ul> <p>Text-to-Speech (TTS):</p> <ul> <li>AI responds with voice</li> <li>Natural-sounding output</li> <li>Adjustable speed/voice</li> <li>Progress updates spoken</li> </ul> <p>Conversation Flow:</p> <ul> <li>Multi-turn dialogue</li> <li>Follow-up questions</li> <li>Confirmation requests</li> <li>Error explanations</li> </ul> <p>Use Cases:</p> <ul> <li>Hands-free operation - Perfect for multitasking</li> <li>Accessibility - Voice-first interface</li> <li>Mobile-friendly - Use while commuting</li> <li>Live demos - Impressive presentations</li> </ul>"},{"location":"roadmap/next/#architecture","title":"Architecture","text":"<pre><code>Voice Input \u2192 STT \u2192 AI CLI \u2192 TTS \u2192 Voice Output\n</code></pre>"},{"location":"roadmap/next/#availability","title":"Availability","text":"<p>Free &amp; Open Source: - CLI tools (forever free)</p> <p>Pro &amp; Team Tiers: - Web Dashboard - AI CLI Assistant - Voice Interface (Team+)</p> <p>View Pricing \u2192</p> <p>Previous: \u2190 Now | Next: Later \u2192</p>"},{"location":"roadmap/now/","title":"Now - Active Development","text":"<p>\ud83d\udd28 What we're building right now</p>"},{"location":"roadmap/now/#recently-completed","title":"Recently Completed \u2705","text":""},{"location":"roadmap/now/#cli-integration-v0100-oct-15-2025","title":"CLI Integration (v0.10.0 - Oct 15, 2025)","text":"<p>Status: \u2705 COMPLETED</p> <p>Deploy apps by name directly from the registry!</p> <pre><code># Search the registry\ntfgrid-compose search\n\n# Deploy by name\ntfgrid-compose up wordpress\n\n# Manage multiple apps\ntfgrid-compose list\ntfgrid-compose switch ai-agent\n</code></pre> <p>See: Registry Guide | Release Notes</p>"},{"location":"roadmap/now/#currently-building","title":"Currently Building \ud83d\udd28","text":""},{"location":"roadmap/now/#web-dashboard","title":"Web Dashboard","text":"<p>Status: \ud83d\udd28 Planning &amp; Design</p> <p>Goal: Visual management interface for deployments</p>"},{"location":"roadmap/now/#what-it-will-do","title":"What It Will Do","text":"<pre><code>\ud83d\udda5\ufe0f Modern web interface to:\n- View all deployments at a glance\n- Deploy apps with GUI\n- Monitor resources in real-time  \n- Manage team access\n- View logs and metrics\n</code></pre>"},{"location":"roadmap/now/#features-planned","title":"Features Planned","text":"<p>Visual Deployment: - Browse registry in GUI - One-click app deployment - Configuration wizard - Pattern selection UI</p> <p>Real-Time Monitoring: - Resource usage graphs - Live log streaming - Health check dashboard - Alert notifications</p> <p>Team Collaboration: - Multi-user access - Role-based permissions - Deployment history - Activity audit log</p> <p>Topology View: - Visual network diagram - VM connections - Service relationships - Traffic flow</p>"},{"location":"roadmap/now/#architecture-preview","title":"Architecture Preview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Web Dashboard (React)           \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502Registry\u2502  \u2502Deploys \u2502  \u2502Monitor \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                    \u2195\ufe0f\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      Backend API (FastAPI/Go)           \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502 Auth  \u2502  \u2502  State \u2502  \u2502Metrics \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                    \u2195\ufe0f\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      tfgrid-compose CLI Engine          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"roadmap/now/#timeline","title":"Timeline","text":"<ul> <li>Research: Q4 2025</li> <li>Design: Q4 2025</li> <li>Development: Q1 2026</li> <li>Beta: Q1 2026</li> </ul>"},{"location":"roadmap/now/#try-current-features","title":"Try Current Features","text":"<p>Use the newly released CLI features:</p> <pre><code># Install\ncurl -sSL install.tfgrid.studio | sh\n\n# Deploy from local manifest\ntfgrid-compose up ./my-app\n\n# Available patterns\ntfgrid-compose up app --pattern=single-vm\ntfgrid-compose up app --pattern=gateway\ntfgrid-compose up app --pattern=k3s\n\n# Browse registry\nopen https://registry.tfgrid.studio\n</code></pre>"},{"location":"roadmap/now/#progress-updates","title":"Progress Updates","text":"<p>Follow development: - GitHub Project Board - GitHub Discussions - Changelog</p> <p>Next: What's Planned \u2192</p>"},{"location":"troubleshooting/guide/","title":"TFGrid Compose Troubleshooting Guide","text":"<p>Version: 0.9.0 Status: Active Audience: All Users</p>"},{"location":"troubleshooting/guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Common Errors</li> <li>Debug Mode</li> <li>Network Issues</li> <li>Recovery Procedures</li> <li>Log Analysis</li> <li>State Inspection</li> <li>FAQ</li> <li>Getting Help</li> </ol>"},{"location":"troubleshooting/guide/#common-errors","title":"Common Errors","text":""},{"location":"troubleshooting/guide/#prerequisites-missing","title":"Prerequisites Missing","text":""},{"location":"troubleshooting/guide/#error-terraformopentofu-not-found","title":"Error: \"Terraform/OpenTofu not found\"","text":"<p>Cause: Neither OpenTofu nor Terraform is installed</p> <p>Solution: <pre><code># Option 1: Install OpenTofu (recommended, open source)\n# Ubuntu/Debian\ncurl -L https://get.opentofu.org/install-opentofu.sh | sudo bash\n\n# macOS\nbrew install opentofu\n\n# Option 2: Install Terraform\n# Ubuntu/Debian\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\nsudo apt update &amp;&amp; sudo apt install terraform\n\n# macOS\nbrew install terraform\n</code></pre></p> <p>Verify: <pre><code>tofu --version\n# or\nterraform --version\n</code></pre></p>"},{"location":"troubleshooting/guide/#error-ansible-not-found","title":"Error: \"Ansible not found\"","text":"<p>Cause: Ansible is not installed</p> <p>Solution: <pre><code># Ubuntu/Debian\nsudo apt update\nsudo apt install ansible\n\n# macOS\nbrew install ansible\n\n# Verify\nansible --version\n</code></pre></p>"},{"location":"troubleshooting/guide/#error-threefold-mnemonic-not-found","title":"Error: \"ThreeFold mnemonic not found\"","text":"<p>Cause: Mnemonic phrase not configured</p> <p>Solution: <pre><code># Option 1: Standard location (recommended)\nmkdir -p ~/.config/threefold\necho 'your twelve word mnemonic phrase here' &gt; ~/.config/threefold/mnemonic\nchmod 600 ~/.config/threefold/mnemonic\n\n# Option 2: Environment variable\nexport TF_VAR_mnemonic=\"your twelve word mnemonic phrase here\"\n\n# Option 3: Project-specific (git-ignored)\necho 'your mnemonic' &gt; .tfgrid-mnemonic\nchmod 600 .tfgrid-mnemonic\n</code></pre></p> <p>Security Warning:</p> <ul> <li>Never commit mnemonic to version control</li> <li>Use 600 permissions (owner read/write only)</li> <li>Rotate regularly</li> </ul>"},{"location":"troubleshooting/guide/#deployment-errors","title":"Deployment Errors","text":""},{"location":"troubleshooting/guide/#error-existing-deployment-detected","title":"Error: \"Existing deployment detected\"","text":"<p>Cause: Attempting to deploy while another deployment exists</p> <p>Current Behavior: <pre><code>\u274c Existing deployment detected\n   App: my-app (pattern: single-vm)\n   Status: running\n   Primary IP: 10.1.3.2\n\nCannot deploy another app while deployment exists.\n</code></pre></p> <p>Solution: <pre><code># Option 1: Destroy existing deployment\ntfgrid-compose down &lt;existing-app-path&gt;\n\n# Option 2: Use different app directory\ncd ../another-app\ntfgrid-compose up .\n\n# Future (v0.10.0+): Multi-deployment support\ntfgrid-compose up --id=project-2 &lt;app-path&gt;\n</code></pre></p>"},{"location":"troubleshooting/guide/#error-app-manifest-not-found","title":"Error: \"App manifest not found\"","text":"<p>Cause: <code>tfgrid-compose.yaml</code> is missing</p> <p>Solution: <pre><code># Create manifest\ncat &gt; tfgrid-compose.yaml &lt;&lt; EOF\nname: my-app\nversion: 1.0.0\npattern: single-vm\n\nconfig:\n  node: 8\n  cpu: 4\n  memory: 8192\n  disk: 102400\nEOF\n</code></pre></p> <p>Required Fields:</p> <ul> <li><code>name</code>: Application name</li> <li><code>pattern</code>: Deployment pattern (single-vm, gateway, k3s)</li> <li><code>config</code>: Pattern-specific configuration</li> </ul>"},{"location":"troubleshooting/guide/#error-pattern-directory-not-found","title":"Error: \"Pattern directory not found\"","text":"<p>Cause: Referenced pattern doesn't exist</p> <p>Solution: <pre><code># List available patterns\nls patterns/\n# Output: single-vm  gateway  k3s\n\n# Update manifest to use existing pattern\n# Edit tfgrid-compose.yaml:\npattern: single-vm  # Use one of: single-vm, gateway, k3s\n</code></pre></p>"},{"location":"troubleshooting/guide/#terraformopentofu-errors","title":"Terraform/OpenTofu Errors","text":""},{"location":"troubleshooting/guide/#error-terraform-init-failed","title":"Error: \"terraform init failed\"","text":"<p>Cause: Network issues, provider errors, or invalid configuration</p> <p>Debug: <pre><code># Check log\ncat .tfgrid-compose/terraform-init.log\n\n# Common issues:\n# 1. Network connectivity\nping github.com\n\n# 2. Provider version conflict\nrm -rf .tfgrid-compose/terraform/.terraform\ntfgrid-compose up &lt;app&gt;\n\n# 3. Invalid Terraform version\ntofu --version  # Should be &gt;= 1.6.0\nterraform --version  # Should be &gt;= 1.5.0\n</code></pre></p>"},{"location":"troubleshooting/guide/#error-no-suitable-nodes-found","title":"Error: \"No suitable nodes found\"","text":"<p>Cause: ThreeFold Grid node unavailable or insufficient resources</p> <p>Solution: <pre><code># Option 1: Try different node\n# Edit tfgrid-compose.yaml:\nconfig:\n  node: 12  # Try different node ID\n\n# Option 2: Check node availability\n# Visit: https://dashboard.grid.tf/\n# Find available nodes in your region\n\n# Option 3: Reduce resource requirements\nconfig:\n  cpu: 2      # Reduce from 4\n  memory: 4096  # Reduce from 8192\n</code></pre></p>"},{"location":"troubleshooting/guide/#error-terraform-apply-failed","title":"Error: \"terraform apply failed\"","text":"<p>Cause: Various infrastructure provisioning issues</p> <p>Debug: <pre><code># Check detailed log\ncat .tfgrid-compose/terraform-apply.log\n\n# Common causes:\n# 1. Insufficient funds on ThreeFold wallet\n# 2. Node offline/unavailable\n# 3. Resource limits exceeded\n# 4. Network configuration errors\n\n# Manual inspection\ncd .tfgrid-compose/terraform\ntofu plan  # See what would be created\ntofu console  # Interactive inspection\n</code></pre></p>"},{"location":"troubleshooting/guide/#network-errors","title":"Network Errors","text":""},{"location":"troubleshooting/guide/#error-wireguard-connection-failed","title":"Error: \"WireGuard connection failed\"","text":"<p>Cause: WireGuard not installed, firewall blocking, or configuration issue</p> <p>Solution: <pre><code># 1. Check WireGuard installed\nwhich wg-quick\n# If missing:\n# Ubuntu/Debian\nsudo apt install wireguard\n\n# macOS\nbrew install wireguard-tools\n\n# 2. Check interface status\nsudo wg show\n\n# 3. Check firewall\n# Ubuntu/Debian\nsudo ufw status\nsudo ufw allow 51820/udp\n\n# macOS\n# Check System Preferences &gt; Security &amp; Privacy &gt; Firewall\n\n# 4. Restart WireGuard\nsudo wg-quick down wg0\ntfgrid-compose up &lt;app&gt;  # Will recreate WireGuard\n</code></pre></p>"},{"location":"troubleshooting/guide/#error-ssh-connection-timeout","title":"Error: \"SSH connection timeout\"","text":"<p>Cause: VM not ready, network issue, or wrong IP</p> <p>Debug: <pre><code># 1. Check VM IP\ncat .tfgrid-compose/state.yaml | grep primary_ip\n\n# 2. Test connectivity\nping &lt;primary-ip&gt;\n\n# 3. If using WireGuard, check interface\nsudo wg show\n# Should show: wg0 interface with peer\n\n# 4. Check VM is running\n# Visit ThreeFold Dashboard\n# https://dashboard.grid.tf/\n\n# 5. Wait longer (VM may still be booting)\n# Typical boot time: 30-90 seconds\n\n# 6. Manual SSH test\nssh root@&lt;primary-ip&gt;\n</code></pre></p> <p>Common Causes:</p> <ul> <li>VM still booting (wait 2-3 minutes)</li> <li>WireGuard interface down</li> <li>Firewall blocking port 22</li> <li>Wrong IP address in state</li> </ul>"},{"location":"troubleshooting/guide/#error-cannot-establish-ssh-connection","title":"Error: \"Cannot establish SSH connection\"","text":"<p>Cause: SSH keys not configured or VM doesn't have key</p> <p>Solution: <pre><code># 1. Check SSH key exists\nls ~/.ssh/id_*.pub\n# If missing, create one:\nssh-keygen -t ed25519 -f ~/.ssh/id_ed25519\n\n# 2. Verify key was deployed\n# Check Terraform outputs\ncd .tfgrid-compose/terraform\ntofu output\n# Should show ssh_key was set\n\n# 3. Redeploy with correct key\ntfgrid-compose down &lt;app&gt;\ntfgrid-compose up &lt;app&gt;\n</code></pre></p>"},{"location":"troubleshooting/guide/#ansible-errors","title":"Ansible Errors","text":""},{"location":"troubleshooting/guide/#error-ansible-playbook-failed","title":"Error: \"Ansible playbook failed\"","text":"<p>Cause: Configuration errors, package installation failures</p> <p>Debug: <pre><code># 1. Check Ansible log\ncat .tfgrid-compose/ansible.log\n\n# 2. Test connectivity\nansible all -i .tfgrid-compose/inventory.ini -m ping\n\n# 3. Run playbook manually with verbosity\ncd &lt;pattern&gt;/platform\nansible-playbook -i ../../.tfgrid-compose/inventory.ini site.yml -vvv\n\n# 4. Common issues:\n# - Package repository errors (apt update failed)\n# - Network connectivity from VM\n# - Disk space issues on VM\n</code></pre></p>"},{"location":"troubleshooting/guide/#debug-mode","title":"Debug Mode","text":""},{"location":"troubleshooting/guide/#enabling-debug-mode","title":"Enabling Debug Mode","text":"<p>Current (v0.9.0): <pre><code># Enable bash trace mode\nset -x\ntfgrid-compose up &lt;app&gt;\nset +x\n</code></pre></p> <p>Future (v0.10.0+): <pre><code># Built-in debug flag\ntfgrid-compose --debug up &lt;app&gt;\n</code></pre></p>"},{"location":"troubleshooting/guide/#debug-output","title":"Debug Output","text":"<p>What you'll see:</p> <ul> <li>Every command executed (<code>+ command args</code>)</li> <li>Variable expansions</li> <li>Function calls</li> <li>Exit codes</li> </ul> <p>Example: <pre><code>+ log_step 'Deploying infrastructure...'\n+ echo -e '\\033[0;35m\u25b6\\033[0m Deploying infrastructure...'\n\u25b6 Deploying infrastructure...\n+ cd .tfgrid-compose/terraform\n+ tofu init\nInitializing the backend...\n...\n</code></pre></p>"},{"location":"troubleshooting/guide/#debug-checklist","title":"Debug Checklist","text":"<p>When debugging, check: 1. Prerequisites: All tools installed? 2. Mnemonic: Is it loaded correctly? 3. Network: Can you reach ThreeFold Grid? 4. State: Is state directory corrupt? 5. Logs: What do the logs say? 6. Permissions: Correct file permissions?</p>"},{"location":"troubleshooting/guide/#network-issues","title":"Network Issues","text":""},{"location":"troubleshooting/guide/#wireguard-troubleshooting","title":"WireGuard Troubleshooting","text":"<p>Check WireGuard Status: <pre><code># List all interfaces\nsudo wg show\n\n# Check specific interface\nsudo wg show wg0\n\n# Expected output:\ninterface: wg0\n  public key: ...\n  private key: (hidden)\n  listening port: 51820\n\npeer: ...\n  endpoint: &lt;node-ip&gt;:51820\n  allowed ips: 10.1.0.0/16\n  latest handshake: 5 seconds ago\n  transfer: 1.2 MiB received, 0.8 MiB sent\n</code></pre></p> <p>Common Issues:</p> <p>1. No handshake: <pre><code># Latest handshake: never\n# Cause: Firewall blocking UDP/51820\n\n# Solution: Allow UDP traffic\nsudo ufw allow 51820/udp\n</code></pre></p> <p>2. Interface conflicts: <pre><code># Error: wg0 already exists\n\n# Solution: Use different interface\nsudo wg-quick down wg0\n# Or manually specify in pattern\n</code></pre></p> <p>3. Permission denied: <pre><code># Error: Operation not permitted\n\n# Solution: Run with sudo\nsudo wg-quick up wg0\n</code></pre></p> <p>WireGuard Cleanup: <pre><code># Stop all WireGuard interfaces\nsudo wg-quick down wg0\nsudo wg-quick down wg1\n\n# Remove configuration\nsudo rm -f /etc/wireguard/wg*.conf\n</code></pre></p>"},{"location":"troubleshooting/guide/#mycelium-troubleshooting","title":"Mycelium Troubleshooting","text":"<p>Check Mycelium Status: <pre><code># Check if Mycelium is running\nps aux | grep mycelium\n\n# Check Mycelium connectivity\nping6 &lt;mycelium-ipv6-from-state&gt;\n</code></pre></p> <p>Install Mycelium: <pre><code># Ubuntu/Debian\nwget https://github.com/threefoldtech/mycelium/releases/latest/download/mycelium-x86_64-unknown-linux-musl.tar.gz\ntar -xzf mycelium-*.tar.gz\nsudo mv mycelium /usr/local/bin/\nsudo chmod +x /usr/local/bin/mycelium\n\n# Run Mycelium\nsudo mycelium --peers tcp://188.40.132.242:9651\n</code></pre></p>"},{"location":"troubleshooting/guide/#connectivity-testing","title":"Connectivity Testing","text":"<p>Network Diagnostics: <pre><code># 1. Test ThreeFold Grid reachability\nping grid.tf\n\n# 2. Test DNS resolution\nnslookup grid.tf\n\n# 3. Test WireGuard peer\n# Get peer endpoint from state\ncat .tfgrid-compose/state.yaml | grep node\nping &lt;node-ip&gt;\n\n# 4. Trace route\ntraceroute &lt;primary-ip&gt;\n\n# 5. Test SSH port\nnc -zv &lt;primary-ip&gt; 22\n</code></pre></p>"},{"location":"troubleshooting/guide/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"troubleshooting/guide/#state-corruption","title":"State Corruption","text":"<p>Symptoms:</p> <ul> <li>Inconsistent state information</li> <li>Terraform errors about existing resources</li> <li>Deployment shows running but no VM exists</li> </ul> <p>Recovery: <pre><code># 1. Backup current state\ncp -r .tfgrid-compose .tfgrid-compose.backup\n\n# 2. Try to destroy cleanly\ntfgrid-compose down &lt;app&gt;\n\n# 3. If destroy fails, manual cleanup\ncd .tfgrid-compose/terraform\ntofu destroy  # or terraform destroy\n\n# 4. Clean state directory\nrm -rf .tfgrid-compose/\n\n# 5. Redeploy\ntfgrid-compose up &lt;app&gt;\n</code></pre></p>"},{"location":"troubleshooting/guide/#stuck-deployment","title":"Stuck Deployment","text":"<p>Symptoms: - Deployment running but not progressing - Process hung on specific step - No error messages</p> <p>Recovery: <pre><code># 1. Stop the stuck process\n# Press Ctrl+C\n\n# 2. Check what's running\nps aux | grep tfgrid-compose\nps aux | grep terraform\nps aux | grep ansible\n\n# 3. Kill if necessary\nkillall terraform\nkillall ansible-playbook\n\n# 4. Check state\ncat .tfgrid-compose/state.yaml\n\n# 5. Decide: retry or destroy\n# Retry:\ntfgrid-compose up &lt;app&gt;\n\n# Destroy:\ntfgrid-compose down &lt;app&gt;\n</code></pre></p>"},{"location":"troubleshooting/guide/#orphaned-resources","title":"Orphaned Resources","text":"<p>Symptoms: - Resources exist on ThreeFold Grid but not in state - Billing continues but no deployment shown</p> <p>Recovery: <pre><code># 1. Check ThreeFold Dashboard\n# Visit: https://dashboard.grid.tf/\n# Login with your account\n# View active deployments\n\n# 2. Import existing resources (manual)\ncd .tfgrid-compose/terraform\ntofu import &lt;resource-type&gt;.&lt;resource-name&gt; &lt;resource-id&gt;\n\n# 3. Or delete via Dashboard\n# ThreeFold Dashboard &gt; Deployments &gt; Delete\n\n# 4. Clean local state\nrm -rf .tfgrid-compose/\n</code></pre></p>"},{"location":"troubleshooting/guide/#wireguard-cleanup","title":"WireGuard Cleanup","text":"<p>When to clean:</p> <ul> <li>Deployment destroyed but WireGuard still running</li> <li>Interface conflicts</li> <li>Network issues</li> </ul> <p>Cleanup: <pre><code># 1. List all interfaces\nsudo wg show\n\n# 2. Stop tfgrid-compose interfaces (wg0, wg1, etc.)\nsudo wg-quick down wg0\nsudo wg-quick down wg1\n\n# 3. Remove configurations\nsudo rm -f /etc/wireguard/wg*.conf\n\n# 4. Verify cleanup\nsudo wg show  # Should show nothing\n</code></pre></p>"},{"location":"troubleshooting/guide/#log-analysis","title":"Log Analysis","text":""},{"location":"troubleshooting/guide/#log-locations","title":"Log Locations","text":"<p>All logs stored in <code>.tfgrid-compose/</code>:</p> <pre><code>.tfgrid-compose/\n\u251c\u2500\u2500 terraform-init.log      # Terraform initialization\n\u251c\u2500\u2500 terraform-plan.log      # Terraform plan output\n\u251c\u2500\u2500 terraform-apply.log     # Terraform apply (deployment)\n\u251c\u2500\u2500 terraform-destroy.log   # Terraform destroy\n\u251c\u2500\u2500 ansible.log            # Ansible playbook execution\n\u251c\u2500\u2500 hook-setup.log         # Setup hook output (if exists)\n\u251c\u2500\u2500 hook-configure.log     # Configure hook output\n\u2514\u2500\u2500 hook-healthcheck.log   # Health check output\n</code></pre>"},{"location":"troubleshooting/guide/#reading-logs","title":"Reading Logs","text":"<p>Terraform Logs: <pre><code># Check for errors in Terraform apply\ncat .tfgrid-compose/terraform-apply.log | grep -i error\n\n# Check last 50 lines\ntail -50 .tfgrid-compose/terraform-apply.log\n\n# Real-time monitoring\ntail -f .tfgrid-compose/terraform-apply.log\n</code></pre></p> <p>Ansible Logs: <pre><code># Check for failed tasks\ncat .tfgrid-compose/ansible.log | grep -i \"failed:\"\n\n# Check for warnings\ncat .tfgrid-compose/ansible.log | grep -i \"warn\"\n\n# Extract summary\ncat .tfgrid-compose/ansible.log | grep \"PLAY RECAP\" -A 5\n</code></pre></p> <p>Hook Logs: <pre><code># Check setup hook\ncat .tfgrid-compose/hook-setup.log\n\n# All hooks\ntail -n 20 .tfgrid-compose/hook-*.log\n</code></pre></p>"},{"location":"troubleshooting/guide/#state-inspection","title":"State Inspection","text":""},{"location":"troubleshooting/guide/#viewing-state","title":"Viewing State","text":"<p>State File: <pre><code># View full state\ncat .tfgrid-compose/state.yaml\n\n# Pretty print (if yq installed)\nyq . .tfgrid-compose/state.yaml\n\n# Extract specific values\ngrep primary_ip .tfgrid-compose/state.yaml\ngrep deployment_name .tfgrid-compose/state.yaml\n</code></pre></p> <p>Terraform State: <pre><code>cd .tfgrid-compose/terraform\n\n# Show all resources\ntofu show\n\n# List resources\ntofu state list\n\n# Show specific resource\ntofu state show grid_deployment.vm\n\n# Extract outputs\ntofu output\ntofu output primary_ip\ntofu output -json  # JSON format\n</code></pre></p>"},{"location":"troubleshooting/guide/#state-validation","title":"State Validation","text":"<p>Check State Integrity: <pre><code># 1. Verify state file exists\ntest -f .tfgrid-compose/state.yaml &amp;&amp; echo \"OK\" || echo \"Missing\"\n\n# 2. Check required fields\ngrep -q \"primary_ip:\" .tfgrid-compose/state.yaml &amp;&amp; echo \"IP OK\"\ngrep -q \"deployment_name:\" .tfgrid-compose/state.yaml &amp;&amp; echo \"Name OK\"\n\n# 3. Verify Terraform state\ncd .tfgrid-compose/terraform\ntofu validate\ntofu plan  # Should show \"No changes\"\n</code></pre></p>"},{"location":"troubleshooting/guide/#faq","title":"FAQ","text":""},{"location":"troubleshooting/guide/#general","title":"General","text":"<p>Q: Can I deploy multiple apps at once? A: Currently (v0.9.0), only one deployment per directory. Multi-deployment support coming in v0.10.0.</p> <p>Workaround: <pre><code># Use separate directories\ncd ~/projects/app1\ntfgrid-compose up .\n\ncd ~/projects/app2\ntfgrid-compose up .\n</code></pre></p> <p>Q: How do I update my deployment? A: Destroy and redeploy: <pre><code>tfgrid-compose down &lt;app&gt;\ntfgrid-compose up &lt;app&gt;\n</code></pre></p> <p>Future (v0.11.0): <code>tfgrid-compose update &lt;app&gt;</code> for in-place updates</p> <p>Q: Can I use my own SSH key? A: Yes, tfgrid-compose automatically uses keys from <code>~/.ssh/</code>: <pre><code># Uses these keys (in order):\n~/.ssh/id_ed25519.pub\n~/.ssh/id_rsa.pub\n~/.ssh/id_ecdsa.pub\n</code></pre></p> <p>To use specific key, set in pattern config.</p> <p>Q: How much does deployment cost? A: Depends on resources:</p> <ul> <li>VM: ~$2-10/month</li> <li>Storage: ~$0.15/GB/month</li> <li>Network: Usually included</li> </ul> <p>Check ThreeFold pricing: https://threefold.io/pricing</p>"},{"location":"troubleshooting/guide/#technical","title":"Technical","text":"<p>Q: OpenTofu vs Terraform - which should I use? A: OpenTofu is recommended:</p> <ul> <li>Open source (Apache 2.0)</li> <li>Community-driven</li> <li>Compatible with Terraform</li> <li>No license restrictions</li> </ul> <p>tfgrid-compose automatically detects and prefers OpenTofu.</p> <p>Q: Can I customize the Ansible playbook? A: Yes! Each pattern has a platform/ directory: <pre><code>patterns/single-vm/platform/\n\u2514\u2500\u2500 site.yml  # Main playbook\n\n# Copy pattern and modify:\ncp -r patterns/single-vm patterns/my-custom\n# Edit patterns/my-custom/platform/site.yml\n# Use: pattern: my-custom\n</code></pre></p> <p>Q: How do I add custom packages? A: Use app hooks: <pre><code># tfgrid-compose.yaml\nhooks:\n  setup: ./deployment/hooks/setup.sh\n</code></pre></p> <pre><code># deployment/hooks/setup.sh\n#!/bin/bash\napt update\napt install -y python3 nodejs npm\n</code></pre> <p>Q: Can I use a different region/node? A: Yes, specify in config: <pre><code># tfgrid-compose.yaml\nconfig:\n  node: 142  # Different node ID\n</code></pre></p> <p>Find nodes: https://dashboard.grid.tf/</p> <p>Q: How do I access the VM? A: Via SSH: <pre><code># Get IP from state\ncat .tfgrid-compose/state.yaml | grep primary_ip\n\n# SSH in\nssh root@&lt;primary-ip&gt;\n\n# Or use helper command\ntfgrid-compose ssh &lt;app&gt;\n</code></pre></p> <p>Q: Can I use this for production? A: Yes! tfgrid-compose v0.9.0 is production-ready. Recommendations:</p> <ul> <li>Use gateway pattern for web apps (public IP + SSL)</li> <li>Enable monitoring</li> <li>Set up backups</li> <li>Use version control for configuration</li> <li>Test deployments in staging first</li> </ul>"},{"location":"troubleshooting/guide/#troubleshooting","title":"Troubleshooting","text":"<p>Q: Deployment takes too long A: Typical times:</p> <ul> <li>Infrastructure: 30-60s</li> <li>Network setup: 5-10s</li> <li>SSH wait: 30-90s</li> <li>Platform config: 60-120s</li> <li>Total: 2-5 minutes</li> </ul> <p>If longer:</p> <ul> <li>Check node availability (may be slow/busy)</li> <li>Check network connectivity</li> <li>Try different node</li> </ul> <p>Q: \"Connection refused\" on SSH A: VM may still be booting: <pre><code># Wait 2-3 minutes then retry\nsleep 120\nssh root@&lt;primary-ip&gt;\n\n# Check VM status via Dashboard\n</code></pre></p> <p>Q: How do I change VM resources after deployment? A: Currently requires redeploy: <pre><code># 1. Update config\n# Edit tfgrid-compose.yaml:\nconfig:\n  cpu: 8     # Increased\n  memory: 16384\n\n# 2. Redeploy\ntfgrid-compose down &lt;app&gt;\ntfgrid-compose up &lt;app&gt;\n</code></pre></p> <p>Future: In-place resource updates</p> <p>Q: WireGuard says \"permission denied\" A: WireGuard requires root: <pre><code># Check if sudo is needed\nsudo wg show\n\n# tfgrid-compose will prompt for sudo when needed\n</code></pre></p>"},{"location":"troubleshooting/guide/#getting-help","title":"Getting Help","text":""},{"location":"troubleshooting/guide/#before-asking","title":"Before Asking","text":"<ol> <li> <p>Check logs: <pre><code>tail -50 .tfgrid-compose/*.log\n</code></pre></p> </li> <li> <p>Search documentation:</p> </li> <li>Architecture</li> <li>Quick Start</li> <li> <p>Pattern Contract</p> </li> <li> <p>Check state: <pre><code>cat .tfgrid-compose/state.yaml\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/guide/#reporting-issues","title":"Reporting Issues","text":"<p>Include in bug reports:</p> <ol> <li> <p>Environment: <pre><code># OS and version\nuname -a\n\n# tfgrid-compose version\ntfgrid-compose --version\n\n# Tool versions\ntofu --version || terraform --version\nansible --version\n</code></pre></p> </li> <li> <p>Full error output: <pre><code># Redacted mnemonic!\ncat .tfgrid-compose/terraform-apply.log\n</code></pre></p> </li> <li> <p>Steps to reproduce</p> </li> <li> <p>Configuration: <pre><code># tfgrid-compose.yaml (redact sensitive data)\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/guide/#support-channels","title":"Support Channels","text":"<p>GitHub Issues:</p> <ul> <li>Bug reports: https://github.com/tfgrid-studio/tfgrid-compose/issues</li> <li>Feature requests: Label as \"enhancement\"</li> </ul> <p>Discussions:</p> <ul> <li>Questions: https://github.com/orgs/tfgrid-studio/discussions</li> <li>Community help</li> </ul> <p>Documentation:</p> <ul> <li>Docs site: https://docs.tfgrid.studio</li> <li>GitHub: https://github.com/tfgrid-studio</li> </ul> <p>ThreeFold Resources:</p> <ul> <li>ThreeFold Manual: https://manual.grid.tf/</li> <li>ThreeFold Forum: https://forum.threefold.io/</li> <li>ThreeFold Support: https://threefold.io/support</li> </ul>"},{"location":"troubleshooting/guide/#quick-reference","title":"Quick Reference","text":""},{"location":"troubleshooting/guide/#common-commands","title":"Common Commands","text":"<pre><code># Deploy\ntfgrid-compose up &lt;app-path&gt;\n\n# Status\ntfgrid-compose status &lt;app-path&gt;\n\n# SSH\ntfgrid-compose ssh &lt;app-path&gt;\n\n# Execute command\ntfgrid-compose exec &lt;app-path&gt; &lt;command&gt;\n\n# Destroy\ntfgrid-compose down &lt;app-path&gt;\n\n# Clean state\nrm -rf .tfgrid-compose/\n\n# Check logs\ntail -f .tfgrid-compose/terraform-apply.log\ntail -f .tfgrid-compose/ansible.log\n</code></pre>"},{"location":"troubleshooting/guide/#emergency-recovery","title":"Emergency Recovery","text":"<pre><code># Nuclear option: clean everything\ntfgrid-compose down &lt;app&gt;\nrm -rf .tfgrid-compose/\nsudo wg-quick down wg0 2&gt;/dev/null || true\nsudo rm -f /etc/wireguard/wg*.conf\n\n# Then try fresh deployment\ntfgrid-compose up &lt;app&gt;\n</code></pre> <p>Document Status: Active Last Updated: 2025-10-14 Next Review: After user feedback from v0.9.0 release</p>"}]}