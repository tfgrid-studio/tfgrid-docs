{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TFGrid Studio Documentation","text":"<p>Complete development platform for ThreeFold Grid</p> <p>Build, deploy, and scale decentralized applications with <code>tfgrid-compose</code> CLI and integrated tools.</p> <p>\ud83c\udf10 New here? Check out our main website for an overview of TFGrid Studio, pricing, and features.</p>"},{"location":"#what-is-tfgrid-studio","title":"\ud83c\udfaf What is TFGrid Studio?","text":"<p>TFGrid Studio is a complete development platform for ThreeFold Grid. The flagship tool, tfgrid-compose, brings docker-compose-style simplicity to decentralized deployments.</p> <pre><code># Deploy any application with one command\ntfgrid-compose up my-app\n</code></pre> <p>No vendor lock-in. Industry standards. Decentralized infrastructure.</p>"},{"location":"#current-status","title":"\u2728 Current Status","text":""},{"location":"#production-ready-v200","title":"\u2705 Production Ready (v2.0.0)","text":"Component Status Description tfgrid-compose \u2705 v2.0.0 Universal orchestrator with all 3 patterns tfgrid-ai-agent \u2705 v2.0.0 AI coding agent (reference application) Single-VM Pattern \u2705 Production Deploy isolated VMs with private networking Gateway Pattern \u2705 Production Multi-VM with public access and SSL K3s Pattern \u2705 Production Full Kubernetes cluster deployment Context Files \u2705 Production Simplified workflow with <code>.tfgrid-compose.yaml</code> Agent Subcommand \u2705 Production AI agent management built-in"},{"location":"#coming-soon","title":"\ud83d\udea7 Coming Soon","text":"Component Status Timeline Source Web Dashboard \ud83d\udccb Future Q2 2026 SaaS offering Marketplace \ud83d\udccb Future Q3 2026 One-click app deployment"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"#1-install-tfgrid-compose","title":"1. Install tfgrid-compose","text":"<pre><code># Clone and install\ngit clone https://github.com/tfgrid-studio/tfgrid-compose\ncd tfgrid-compose\nmake install\n\n# Verify installation\ntfgrid-compose --version\n</code></pre>"},{"location":"#2-configure-threefold","title":"2. Configure ThreeFold","text":"<pre><code># Store your mnemonic\nmkdir -p ~/.config/threefold\necho \"your mnemonic words\" &gt; ~/.config/threefold/mnemonic\nchmod 600 ~/.config/threefold/mnemonic\n</code></pre>"},{"location":"#3-create-context-file-optional-but-recommended","title":"3. Create Context File (Optional but Recommended)","text":"<pre><code># In your project directory\necho \"app: ../tfgrid-ai-agent\" &gt; .tfgrid-compose.yaml\n</code></pre>"},{"location":"#4-deploy","title":"4. Deploy","text":"<pre><code># With context file\ntfgrid-compose up\n\n# Or specify app path\ntfgrid-compose up ../tfgrid-ai-agent\n</code></pre> <p>That's it! Your application is now running on ThreeFold Grid. \ud83c\udf89</p>"},{"location":"#documentation-overview","title":"\ud83d\udcda Documentation Overview","text":""},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Introduction - What is TFGrid Compose and why use it</li> <li>Installation - Install and configure tfgrid-compose</li> <li>Quick Start - Deploy your first application in 5 minutes</li> <li>Core Concepts - Understand patterns, apps, and manifests</li> </ul>"},{"location":"#deployment-patterns","title":"Deployment Patterns","text":"<ul> <li>Pattern Overview - Understanding the pattern system</li> <li>Single-VM Pattern - \u2705 Production ready</li> <li>Gateway Pattern - \u2705 Production ready</li> <li>K3s Pattern - \u2705 Production ready</li> </ul>"},{"location":"#applications","title":"Applications","text":"<ul> <li>Application Overview - How apps work in TFGrid Compose</li> <li>TFGrid AI Agent - \u2705 AI coding agent</li> <li>Creating Apps - Build your own deployable apps</li> </ul>"},{"location":"#cli-reference","title":"CLI Reference","text":"<ul> <li>CLI Commands - Complete command reference</li> <li>App Manifest - <code>tfgrid-compose.yaml</code> specification</li> <li>Context File - <code>.tfgrid-compose.yaml</code> usage</li> <li>State Management - How state is tracked</li> <li>Environment Variables - Configuration options</li> </ul>"},{"location":"#guides","title":"Guides","text":"<ul> <li>Migration Guide - Migrate from standalone repos</li> <li>Advanced Deployment - Production deployment strategies</li> <li>Networking - WireGuard and Mycelium setup</li> <li>Security - Security best practices</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<ul> <li>System Architecture - How TFGrid Compose works</li> <li>Design Decisions - Why we built it this way</li> <li>Source Repositories - Acknowledgment of source work</li> <li>Comparison - vs standalone repos, vs other platforms</li> </ul>"},{"location":"#roadmap-contributing","title":"Roadmap &amp; Contributing","text":"<ul> <li>Current Status - \u2705 What's working now (v2.0.0 Complete First Layer)</li> <li>Planned Features - \ud83d\udea7 What's coming next</li> <li>Changelog - Version history</li> <li>Contributing - How to contribute</li> </ul>"},{"location":"#use-cases","title":"\ud83c\udfaf Use Cases","text":""},{"location":"#aiml-development","title":"AI/ML Development","text":"<p>Deploy isolated AI coding environments on ThreeFold Grid. <pre><code>tfgrid-compose up tfgrid-ai-agent\n</code></pre></p>"},{"location":"#web-applications","title":"Web Applications","text":"<p>Deploy web apps with public IPv4, SSL, and reverse proxy. <pre><code>tfgrid-compose up my-webapp --pattern=gateway --domain=myapp.com\n</code></pre></p>"},{"location":"#cloud-native-apps","title":"Cloud-Native Apps","text":"<p>Deploy microservices on Kubernetes clusters. <pre><code>tfgrid-compose up my-saas --pattern=k3s\n</code></pre></p>"},{"location":"#databases","title":"Databases","text":"<p>Deploy databases with persistent storage and private networking. <pre><code>tfgrid-compose up my-postgres --pattern=single-vm\n</code></pre></p>"},{"location":"#why-tfgrid-compose","title":"\ud83d\udca1 Why TFGrid Compose?","text":""},{"location":"#no-vendor-lock-in","title":"\u2705 No Vendor Lock-in","text":"<p>Uses industry standards: Terraform, Ansible, Kubernetes. Your apps aren't locked to ThreeFold Grid.</p>"},{"location":"#simple-powerful","title":"\u2705 Simple &amp; Powerful","text":"<p>Heroku-like UX with production-ready patterns. One command to deploy, full control when needed.</p>"},{"location":"#decentralized-infrastructure","title":"\u2705 Decentralized Infrastructure","text":"<p>Runs on ThreeFold Grid: decentralized compute, no single point of failure, cost-effective.</p>"},{"location":"#open-source","title":"\u2705 Open Source","text":"<p>Apache 2.0 license. Free to use, modify, and distribute. Community-driven development.</p>"},{"location":"#battle-tested","title":"\u2705 Battle-Tested","text":"<p>Built from proven, working implementations: - Gateway pattern: Based on mik-tf/tfgrid-gateway - K3s pattern: Based on ucli-tools/tfgrid-k3s - AI agent: Based on mik-tf/tfgrid-ai-agent</p>"},{"location":"#links","title":"\ud83d\udd17 Links","text":"<ul> <li>Website: tfgrid.studio - Marketing site</li> <li>Documentation: docs.tfgrid.studio - You are here!</li> <li>GitHub: github.com/tfgrid-studio - Organization</li> <li>CLI Tool: tfgrid-compose - Main repository</li> <li>AI Agent: tfgrid-ai-agent - AI development</li> <li>ThreeFold Grid: threefold.io - Infrastructure</li> </ul>"},{"location":"#community-support","title":"\ud83e\udd1d Community &amp; Support","text":"<ul> <li>Discussions: GitHub Discussions</li> <li>Issues: Open issues in respective repositories</li> <li>Contributing: See contributing guide</li> </ul>"},{"location":"#license","title":"\ud83d\udcdc License","text":"<p>FOSS Repositories: Apache 2.0 License Commercial Repositories: Business Source License / Proprietary</p> <p>See individual repositories for details.</p> <p>Made with \ud83d\udd25 for the decentralized web</p> <p>Get Started \u2022 View on GitHub</p>"},{"location":"architecture/source-repos/","title":"Source Repositories &amp; Acknowledgments","text":"<p>TFGrid Compose was built by extracting and unifying proven, production-ready implementations.</p>"},{"location":"architecture/source-repos/#philosophy","title":"\ud83c\udfaf Philosophy","text":"<p>TFGrid Compose is not built from scratch. Instead, it:</p> <ol> <li>Extracts working code from proven repositories</li> <li>Unifies them under a common deployer framework  </li> <li>Simplifies the deployment experience</li> <li>Standardizes the workflow</li> </ol> <p>This approach provides: - \u2705 Battle-tested code - Already working in production - \u2705 Faster development - No reinventing the wheel - \u2705 Lower risk - Proven architectures - \u2705 Quality assurance - Real-world validation</p>"},{"location":"architecture/source-repos/#source-repositories","title":"\ud83d\udce6 Source Repositories","text":""},{"location":"architecture/source-repos/#integrated-current","title":"\u2705 Integrated (Current)","text":""},{"location":"architecture/source-repos/#1-tfgrid-ai-agent-mik-tf","title":"1. tfgrid-ai-agent (mik-tf)","text":"<p>Source: mik-tf/tfgrid-ai-agent Author: mik-tf Status: \u2705 Fully integrated into TFGrid Compose (v1.0.0)</p> <p>What it provides: - Complete AI coding agent deployment - Qwen AI integration - Project management system - Remote execution workflows - Git integration - Developer user provisioning</p> <p>Integration: <pre><code>Source: github.com/mik-tf/tfgrid-ai-agent\n  \u2193\nExtracted:\n  \u2022 Infrastructure code \u2192 patterns/single-vm/infrastructure/\n  \u2022 Platform config \u2192 patterns/single-vm/platform/\n  \u2022 AI agent app \u2192 tfgrid-compose/tfgrid-ai-agent/\n  \u2193\nResult: tfgrid-ai-agent deployable via tfgrid-compose\n</code></pre></p> <p>Changes made: - \u2705 Extracted infrastructure as reusable pattern - \u2705 Separated app from deployment logic - \u2705 Created manifest system (<code>tfgrid-compose.yaml</code>) - \u2705 Fixed project directory structure (Oct 8, 2025) - \u2705 Unified CLI commands</p> <p>Before (Standalone): <pre><code>cd tfgrid-ai-agent\nmake deploy\nmake login\nmake create project=my-app\n</code></pre></p> <p>After (TFGrid Compose): <pre><code>tfgrid-compose up\ntfgrid-compose agent login\ntfgrid-compose agent create\n</code></pre></p>"},{"location":"architecture/source-repos/#planned-integration-q4-2025","title":"\ud83d\udea7 Planned Integration (Q4 2025)","text":""},{"location":"architecture/source-repos/#2-tfgrid-gateway-mik-tf","title":"2. tfgrid-gateway (mik-tf)","text":"<p>Source: mik-tf/tfgrid-gateway Author: mik-tf Status: \ud83d\udea7 Planned for integration (Q4 2025)</p> <p>What it provides: - Public IPv4 gateway deployment - NAT-based gateway (nftables) - Proxy-based gateway (HAProxy + Nginx) - SSL/TLS automation (Let's Encrypt) - WireGuard + Mycelium networking - Network redundancy features - Live demo system with status pages - Port forwarding configuration - Path-based routing</p> <p>Key features: - \u2705 Dual gateway modes: NAT vs Proxy - \u2705 SSL certificates: Free Let's Encrypt with auto-renewal - \u2705 Network redundancy: WireGuard + Mycelium both mode - \u2705 Flexible access: Port-based or path-based - \u2705 Security features: Disable public port forwarding - \u2705 Production-ready: Used in real deployments</p> <p>Planned integration: <pre><code>Source: github.com/mik-tf/tfgrid-gateway\n  \u2193\nExtract:\n  \u2022 Gateway infrastructure \u2192 patterns/gateway/infrastructure/\n  \u2022 NAT/Proxy configs \u2192 patterns/gateway/platform/\n  \u2022 SSL automation \u2192 patterns/gateway/ssl/\n  \u2022 Network configs \u2192 patterns/gateway/networking/\n  \u2193\nResult: Gateway pattern in tfgrid-compose\n</code></pre></p> <p>Usage (after integration): <pre><code>tfgrid-compose up my-webapp --pattern=gateway --domain=myapp.com\n</code></pre></p> <p>Repository stats: - 1,054 commits - Complete Terraform + Ansible implementation - Comprehensive documentation - Production deployments validated</p>"},{"location":"architecture/source-repos/#3-tfgrid-k3s-ucli-tools","title":"3. tfgrid-k3s (ucli-tools)","text":"<p>Source: ucli-tools/tfgrid-k3s Organization: ucli-tools Status: \ud83d\udea7 Planned for integration (Q1 2026)</p> <p>What it provides: - Complete K3s cluster deployment - Multi-node orchestration (control + workers) - Management node with K9s TUI - MetalLB load balancer - Nginx Ingress controller - Dual-stack networking (IPv4/IPv6) - High availability support - Auto-scaling workers</p> <p>Key features: - \u2705 K3s lightweight Kubernetes - Production-grade - \u2705 Management node: kubectl, K9s, Helm pre-installed - \u2705 Load balancing: MetalLB with IPv4/IPv6 support - \u2705 Ingress: Nginx Ingress controller - \u2705 Networking: Flannel CNI + WireGuard + Mycelium - \u2705 Scalability: Add nodes dynamically - \u2705 Production-ready: Real cluster deployments</p> <p>Planned integration: <pre><code>Source: github.com/ucli-tools/tfgrid-k3s\n  \u2193\nExtract:\n  \u2022 Cluster infrastructure \u2192 patterns/k3s/infrastructure/\n  \u2022 K3s playbooks \u2192 patterns/k3s/platform/\n  \u2022 MetalLB/Ingress \u2192 patterns/k3s/components/\n  \u2022 Management node \u2192 patterns/k3s/management/\n  \u2193\nResult: K3s pattern in tfgrid-compose\n</code></pre></p> <p>Usage (after integration): <pre><code>tfgrid-compose up my-saas --pattern=k3s\ntfgrid-compose kubectl get nodes\ntfgrid-compose k9s\n</code></pre></p> <p>Repository stats: - 522 commits - Complete K3s automation - Comprehensive K9s integration - Production cluster deployments</p>"},{"location":"architecture/source-repos/#ai-agent-framework-mik-tf","title":"\ud83d\udd17 ai-agent Framework (mik-tf)","text":"<p>Source: mik-tf/ai-agent Author: mik-tf Status: \u2705 Dependency of tfgrid-ai-agent</p> <p>What it provides: - AI coding loop technique - Qwen CLI integration - Project management framework - Continuous automation system</p> <p>Inspiration: Based on the \"Ralph\" coding technique by Geoff Huntley, extended into a production-ready automation platform.</p> <p>Usage: This framework is automatically installed on tfgrid-ai-agent VMs and provides the underlying AI automation capabilities.</p>"},{"location":"architecture/source-repos/#extraction-integration-process","title":"\ud83c\udfd7\ufe0f Extraction &amp; Integration Process","text":""},{"location":"architecture/source-repos/#phase-1-single-vm-pattern-complete","title":"Phase 1: Single-VM Pattern (\u2705 Complete)","text":"<p>Source: Infrastructure from mik-tf/tfgrid-ai-agent</p> <p>Extraction: 1. \u2705 Terraform configs extracted 2. \u2705 Ansible playbooks generalized 3. \u2705 WireGuard setup automated 4. \u2705 Pattern metadata created 5. \u2705 Documentation written</p> <p>Result: - Reusable single-vm pattern - Works with any application - Clean separation of concerns</p>"},{"location":"architecture/source-repos/#phase-2-gateway-pattern-q4-2025","title":"Phase 2: Gateway Pattern (\ud83d\udea7 Q4 2025)","text":"<p>Source: mik-tf/tfgrid-gateway (complete repo)</p> <p>Plan:</p> <ul> <li> Extract Terraform multi-VM configs</li> <li> Extract Ansible NAT/proxy playbooks</li> <li> Extract SSL automation (certbot)</li> <li> Create gateway pattern structure</li> <li> Adapt to manifest system</li> <li> Test with multiple apps</li> <li> Write pattern documentation</li> </ul> <p>Complexity: Medium Timeline: 2-4 weeks Risk: Low (code exists and works)</p>"},{"location":"architecture/source-repos/#phase-3-k3s-pattern-q1-2026","title":"Phase 3: K3s Pattern (\ud83d\udea7 Q1 2026)","text":"<p>Source: ucli-tools/tfgrid-k3s (complete repo)</p> <p>Plan:</p> <ul> <li> Extract Terraform cluster configs</li> <li> Extract Ansible K3s playbooks</li> <li> Extract MetalLB/Ingress configs</li> <li> Create k3s pattern structure</li> <li> Add Helm chart support</li> <li> GitOps integration</li> <li> Write pattern documentation</li> </ul> <p>Complexity: High Timeline: 4-6 weeks Risk: Medium (more complex integration)</p>"},{"location":"architecture/source-repos/#what-we-learned","title":"\ud83c\udf93 What We Learned","text":""},{"location":"architecture/source-repos/#from-mik-tftfgrid-ai-agent","title":"From mik-tf/tfgrid-ai-agent","text":"<ul> <li>\u2705 Clean deployment hooks - setup \u2192 configure \u2192 healthcheck</li> <li>\u2705 Developer user system - Non-root user provisioning</li> <li>\u2705 Remote execution - Run commands from local machine</li> <li>\u2705 Project organization - Structured workspace</li> </ul>"},{"location":"architecture/source-repos/#from-mik-tftfgrid-gateway","title":"From mik-tf/tfgrid-gateway","text":"<ul> <li>\u2705 Dual gateway modes - NAT vs Proxy flexibility</li> <li>\u2705 SSL automation - Let's Encrypt integration</li> <li>\u2705 Network redundancy - Multiple network paths</li> <li>\u2705 Security controls - Granular access control</li> </ul>"},{"location":"architecture/source-repos/#from-ucli-toolstfgrid-k3s","title":"From ucli-tools/tfgrid-k3s","text":"<ul> <li>\u2705 Management node pattern - Dedicated cluster control</li> <li>\u2705 Component integration - MetalLB + Ingress automation</li> <li>\u2705 Dual-stack networking - IPv4/IPv6 support</li> <li>\u2705 K9s TUI - Better cluster management UX</li> </ul>"},{"location":"architecture/source-repos/#acknowledgments","title":"\ud83d\ude4f Acknowledgments","text":""},{"location":"architecture/source-repos/#individual-contributors","title":"Individual Contributors","text":"<p>mik-tf - Created tfgrid-ai-agent (complete AI deployment) - Created tfgrid-gateway (gateway patterns, SSL, networking) - Created ai-agent framework (loop technique) - Provided foundation for TFGrid Compose</p> <p>ucli-tools organization - Created tfgrid-k3s (complete K3s cluster deployment) - Advanced Kubernetes automation - Management node patterns</p> <p>Geoff Huntley - Pioneered \"Ralph\" AI coding technique - Inspired ai-agent framework</p>"},{"location":"architecture/source-repos/#threefold-community","title":"ThreeFold Community","text":"<ul> <li>ThreeFold Grid infrastructure</li> <li>Terraform provider</li> <li>Community support</li> </ul>"},{"location":"architecture/source-repos/#code-origin-breakdown","title":"\ud83d\udcca Code Origin Breakdown","text":""},{"location":"architecture/source-repos/#current-v100","title":"Current (v1.0.0)","text":"Component Source Integration Infrastructure mik-tf/tfgrid-ai-agent \u2705 Extracted as pattern Platform config mik-tf/tfgrid-ai-agent \u2705 Generalized for reuse AI agent app mik-tf/tfgrid-ai-agent \u2705 Separated from deployer CLI tool TFGrid Compose \u2705 Built from scratch Context files TFGrid Compose \u2705 New feature Agent subcommand TFGrid Compose \u2705 New feature"},{"location":"architecture/source-repos/#planned","title":"Planned","text":"Component Source Integration Gateway pattern mik-tf/tfgrid-gateway \ud83d\udea7 Q4 2025 K3s pattern ucli-tools/tfgrid-k3s \ud83d\udea7 Q1 2026"},{"location":"architecture/source-repos/#differences-from-source","title":"\ud83d\udd04 Differences from Source","text":""},{"location":"architecture/source-repos/#whats-new-in-tfgrid-compose","title":"What's New in TFGrid Compose","text":"<p>Features not in source repos:</p> <ul> <li>\u2705 Universal deployer - Single CLI for all patterns</li> <li>\u2705 Manifest system - <code>tfgrid-compose.yaml</code> for apps</li> <li>\u2705 Context files - <code>.tfgrid-compose.yaml</code> for projects</li> <li>\u2705 Agent subcommand - Simplified AI agent operations</li> <li>\u2705 Pattern system - Reusable deployment strategies</li> <li>\u2705 State management - Track all deployments</li> <li>\u2705 Unified CLI - Consistent commands across patterns</li> </ul> <p>Simplifications:</p> <ul> <li>\u2705 One command deployment (<code>tfgrid-compose up</code>)</li> <li>\u2705 Auto-detect configurations</li> <li>\u2705 Smart defaults</li> <li>\u2705 Better error messages</li> <li>\u2705 Idempotent operations</li> </ul>"},{"location":"architecture/source-repos/#whats-preserved","title":"What's Preserved","text":"<p>Kept from source repos:</p> <ul> <li>\u2705 All core functionality</li> <li>\u2705 Infrastructure code (Terraform)</li> <li>\u2705 Platform configs (Ansible)</li> <li>\u2705 Network setup (WireGuard, Mycelium)</li> <li>\u2705 Best practices</li> <li>\u2705 Production readiness</li> </ul>"},{"location":"architecture/source-repos/#migration-guides","title":"\ud83d\udcd6 Migration Guides","text":""},{"location":"architecture/source-repos/#from-mik-tftfgrid-ai-agent_1","title":"From mik-tf/tfgrid-ai-agent","text":"<p>Before: <pre><code>git clone https://github.com/mik-tf/tfgrid-ai-agent\ncd tfgrid-ai-agent\nmake deploy\n</code></pre></p> <p>After: <pre><code>git clone https://github.com/tfgrid-studio/tfgrid-compose\ncd tfgrid-compose\nmake install\ntfgrid-compose up ../tfgrid-ai-agent\n</code></pre></p> <p>Benefits: - \u2705 Simpler commands - \u2705 Context file support - \u2705 Pattern reusability - \u2705 Better documentation</p> <p>Complete migration guide \u2192</p>"},{"location":"architecture/source-repos/#external-links","title":"\ud83d\udd17 External Links","text":""},{"location":"architecture/source-repos/#source-repositories_1","title":"Source Repositories","text":"<ul> <li>mik-tf/tfgrid-ai-agent</li> <li>mik-tf/tfgrid-gateway</li> <li>ucli-tools/tfgrid-k3s</li> <li>mik-tf/ai-agent</li> </ul>"},{"location":"architecture/source-repos/#tfgrid-compose-organization","title":"TFGrid Compose Organization","text":"<ul> <li>tfgrid-compose</li> <li>tfgrid-compose</li> <li>tfgrid-ai-agent</li> <li>tfgrid-docs</li> </ul>"},{"location":"architecture/source-repos/#license-attribution","title":"\ud83d\udcdc License &amp; Attribution","text":""},{"location":"architecture/source-repos/#source-code-licenses","title":"Source Code Licenses","text":"<p>From source repos: - tfgrid-ai-agent: Apache 2.0 License - tfgrid-gateway: Apache 2.0 License - tfgrid-k3s: Apache 2.0 License</p> <p>TFGrid Compose: - tfgrid-compose: Apache 2.0 License - tfgrid-ai-agent: Apache 2.0 License - Commercial repos: Business Source License / Proprietary</p>"},{"location":"architecture/source-repos/#attribution","title":"Attribution","text":"<p>All source repositories are properly credited in: - \u2705 README files - \u2705 Documentation - \u2705 Code comments - \u2705 This acknowledgment page</p> <p>Thank you to all contributors who made TFGrid Compose possible! \ud83d\ude4f</p> <p>View current status \u2192 \u2022 View planned features \u2192</p>"},{"location":"getting-started/concepts/","title":"Core Concepts","text":"<p>Coming Soon</p> <p>This page will cover: - Apps and manifests - Deployment patterns - State management - Hook system</p> <p>Back to Getting Started</p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>Complete setup guide for TFGrid Compose.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":""},{"location":"getting-started/installation/#required-software","title":"Required Software","text":"Tool Purpose Installation Terraform or OpenTofu Infrastructure provisioning Install Ansible Platform configuration Install WireGuard Secure networking Install Git Version control Usually pre-installed"},{"location":"getting-started/installation/#threefold-account","title":"ThreeFold Account","text":"<ol> <li>Create Account: ThreeFold Connect</li> <li>Get TFT Tokens: Purchase or earn TFT</li> <li>Save Mnemonic: 12-word recovery phrase</li> </ol>"},{"location":"getting-started/installation/#install-prerequisites","title":"Install Prerequisites","text":""},{"location":"getting-started/installation/#ubuntudebian","title":"Ubuntu/Debian","text":"<pre><code># OpenTofu\ncurl --proto '=https' --tlsv1.2 -fsSL https://get.opentofu.org/install-opentofu.sh | bash\n\n# Ansible\nsudo apt update\nsudo apt install ansible\n\n# WireGuard\nsudo apt install wireguard\n\n# Optional tools\nsudo apt install jq curl wget git\n</code></pre>"},{"location":"getting-started/installation/#macos","title":"macOS","text":"<pre><code># Using Homebrew\nbrew install opentofu ansible wireguard-tools jq\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<pre><code># Check versions\ntofu version         # or: terraform version\nansible --version\nwg --version\ngit --version\n</code></pre>"},{"location":"getting-started/installation/#install-tfgrid-compose","title":"Install TFGrid Compose","text":""},{"location":"getting-started/installation/#method-1-install-script-recommended","title":"Method 1: Install Script (Recommended)","text":"<pre><code># Clone repository\ngit clone https://github.com/tfgrid-studio/tfgrid-compose\ncd tfgrid-compose\n\n# Run install script (automatically sets up PATH)\nmake install\n\n# Verify installation\ntfgrid-compose --version\n</code></pre> <p>The install script: - \u2705 Creates <code>~/.local/bin/tfgrid-compose</code> symlink - \u2705 Adds to PATH in your shell config - \u2705 Works with bash, zsh, fish</p>"},{"location":"getting-started/installation/#method-2-manual-installation","title":"Method 2: Manual Installation","text":"<pre><code># Clone repository\ngit clone https://github.com/tfgrid-studio/tfgrid-compose\ncd tfgrid-compose\n\n# Make CLI executable\nchmod +x cli/tfgrid-compose\n\n# Add to PATH (choose your shell)\n# Bash/Zsh:\necho 'export PATH=\"$PATH:'$(pwd)'/cli\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Fish:\necho 'set -gx PATH $PATH '(pwd)'/cli' &gt;&gt; ~/.config/fish/config.fish\nsource ~/.config/fish/config.fish\n\n# Verify\ntfgrid-compose --version\n</code></pre>"},{"location":"getting-started/installation/#configure-threefold","title":"Configure ThreeFold","text":""},{"location":"getting-started/installation/#1-store-mnemonic-securely","title":"1. Store Mnemonic Securely","text":"<pre><code># Create config directory\nmkdir -p ~/.config/threefold\n\n# Save mnemonic (replace with your actual mnemonic)\necho \"your twelve word mnemonic phrase here\" &gt; ~/.config/threefold/mnemonic\n\n# Set secure permissions (owner-only read/write)\nchmod 600 ~/.config/threefold/mnemonic\n\n# Verify\ncat ~/.config/threefold/mnemonic\n</code></pre> <p>Security Note: The mnemonic file should have <code>600</code> permissions (owner-only access).</p>"},{"location":"getting-started/installation/#2-set-environment-variable","title":"2. Set Environment Variable","text":"<p>The mnemonic needs to be set as an environment variable for Terraform:</p>"},{"location":"getting-started/installation/#bashzsh","title":"Bash/Zsh","text":"<pre><code># Set for current session\nexport TF_VAR_mnemonic=$(cat ~/.config/threefold/mnemonic)\n\n# Or add to shell config for persistence\necho 'export TF_VAR_mnemonic=$(cat ~/.config/threefold/mnemonic)' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre>"},{"location":"getting-started/installation/#fish","title":"Fish","text":"<pre><code># Set for current session\nset -x TF_VAR_mnemonic (cat ~/.config/threefold/mnemonic)\n\n# Or add to fish config for persistence\necho 'set -x TF_VAR_mnemonic (cat ~/.config/threefold/mnemonic)' &gt;&gt; ~/.config/fish/config.fish\nsource ~/.config/fish/config.fish\n</code></pre>"},{"location":"getting-started/installation/#3-verify-configuration","title":"3. Verify Configuration","text":"<pre><code># Check mnemonic is set\necho $TF_VAR_mnemonic\n\n# Should output your 12-word mnemonic\n</code></pre>"},{"location":"getting-started/installation/#setup-workspace-optional-but-recommended","title":"Setup Workspace (Optional but Recommended)","text":"<p>TFGrid Compose works best with an organized workspace structure:</p> <pre><code># Create standard workspace\nmkdir -p ~/code/github.com/tfgrid-studio\ncd ~/code/github.com/tfgrid-studio\n\n# Clone deployer\ngit clone https://github.com/tfgrid-studio/tfgrid-compose\n\n# Clone apps you want to deploy\ngit clone https://github.com/tfgrid-studio/tfgrid-ai-agent\n\n# Your workspace should look like:\n# ~/code/github.com/tfgrid-studio/\n# \u251c\u2500\u2500 tfgrid-compose/\n# \u2514\u2500\u2500 tfgrid-ai-agent/\n</code></pre> <p>This structure: - \u2705 Keeps everything organized - \u2705 Makes relative paths consistent - \u2705 Follows standard conventions - \u2705 Easy to manage multiple apps</p>"},{"location":"getting-started/installation/#verify-installation_1","title":"Verify Installation","text":""},{"location":"getting-started/installation/#1-check-cli","title":"1. Check CLI","text":"<pre><code># Show help\ntfgrid-compose --help\n\n# Should display:\n# TFGrid Compose - Universal deployment orchestrator\n# \n# Commands:\n#   up [app]       - Deploy application\n#   down [app]     - Destroy deployment\n#   status [app]   - Show deployment status\n#   ...\n</code></pre>"},{"location":"getting-started/installation/#2-check-prerequisites","title":"2. Check Prerequisites","text":"<pre><code># Run built-in validation\ncd tfgrid-compose\nmake check-prereqs\n\n# Should verify:\n# \u2705 Terraform/OpenTofu installed\n# \u2705 Ansible installed\n# \u2705 WireGuard installed\n# \u2705 Mnemonic configured\n</code></pre>"},{"location":"getting-started/installation/#3-test-deployment-optional","title":"3. Test Deployment (Optional)","text":"<pre><code># Deploy the AI agent to verify everything works\ncd ~/code/github.com/tfgrid-studio/tfgrid-compose\ntfgrid-compose up ../tfgrid-ai-agent\n\n# If successful, you'll see:\n# \u2705 Infrastructure deployed\n# \u2705 WireGuard configured\n# \u2705 Platform configured\n# \u2705 Application deployed\n# \u2705 Deployment complete!\n\n# Clean up test deployment\ntfgrid-compose down ../tfgrid-ai-agent\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#command-not-found","title":"Command Not Found","text":"<pre><code># Check if tfgrid-compose is in PATH\nwhich tfgrid-compose\n\n# If not found, add manually:\nexport PATH=\"$PATH:$HOME/code/github.com/tfgrid-studio/tfgrid-compose/cli\"\n</code></pre>"},{"location":"getting-started/installation/#mnemonic-not-set","title":"Mnemonic Not Set","text":"<pre><code># Check if mnemonic is configured\necho $TF_VAR_mnemonic\n\n# If empty, set it:\nexport TF_VAR_mnemonic=$(cat ~/.config/threefold/mnemonic)\n</code></pre>"},{"location":"getting-started/installation/#permission-denied","title":"Permission Denied","text":"<pre><code># Make CLI executable\nchmod +x ~/code/github.com/tfgrid-studio/tfgrid-compose/cli/tfgrid-compose\n\n# Fix mnemonic permissions\nchmod 600 ~/.config/threefold/mnemonic\n</code></pre>"},{"location":"getting-started/installation/#terraformopentofu-not-found","title":"Terraform/OpenTofu Not Found","text":"<pre><code># Install OpenTofu (recommended)\ncurl --proto '=https' --tlsv1.2 -fsSL https://get.opentofu.org/install-opentofu.sh | bash\n\n# Or install Terraform\n# See: https://www.terraform.io/downloads\n</code></pre>"},{"location":"getting-started/installation/#ansible-not-found","title":"Ansible Not Found","text":"<pre><code># Ubuntu/Debian\nsudo apt install ansible\n\n# macOS\nbrew install ansible\n\n# Verify\nansible --version\n</code></pre>"},{"location":"getting-started/installation/#wireguard-not-found","title":"WireGuard Not Found","text":"<pre><code># Ubuntu/Debian\nsudo apt install wireguard\n\n# macOS\nbrew install wireguard-tools\n\n# Verify\nwg --version\n</code></pre>"},{"location":"getting-started/installation/#optional-configuration","title":"Optional Configuration","text":""},{"location":"getting-started/installation/#context-file","title":"Context File","text":"<p>Create a context file to avoid specifying app paths:</p> <pre><code># In your deployer directory\ncd ~/code/github.com/tfgrid-studio/tfgrid-compose\necho \"app: ../tfgrid-ai-agent\" &gt; .tfgrid-compose.yaml\n\n# Now you can run commands without app path:\ntfgrid-compose up        # instead of: tfgrid-compose up ../tfgrid-ai-agent\ntfgrid-compose status    # instead of: tfgrid-compose status ../tfgrid-ai-agent\n</code></pre>"},{"location":"getting-started/installation/#shell-aliases","title":"Shell Aliases","text":"<p>Add convenient aliases to your shell config:</p> <pre><code># Bash/Zsh (~/.bashrc or ~/.zshrc)\nalias tfc='tfgrid-compose'\nalias tfc-up='tfgrid-compose up'\nalias tfc-down='tfgrid-compose down'\nalias tfc-status='tfgrid-compose status'\n\n# Fish (~/.config/fish/config.fish)\nalias tfc='tfgrid-compose'\nalias tfc-up='tfgrid-compose up'\nalias tfc-down='tfgrid-compose down'\nalias tfc-status='tfgrid-compose status'\n</code></pre>"},{"location":"getting-started/installation/#ssh-key-setup","title":"SSH Key Setup","text":"<p>If you don't have SSH keys:</p> <pre><code># Generate ed25519 key (recommended)\nssh-keygen -t ed25519 -C \"your_email@example.com\"\n\n# Or RSA key\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n\n# Accept default location (~/.ssh/id_ed25519 or ~/.ssh/id_rsa)\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Installation complete! \ud83c\udf89</p>"},{"location":"getting-started/installation/#whats-next","title":"What's Next?","text":"<ol> <li>Quick Start Guide - Deploy your first application</li> <li>Core Concepts - Understand how TFGrid Compose works</li> <li>Pattern Documentation - Learn about deployment patterns</li> </ol>"},{"location":"getting-started/installation/#upgrade","title":"Upgrade","text":"<p>To upgrade to the latest version:</p> <pre><code>cd ~/code/github.com/tfgrid-studio/tfgrid-compose\ngit pull origin main\n\n# Re-install if needed\nmake install\n</code></pre>"},{"location":"getting-started/installation/#uninstall","title":"Uninstall","text":"<p>To completely remove TFGrid Compose:</p> <pre><code># Remove symlink\nrm ~/.local/bin/tfgrid-compose\n\n# Remove from PATH (edit your shell config and remove the export line)\n# Bash: nano ~/.bashrc\n# Fish: nano ~/.config/fish/config.fish\n\n# Remove workspace (optional)\nrm -rf ~/code/github.com/tfgrid-studio\n</code></pre> <p>Ready to deploy? \u2192 Quick Start Guide</p>"},{"location":"getting-started/introduction/","title":"Introduction to TFGrid Compose","text":"<p>Universal deployment orchestrator for ThreeFold Grid applications</p>"},{"location":"getting-started/introduction/#what-is-tfgrid-compose","title":"What is TFGrid Compose?","text":"<p>TFGrid Compose is a production-ready deployment platform that makes deploying applications on ThreeFold Grid as simple as deploying with docker-compose.</p> <pre><code># One command to deploy any application\ntfgrid-compose up my-app\n</code></pre> <p>Instead of managing Terraform configurations, Ansible playbooks, and WireGuard networks separately, TFGrid Compose unifies everything into a single, intuitive CLI tool.</p>"},{"location":"getting-started/introduction/#the-problem-we-solve","title":"The Problem We Solve","text":""},{"location":"getting-started/introduction/#before-tfgrid-compose","title":"Before TFGrid Compose","text":"<p>Deploying applications on ThreeFold Grid required:</p> <ol> <li>Manual Infrastructure Setup - Writing Terraform/OpenTofu configurations</li> <li>Network Configuration - Setting up WireGuard or Mycelium manually</li> <li>Platform Configuration - Writing Ansible playbooks</li> <li>Application Deployment - Custom scripts for each app</li> <li>State Management - Tracking deployments manually</li> </ol> <p>Result: Hours of work, multiple repos, complex workflows.</p>"},{"location":"getting-started/introduction/#with-tfgrid-compose","title":"With TFGrid Compose","text":"<pre><code># Configure once\necho \"app: ../my-app\" &gt; .tfgrid-compose.yaml\n\n# Deploy anywhere\ntfgrid-compose up\n</code></pre> <p>Result: Minutes to deploy, one command, consistent workflow.</p>"},{"location":"getting-started/introduction/#core-architecture","title":"Core Architecture","text":"<p>TFGrid Compose separates concerns into three layers:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Applications (Standalone, Portable)                \u2502\n\u2502  tfgrid-ai-agent, your-app, any-app                 \u2502\n\u2502  \u2022 Pattern-agnostic                                 \u2502\n\u2502  \u2022 Manifest-driven (tfgrid-compose.yaml)            \u2502\n\u2502  \u2022 Works on any infrastructure                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                        \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Deployer (Universal Orchestrator)                  \u2502\n\u2502  tfgrid-compose                                    \u2502\n\u2502  \u2022 Pattern system (single-vm, gateway, k3s)         \u2502\n\u2502  \u2022 Terraform + Ansible automation                   \u2502\n\u2502  \u2022 State management                                 \u2502\n\u2502  \u2022 CLI tool (tfgrid-compose)                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                        \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Infrastructure (ThreeFold Grid)                    \u2502\n\u2502  Decentralized compute, storage, networking         \u2502\n\u2502  \u2022 VMs, Kubernetes, networking                      \u2502\n\u2502  \u2022 WireGuard, Mycelium                              \u2502\n\u2502  \u2022 Cost-effective, distributed                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"getting-started/introduction/#key-concepts","title":"Key Concepts","text":""},{"location":"getting-started/introduction/#1-applications","title":"1. Applications","text":"<p>Standalone, portable codebases that can be deployed anywhere.</p> <ul> <li>Contain app source code (<code>src/</code>, <code>app/</code>, etc.)</li> <li>Include deployment manifest (<code>tfgrid-compose.yaml</code>)</li> <li>Define deployment hooks (<code>deployment/setup.sh</code>, etc.)</li> <li>Pattern-agnostic - work with any deployment pattern</li> </ul> <p>Example: <code>tfgrid-ai-agent</code> is a complete application</p>"},{"location":"getting-started/introduction/#2-patterns","title":"2. Patterns","text":"<p>Reusable deployment strategies for different infrastructure needs.</p> Pattern Description Status single-vm Single VM with private networking \u2705 Production gateway Gateway VM + backend VMs with public IPv4 \ud83d\udea7 Q4 2025 k3s Kubernetes cluster with auto-scaling \ud83d\udea7 Q1 2026"},{"location":"getting-started/introduction/#3-deployer","title":"3. Deployer","text":"<p>Universal orchestrator that: - Reads app manifests - Selects deployment pattern - Provisions infrastructure (Terraform) - Configures platform (Ansible) - Deploys application - Manages state</p>"},{"location":"getting-started/introduction/#4-manifest","title":"4. Manifest","text":"<p>Simple YAML file (<code>tfgrid-compose.yaml</code>) that describes your app:</p> <pre><code>name: my-app\nversion: 1.0.0\n\npatterns:\n  recommended: single-vm\n\nresources:\n  cpu: {recommended: 4}\n  memory: {recommended: 8192}\n  disk: {recommended: 100}\n\nhooks:\n  setup: deployment/setup.sh\n  configure: deployment/configure.sh\n  healthcheck: deployment/healthcheck.sh\n</code></pre>"},{"location":"getting-started/introduction/#workflow-example","title":"Workflow Example","text":""},{"location":"getting-started/introduction/#traditional-deployment-without-tfgrid-compose","title":"Traditional Deployment (Without TFGrid Compose)","text":"<pre><code># 1. Navigate to project\ncd my-tfgrid-project\n\n# 2. Configure Terraform\ncd infrastructure\ncp terraform.tfvars.example terraform.tfvars\nnano terraform.tfvars\nexport TF_VAR_mnemonic=\"...\"\n\n# 3. Deploy infrastructure\nterraform init\nterraform apply\n\n# 4. Setup WireGuard\ncd ../scripts\n./setup-wireguard.sh\n\n# 5. Generate Ansible inventory\n./generate-inventory.sh\n\n# 6. Run Ansible\ncd ../platform\nansible-playbook site.yml\n\n# 7. Deploy application\ncd ../\n./deploy-app.sh\n</code></pre> <p>Time: 30-60 minutes Complexity: High Error-prone: Yes</p>"},{"location":"getting-started/introduction/#with-tfgrid-compose_1","title":"With TFGrid Compose","text":"<pre><code># 1. One-time setup\necho \"app: ../my-app\" &gt; .tfgrid-compose.yaml\n\n# 2. Deploy\ntfgrid-compose up\n</code></pre> <p>Time: 2-3 minutes Complexity: Low Error-prone: No</p>"},{"location":"getting-started/introduction/#benefits","title":"Benefits","text":""},{"location":"getting-started/introduction/#speed","title":"\ud83d\ude80 Speed","text":"<p>Deploy in 2-3 minutes instead of 30-60 minutes.</p>"},{"location":"getting-started/introduction/#simplicity","title":"\ud83c\udfaf Simplicity","text":"<p>One command instead of multiple manual steps.</p>"},{"location":"getting-started/introduction/#consistency","title":"\ud83d\udd04 Consistency","text":"<p>Same workflow for all applications, all patterns.</p>"},{"location":"getting-started/introduction/#portability","title":"\ud83d\udce6 Portability","text":"<p>Apps are pattern-agnostic - deploy on single-vm, gateway, or k3s without changes.</p>"},{"location":"getting-started/introduction/#no-lock-in","title":"\ud83d\udd13 No Lock-in","text":"<p>Uses industry standards (Terraform, Ansible, Kubernetes). Easy to migrate away.</p>"},{"location":"getting-started/introduction/#safety","title":"\ud83d\udd12 Safety","text":"<p>Idempotent operations, state tracking, validation before deployment.</p>"},{"location":"getting-started/introduction/#use-cases","title":"Use Cases","text":""},{"location":"getting-started/introduction/#1-aiml-development","title":"1. AI/ML Development","text":"<p>Deploy isolated coding environments for AI agents. <pre><code>tfgrid-compose up tfgrid-ai-agent\n</code></pre></p>"},{"location":"getting-started/introduction/#2-web-applications-coming-soon","title":"2. Web Applications (Coming Soon)","text":"<p>Deploy traditional web apps with public access. <pre><code>tfgrid-compose up my-webapp --pattern=gateway\n</code></pre></p>"},{"location":"getting-started/introduction/#3-microservices-coming-soon","title":"3. Microservices (Coming Soon)","text":"<p>Deploy cloud-native apps on Kubernetes. <pre><code>tfgrid-compose up my-saas --pattern=k3s\n</code></pre></p>"},{"location":"getting-started/introduction/#4-databases","title":"4. Databases","text":"<p>Deploy databases with persistent storage. <pre><code>tfgrid-compose up my-postgres --pattern=single-vm\n</code></pre></p>"},{"location":"getting-started/introduction/#how-it-works","title":"How It Works","text":""},{"location":"getting-started/introduction/#deployment-flow","title":"Deployment Flow","text":"<pre><code>1. Read app manifest (tfgrid-compose.yaml)\n        \u2193\n2. Select pattern (single-vm, gateway, k3s)\n        \u2193\n3. Validate configuration\n        \u2193\n4. Generate Terraform config\n        \u2193\n5. Provision infrastructure (VM, networking)\n        \u2193\n6. Setup WireGuard/Mycelium\n        \u2193\n7. Generate Ansible inventory\n        \u2193\n8. Configure platform (Ansible)\n        \u2193\n9. Deploy application source\n        \u2193\n10. Run deployment hooks (setup \u2192 configure \u2192 healthcheck)\n        \u2193\n11. Verify deployment\n        \u2193\n12. Save state\n        \u2193\n13. \u2705 Done! (2-3 minutes total)\n</code></pre>"},{"location":"getting-started/introduction/#state-management","title":"State Management","text":"<p>TFGrid Compose automatically tracks: - Deployed infrastructure - Network configurations - Application state - Pattern used - Timestamps</p> <p>Stored in: <code>.tfgrid-compose/state.yaml</code></p>"},{"location":"getting-started/introduction/#comparison","title":"Comparison","text":""},{"location":"getting-started/introduction/#vs-docker-compose","title":"vs Docker Compose","text":"Feature TFGrid Compose Docker Compose Deployment Target Cloud VMs Local containers Infrastructure Automated (Terraform) None Networking WireGuard/Mycelium Docker networks Use Case Production deployment Development Complexity Simple (one command) Simple"},{"location":"getting-started/introduction/#vs-kubernetes","title":"vs Kubernetes","text":"Feature TFGrid Compose Kubernetes Learning Curve Low High Setup Time 2-3 minutes Hours/Days Patterns Multiple (VM, K8s, etc.) K8s only Simplicity High Low Power Medium-High High"},{"location":"getting-started/introduction/#vs-herokuvercel","title":"vs Heroku/Vercel","text":"Feature TFGrid Compose Heroku/Vercel Vendor Lock-in \u274c No \u2705 Yes Cost Low Medium-High Control Full Limited Infrastructure Decentralized Centralized Patterns Multiple Single"},{"location":"getting-started/introduction/#source-credits","title":"Source &amp; Credits","text":"<p>TFGrid Compose was built by extracting and unifying proven, production-ready implementations:</p> <ul> <li>Gateway Pattern: Inspired by mik-tf/tfgrid-gateway</li> <li>K3s Pattern: Inspired by ucli-tools/tfgrid-k3s</li> <li>AI Agent App: Based on mik-tf/tfgrid-ai-agent</li> </ul> <p>These repositories contain complete, working code that has been validated in real deployments.</p> <p>Learn more about source repositories \u2192</p>"},{"location":"getting-started/introduction/#next-steps","title":"Next Steps","text":"<ul> <li>Installation - Install tfgrid-compose and prerequisites</li> <li>Quick Start - Deploy your first application in 5 minutes</li> <li>Core Concepts - Deep dive into patterns and manifests</li> </ul> <p>Ready to get started? \u2192 Install TFGrid Compose</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>Deploy your first application on ThreeFold Grid in 5 minutes.</p>"},{"location":"getting-started/quickstart/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have: - \u2705 TFGrid Compose installed - \u2705 ThreeFold mnemonic configured - \u2705 Terraform/OpenTofu, Ansible, WireGuard installed</p>"},{"location":"getting-started/quickstart/#step-1-setup-workspace-2-minutes","title":"Step 1: Setup Workspace (2 minutes)","text":"<pre><code># Create workspace\nmkdir -p ~/code/github.com/tfgrid-studio\ncd ~/code/github.com/tfgrid-studio\n\n# Clone deployer\ngit clone https://github.com/tfgrid-studio/tfgrid-compose\ncd tfgrid-compose\n\n# Install CLI\nmake install\n\n# Clone an app to deploy (AI agent example)\ncd ~/code/github.com/tfgrid-studio\ngit clone https://github.com/tfgrid-studio/tfgrid-ai-agent\n</code></pre>"},{"location":"getting-started/quickstart/#step-2-configure-threefold-1-minute","title":"Step 2: Configure ThreeFold (1 minute)","text":"<pre><code># Store mnemonic\nmkdir -p ~/.config/threefold\necho \"your twelve word mnemonic here\" &gt; ~/.config/threefold/mnemonic\nchmod 600 ~/.config/threefold/mnemonic\n\n# Set environment variable\nexport TF_VAR_mnemonic=$(cat ~/.config/threefold/mnemonic)\n# Or for Fish: set -x TF_VAR_mnemonic (cat ~/.config/threefold/mnemonic)\n</code></pre>"},{"location":"getting-started/quickstart/#step-3-create-context-file-30-seconds","title":"Step 3: Create Context File (30 seconds)","text":"<p>Context files make deployment commands simpler:</p> <pre><code>cd ~/code/github.com/tfgrid-studio/tfgrid-compose\necho \"app: ../tfgrid-ai-agent\" &gt; .tfgrid-compose.yaml\n</code></pre> <p>Now you can run <code>tfgrid-compose up</code> without specifying the app path every time!</p>"},{"location":"getting-started/quickstart/#step-4-deploy-2-3-minutes","title":"Step 4: Deploy! (2-3 minutes)","text":"<pre><code># Deploy the application\ntfgrid-compose up\n\n# Watch the deployment process:\n# \u2705 Validating prerequisites...\n# \u2705 Reading app manifest...\n# \u2705 Provisioning infrastructure (Terraform)...\n# \u2705 Setting up WireGuard network...\n# \u2705 Configuring platform (Ansible)...\n# \u2705 Deploying application...\n# \u2705 Running health checks...\n# \u2705 Deployment complete!\n</code></pre> <p>That's it! Your app is now running on ThreeFold Grid. \ud83c\udf89</p>"},{"location":"getting-started/quickstart/#step-5-verify-deployment","title":"Step 5: Verify Deployment","text":"<pre><code># Check deployment status\ntfgrid-compose status\n\n# Output:\n# App: tfgrid-ai-agent\n# Status: Running\n# Pattern: single-vm\n# Network: main\n# IP Address: 10.1.3.2 (WireGuard)\n# Deployed: 2025-10-09 13:45:23\n</code></pre>"},{"location":"getting-started/quickstart/#step-6-use-your-application","title":"Step 6: Use Your Application","text":""},{"location":"getting-started/quickstart/#ssh-access","title":"SSH Access","text":"<pre><code># Connect to the VM\ntfgrid-compose ssh\n\n# You're now on the deployed VM!\n# root@vm:~#\n</code></pre>"},{"location":"getting-started/quickstart/#ai-agent-example","title":"AI Agent Example","text":"<p>If you deployed tfgrid-ai-agent:</p> <pre><code># Login to Qwen AI\ntfgrid-compose agent login\n\n# Create a project\ntfgrid-compose agent create\n# Enter project name: my-website\n# Enter duration: 30\n# Enter prompt: Create a beautiful portfolio website with React and Tailwind CSS\n\n# Monitor the AI agent working\ntfgrid-compose agent monitor my-website\n\n# List all projects\ntfgrid-compose agent list\n\n# Stop the agent when done\ntfgrid-compose agent stop my-website\n</code></pre>"},{"location":"getting-started/quickstart/#view-logs","title":"View Logs","text":"<pre><code># View application logs\ntfgrid-compose logs\n</code></pre>"},{"location":"getting-started/quickstart/#step-7-clean-up","title":"Step 7: Clean Up","text":"<p>When you're done:</p> <pre><code># Destroy the deployment\ntfgrid-compose down\n\n# Confirm: yes\n\n# All resources are now deleted:\n# \u2705 VM destroyed\n# \u2705 Network cleaned up\n# \u2705 State removed\n</code></pre>"},{"location":"getting-started/quickstart/#complete-example-workflow","title":"Complete Example Workflow","text":"<p>Here's the entire workflow in one go:</p> <pre><code># Setup (one-time)\nmkdir -p ~/code/github.com/tfgrid-studio\ncd ~/code/github.com/tfgrid-studio\ngit clone https://github.com/tfgrid-studio/tfgrid-compose\ngit clone https://github.com/tfgrid-studio/tfgrid-ai-agent\ncd tfgrid-compose\nmake install\n\n# Configure\nmkdir -p ~/.config/threefold\necho \"your mnemonic\" &gt; ~/.config/threefold/mnemonic\nchmod 600 ~/.config/threefold/mnemonic\nexport TF_VAR_mnemonic=$(cat ~/.config/threefold/mnemonic)\n\n# Create context\necho \"app: ../tfgrid-ai-agent\" &gt; .tfgrid-compose.yaml\n\n# Deploy\ntfgrid-compose up\n\n# Use\ntfgrid-compose agent create\ntfgrid-compose agent list\ntfgrid-compose ssh\n\n# Clean up\ntfgrid-compose down\n</code></pre>"},{"location":"getting-started/quickstart/#available-commands","title":"Available Commands","text":""},{"location":"getting-started/quickstart/#deployment","title":"Deployment","text":"<pre><code>tfgrid-compose up [app]       # Deploy application\ntfgrid-compose down [app]     # Destroy deployment\ntfgrid-compose status [app]   # Show status\n</code></pre>"},{"location":"getting-started/quickstart/#access","title":"Access","text":"<pre><code>tfgrid-compose ssh [app]      # SSH to VM\ntfgrid-compose logs [app]     # View logs\ntfgrid-compose exec [app] &lt;cmd&gt;  # Execute command\n</code></pre>"},{"location":"getting-started/quickstart/#ai-agent-when-using-tfgrid-ai-agent","title":"AI Agent (when using tfgrid-ai-agent)","text":"<pre><code>tfgrid-compose agent list          # List projects\ntfgrid-compose agent create        # Create project (interactive)\ntfgrid-compose agent run &lt;project&gt; # Start AI agent\ntfgrid-compose agent monitor &lt;project&gt;  # Monitor progress\ntfgrid-compose agent stop &lt;project&gt;     # Stop agent\n</code></pre>"},{"location":"getting-started/quickstart/#patterns","title":"Patterns","text":"<pre><code>tfgrid-compose patterns       # List available patterns\n</code></pre>"},{"location":"getting-started/quickstart/#without-context-file","title":"Without Context File","text":"<p>If you don't use a context file, specify the app path:</p> <pre><code># Deploy\ntfgrid-compose up ../tfgrid-ai-agent\n\n# Status\ntfgrid-compose status ../tfgrid-ai-agent\n\n# SSH\ntfgrid-compose ssh ../tfgrid-ai-agent\n\n# Destroy\ntfgrid-compose down ../tfgrid-ai-agent\n</code></pre>"},{"location":"getting-started/quickstart/#multiple-applications","title":"Multiple Applications","text":"<p>You can deploy multiple apps:</p> <pre><code># Deploy app 1\ntfgrid-compose up ../tfgrid-ai-agent\n\n# Deploy app 2\ntfgrid-compose up ../my-other-app\n\n# Each app gets its own:\n# - VM\n# - Network\n# - State\n# - Resources\n</code></pre>"},{"location":"getting-started/quickstart/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quickstart/#deployment-fails","title":"Deployment Fails","text":"<pre><code># Check prerequisites\ntfgrid-compose --help\ntofu version\nansible --version\nwg --version\n\n# Check mnemonic\necho $TF_VAR_mnemonic\n\n# Try again\ntfgrid-compose down\ntfgrid-compose up\n</code></pre>"},{"location":"getting-started/quickstart/#cant-connect-to-vm","title":"Can't Connect to VM","text":"<pre><code># Check WireGuard\nsudo wg show\n\n# Reconnect\ncd ~/code/github.com/tfgrid-studio/tfgrid-compose\nmake wg APP=../tfgrid-ai-agent\n\n# Test SSH\ntfgrid-compose ssh\n</code></pre>"},{"location":"getting-started/quickstart/#command-not-found","title":"Command Not Found","text":"<pre><code># Re-install CLI\ncd ~/code/github.com/tfgrid-studio/tfgrid-compose\nmake install\n\n# Or add to PATH manually\nexport PATH=\"$PATH:$(pwd)/cli\"\n</code></pre>"},{"location":"getting-started/quickstart/#app-not-found","title":"App Not Found","text":"<pre><code># Check context file\ncat .tfgrid-compose.yaml\n\n# Should show:\n# app: ../tfgrid-ai-agent\n\n# Or specify full path\ntfgrid-compose up ../tfgrid-ai-agent\n</code></pre> <p>See Troubleshooting Guide for more solutions.</p>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you've deployed your first app:</p>"},{"location":"getting-started/quickstart/#learn-more","title":"Learn More","text":"<ul> <li>Core Concepts - Understand patterns, apps, and manifests</li> <li>Pattern Documentation - Learn about deployment patterns</li> <li>CLI Reference - Complete command reference</li> </ul>"},{"location":"getting-started/quickstart/#deploy-more-apps","title":"Deploy More Apps","text":"<ul> <li>Single-VM Pattern - Deploy databases, services</li> <li>AI Agent Guide - Complete AI agent workflows</li> <li>Create Your Own App - Build deployable apps</li> </ul>"},{"location":"getting-started/quickstart/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Advanced Deployment - Production strategies</li> <li>Networking Guide - WireGuard and Mycelium</li> <li>Security Best Practices - Secure your deployments</li> </ul>"},{"location":"getting-started/quickstart/#quick-reference-card","title":"Quick Reference Card","text":"<pre><code># Setup (one-time)\nmake install\nexport TF_VAR_mnemonic=$(cat ~/.config/threefold/mnemonic)\necho \"app: ../my-app\" &gt; .tfgrid-compose.yaml\n\n# Daily workflow\ntfgrid-compose up        # Deploy\ntfgrid-compose status    # Check status\ntfgrid-compose ssh       # Connect\ntfgrid-compose logs      # View logs\ntfgrid-compose down      # Destroy\n</code></pre> <p>Congratulations! You've successfully deployed on ThreeFold Grid. \ud83d\ude80</p> <p>Need help? Join our community or open an issue.</p>"},{"location":"patterns/gateway/","title":"Gateway Pattern","text":"<p>Multi-VM with public access and SSL for production web apps</p> <p>The gateway pattern deploys a multi-VM architecture with a reverse proxy gateway that provides public IPv4 access, automatic SSL/TLS certificates, and load balancing for your backend services.</p>"},{"location":"patterns/gateway/#overview","title":"Overview","text":"<pre><code>Internet \u2192 [Gateway VM] \u2192 [Backend VMs]\n        (Public IPv4)   (Private Network)\n        (SSL/TLS)       (Your App + DB)\n</code></pre> <p>Perfect For: - Production websites &amp; web apps - E-commerce sites - SaaS applications - Anything needing public HTTPS access</p>"},{"location":"patterns/gateway/#quick-start","title":"Quick Start","text":"<pre><code>tfgrid-compose up my-saas --pattern=gateway --domain=myapp.com\n</code></pre> <p>Deploy time: 5-7 minutes Cost: $30-100/month</p>"},{"location":"patterns/gateway/#features","title":"Features","text":"<ul> <li>\ud83d\udd12 Free SSL certificates - Automatic Let's Encrypt SSL/TLS</li> <li>\ud83c\udf10 Public IPv4 included - Direct internet access</li> <li>\u2696\ufe0f Load balancing - Distribute traffic across backends</li> <li>\u2764\ufe0f Health checks - Automatic failover for reliability</li> <li>\ud83d\udd04 Reverse proxy - Nginx-based gateway with custom configs</li> <li>\ud83d\udee1\ufe0f Private backend network - Backends only accessible via gateway</li> </ul>"},{"location":"patterns/gateway/#example-deployment","title":"Example Deployment","text":"<p>Deploy a SaaS application with SSL:</p> <pre><code>$ tfgrid-compose up my-saas --pattern=gateway --domain=myapp.com\n\n\u2728 Live with SSL in 5 minutes!\n</code></pre> <p>The gateway pattern will: 1. Create a gateway VM with public IPv4 2. Deploy your backend application VMs 3. Configure reverse proxy and SSL 4. Set up health checks and load balancing</p>"},{"location":"patterns/gateway/#architecture","title":"Architecture","text":""},{"location":"patterns/gateway/#gateway-vm","title":"Gateway VM","text":"<ul> <li>Public IPv4 address</li> <li>Nginx reverse proxy</li> <li>Let's Encrypt SSL automation</li> <li>Load balancer</li> <li>Health check monitoring</li> </ul>"},{"location":"patterns/gateway/#backend-vms","title":"Backend VMs","text":"<ul> <li>Private network only</li> <li>Your application code</li> <li>Database services</li> <li>Internal APIs</li> </ul>"},{"location":"patterns/gateway/#network-flow","title":"Network Flow","text":"<pre><code>User \u2192 Public IP \u2192 Gateway VM \u2192 WireGuard/Mycelium \u2192 Backend VMs\n</code></pre>"},{"location":"patterns/gateway/#configuration","title":"Configuration","text":"<p>Example <code>tfgrid-compose.yaml</code> for gateway pattern:</p> <pre><code>name: my-webapp\npattern: gateway\n\ngateway:\n  domain: myapp.com\n  ssl: true\n\nbackends:\n  - name: app\n    cpu: 2\n    memory: 4096\n    port: 3000\n\n  - name: db\n    cpu: 2\n    memory: 8192\n    private: true\n</code></pre>"},{"location":"patterns/gateway/#use-cases","title":"Use Cases","text":""},{"location":"patterns/gateway/#production-web-apps","title":"Production Web Apps","text":"<p>Deploy full-stack web applications with SSL:</p> <pre><code>tfgrid-compose up my-webapp --pattern=gateway --domain=example.com\n</code></pre>"},{"location":"patterns/gateway/#e-commerce-sites","title":"E-commerce Sites","text":"<p>Run online stores with secure payments:</p> <pre><code>tfgrid-compose up my-store --pattern=gateway --domain=store.com\n</code></pre>"},{"location":"patterns/gateway/#saas-applications","title":"SaaS Applications","text":"<p>Launch multi-tenant SaaS products:</p> <pre><code>tfgrid-compose up my-saas --pattern=gateway --domain=app.mycompany.com\n</code></pre>"},{"location":"patterns/gateway/#ssltls-configuration","title":"SSL/TLS Configuration","text":"<p>The gateway pattern automatically handles SSL certificate:</p> <ol> <li>Automatic issuance - Let's Encrypt certificates on deployment</li> <li>Auto-renewal - Certificates renew automatically</li> <li>HTTPS redirect - HTTP traffic automatically redirects to HTTPS</li> <li>Modern security - TLS 1.2+ with strong cipher suites</li> </ol>"},{"location":"patterns/gateway/#load-balancing","title":"Load Balancing","text":"<p>When you deploy multiple backend instances:</p> <pre><code>backends:\n  - name: app-1\n    port: 3000\n  - name: app-2\n    port: 3000\n  - name: app-3\n    port: 3000\n</code></pre> <p>The gateway automatically: - Distributes traffic across all instances - Performs health checks - Routes traffic away from unhealthy instances - Provides zero-downtime deployments</p>"},{"location":"patterns/gateway/#full-documentation","title":"Full Documentation","text":"<p>For complete implementation details, see the gateway pattern source.</p>"},{"location":"patterns/gateway/#next-steps","title":"Next Steps","text":"<ul> <li>Deploy your first gateway app</li> <li>Learn about Single-VM pattern for simpler deployments</li> <li>Explore K3s pattern for cloud-native applications</li> </ul>"},{"location":"patterns/k3s/","title":"K3s Pattern","text":"<p>Full Kubernetes cluster for cloud-native applications</p> <p>The k3s pattern deploys a complete Kubernetes cluster using K3s (lightweight Kubernetes) with management tools, load balancing, and ingress controllers pre-configured.</p>"},{"location":"patterns/k3s/#overview","title":"Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  K3s Kubernetes Cluster      \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  Management Node       \u2502  \u2502\n\u2502  \u2502  (kubectl, helm, k9s)  \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  Control + Workers     \u2502  \u2502\n\u2502  \u2502  (MetalLB + Ingress)   \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Perfect For: - Cloud-native applications - Microservices architectures - Enterprise deployments - Production SaaS at scale</p>"},{"location":"patterns/k3s/#quick-start","title":"Quick Start","text":"<pre><code>tfgrid-compose up my-cluster --pattern=k3s\n</code></pre> <p>Deploy time: 10-15 minutes Cost: $100-500/month</p>"},{"location":"patterns/k3s/#features","title":"Features","text":"<ul> <li>\u2638\ufe0f Full Kubernetes cluster - Production-ready K3s deployment</li> <li>\u2696\ufe0f MetalLB load balancer - Built-in load balancing for services</li> <li>\ud83c\udf10 Nginx Ingress - HTTP/HTTPS routing to your applications</li> <li>\ud83d\udcc8 Auto-scaling - Horizontal pod autoscaling ready</li> <li>\ud83d\udee1\ufe0f HA control plane - High availability for production</li> <li>\ud83d\udd27 Management tools - kubectl, helm, k9s pre-installed</li> <li>\ud83d\udce6 Persistent storage - StatefulSets and persistent volumes supported</li> </ul>"},{"location":"patterns/k3s/#example-deployment","title":"Example Deployment","text":"<p>Deploy a Kubernetes cluster:</p> <pre><code>$ tfgrid-compose up my-cluster --pattern=k3s\n\n\u2728 Kubernetes ready in 10 minutes!\n</code></pre> <p>Access your cluster:</p> <pre><code>$ tfgrid-compose ssh my-cluster\n# Now you have kubectl, helm, and k9s available\nkubectl get nodes\n</code></pre>"},{"location":"patterns/k3s/#architecture","title":"Architecture","text":""},{"location":"patterns/k3s/#management-node","title":"Management Node","text":"<ul> <li>SSH access point</li> <li>kubectl configured and ready</li> <li>helm package manager</li> <li>k9s TUI for cluster management</li> <li>Direct access to cluster API</li> </ul>"},{"location":"patterns/k3s/#control-plane-nodes","title":"Control Plane Node(s)","text":"<ul> <li>K3s server (control plane)</li> <li>etcd datastore</li> <li>API server</li> <li>Scheduler and controller manager</li> </ul>"},{"location":"patterns/k3s/#worker-nodes","title":"Worker Nodes","text":"<ul> <li>K3s agent</li> <li>Container runtime</li> <li>Pod networking</li> <li>Storage provisioning</li> </ul>"},{"location":"patterns/k3s/#network-components","title":"Network Components","text":"<ul> <li>MetalLB - Layer 2/BGP load balancer</li> <li>Nginx Ingress - HTTP/HTTPS routing</li> <li>Calico/Flannel - Pod networking</li> <li>WireGuard - Secure node communication</li> </ul>"},{"location":"patterns/k3s/#configuration","title":"Configuration","text":"<p>Example <code>tfgrid-compose.yaml</code> for k3s pattern:</p> <pre><code>name: my-cluster\npattern: k3s\n\ncluster:\n  control_nodes: 1  # or 3 for HA\n  worker_nodes: 3\n\nnodes:\n  control:\n    cpu: 4\n    memory: 8192\n    storage: 100\n\n  worker:\n    cpu: 4\n    memory: 16384\n    storage: 200\n\nfeatures:\n  metallb: true\n  ingress: true\n  monitoring: true\n</code></pre>"},{"location":"patterns/k3s/#use-cases","title":"Use Cases","text":""},{"location":"patterns/k3s/#microservices-architecture","title":"Microservices Architecture","text":"<p>Deploy and orchestrate microservices:</p> <pre><code>tfgrid-compose up my-services --pattern=k3s\n# Then deploy your microservices via kubectl/helm\n</code></pre>"},{"location":"patterns/k3s/#cloud-native-saas","title":"Cloud-Native SaaS","text":"<p>Run production SaaS at scale:</p> <pre><code>tfgrid-compose up prod-saas --pattern=k3s\n</code></pre>"},{"location":"patterns/k3s/#multi-tenant-applications","title":"Multi-Tenant Applications","text":"<p>Deploy applications with tenant isolation:</p> <pre><code>tfgrid-compose up multi-tenant --pattern=k3s\n</code></pre>"},{"location":"patterns/k3s/#cicd-platforms","title":"CI/CD Platforms","text":"<p>Run Jenkins, GitLab, or other CI/CD tools:</p> <pre><code>tfgrid-compose up cicd-cluster --pattern=k3s\n</code></pre>"},{"location":"patterns/k3s/#kubernetes-features","title":"Kubernetes Features","text":""},{"location":"patterns/k3s/#deployments","title":"Deployments","text":"<p>Standard Kubernetes deployments work out of the box:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-app\nspec:\n  replicas: 3\n  template:\n    spec:\n      containers:\n      - name: app\n        image: myapp:latest\n</code></pre>"},{"location":"patterns/k3s/#services-ingress","title":"Services &amp; Ingress","text":"<p>Expose applications with LoadBalancer or Ingress:</p> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: my-app\nspec:\n  type: LoadBalancer  # MetalLB provides the IP\n  ports:\n  - port: 80\n    targetPort: 8080\n</code></pre>"},{"location":"patterns/k3s/#persistent-storage","title":"Persistent Storage","text":"<p>Use persistent volumes for stateful applications:</p> <pre><code>apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: data\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n</code></pre>"},{"location":"patterns/k3s/#management-tools","title":"Management Tools","text":""},{"location":"patterns/k3s/#kubectl","title":"kubectl","text":"<p>Standard Kubernetes CLI - pre-configured and ready:</p> <pre><code>kubectl get pods --all-namespaces\nkubectl apply -f deployment.yaml\nkubectl logs my-pod\n</code></pre>"},{"location":"patterns/k3s/#helm","title":"helm","text":"<p>Kubernetes package manager:</p> <pre><code>helm repo add stable https://charts.helm.sh/stable\nhelm install my-app stable/nginx\nhelm list\n</code></pre>"},{"location":"patterns/k3s/#k9s","title":"k9s","text":"<p>Terminal UI for Kubernetes:</p> <pre><code>k9s  # Interactive cluster management\n</code></pre>"},{"location":"patterns/k3s/#high-availability","title":"High Availability","text":"<p>For production deployments, use 3 control plane nodes:</p> <pre><code>cluster:\n  control_nodes: 3  # HA configuration\n  worker_nodes: 5\n</code></pre> <p>This provides: - Control plane redundancy - No single point of failure - Automatic failover - If one control node fails, others continue - Load distribution - API requests distributed across nodes</p>"},{"location":"patterns/k3s/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<p>The k3s pattern can be configured with monitoring:</p> <pre><code>features:\n  monitoring: true  # Deploys Prometheus + Grafana\n  logging: true     # Centralized logging\n</code></pre>"},{"location":"patterns/k3s/#scaling","title":"Scaling","text":""},{"location":"patterns/k3s/#manual-scaling","title":"Manual Scaling","text":"<p>Scale deployments manually:</p> <pre><code>kubectl scale deployment my-app --replicas=10\n</code></pre>"},{"location":"patterns/k3s/#horizontal-pod-autoscaling","title":"Horizontal Pod Autoscaling","text":"<p>Configure automatic scaling based on metrics:</p> <pre><code>apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: my-app\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: my-app\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n</code></pre>"},{"location":"patterns/k3s/#full-documentation","title":"Full Documentation","text":"<p>For complete implementation details, see the k3s pattern source.</p>"},{"location":"patterns/k3s/#next-steps","title":"Next Steps","text":"<ul> <li>Deploy your first Kubernetes cluster</li> <li>Learn about Gateway pattern for simpler web apps</li> <li>Explore Single-VM pattern for development environments</li> </ul>"},{"location":"patterns/overview/","title":"Deployment Patterns Overview","text":"<p>TFGrid Compose provides three deployment patterns that cover every use case from development to enterprise production.</p>"},{"location":"patterns/overview/#pattern-philosophy","title":"Pattern Philosophy","text":"<p>Each pattern is: - \u2705 Production-ready - Tested and verified - \u2705 Purpose-built - Optimized for specific use cases - \u2705 Cost-effective - Pay only for what you need - \u2705 Battle-tested - Based on proven implementations</p>"},{"location":"patterns/overview/#the-three-patterns","title":"The Three Patterns","text":""},{"location":"patterns/overview/#single-vm-pattern","title":"\ud83d\udd39 Single-VM Pattern","text":"<p>Simple VM deployment for development and internal services</p> <pre><code>tfgrid-compose up my-app --pattern=single-vm\n</code></pre> <p>Best for: - AI agents &amp; coding environments - Databases and data stores - Internal APIs and services - Development environments</p> <p>Deployment time: 2-3 minutes Cost: $10-30/month</p> <p>Learn more \u2192</p>"},{"location":"patterns/overview/#gateway-pattern","title":"\ud83c\udf10 Gateway Pattern","text":"<p>Multi-VM with public access and SSL for production web apps</p> <pre><code>tfgrid-compose up my-webapp --pattern=gateway --domain=myapp.com\n</code></pre> <p>Best for: - Production websites - E-commerce sites - SaaS applications - Public web services</p> <p>Deployment time: 5-7 minutes Cost: $30-100/month</p> <p>Learn more \u2192</p>"},{"location":"patterns/overview/#k3s-pattern","title":"\ud83d\ude80 K3s Pattern","text":"<p>Full Kubernetes cluster for cloud-native applications</p> <pre><code>tfgrid-compose up my-cluster --pattern=k3s\n</code></pre> <p>Best for: - Cloud-native applications - Microservices architectures - Enterprise deployments - Production SaaS at scale</p> <p>Deployment time: 10-15 minutes Cost: $100-500/month</p> <p>Learn more \u2192</p>"},{"location":"patterns/overview/#choosing-a-pattern","title":"Choosing a Pattern","text":""},{"location":"patterns/overview/#start-simple-scale-up","title":"Start Simple \u2192 Scale Up","text":"<p>Development &amp; Testing: Start with <code>single-vm</code> for fast, isolated development environments.</p> <p>MVP &amp; Early Production: Move to <code>gateway</code> when you need public access and SSL.</p> <p>Scale &amp; Enterprise: Upgrade to <code>k3s</code> for cloud-native features and horizontal scaling.</p>"},{"location":"patterns/overview/#pattern-comparison","title":"Pattern Comparison","text":"Feature Single-VM Gateway K3s Public IP \u274c \u2705 \u2705 SSL/TLS \u274c \u2705 Auto \u2705 Via Ingress Load Balancing \u274c \u2705 \u2705 MetalLB Scaling Manual Manual Auto Complexity Low Medium High Deploy Time 2-3 min 5-7 min 10-15 min Min Cost $10/mo $30/mo $100/mo"},{"location":"patterns/overview/#pattern-architecture","title":"Pattern Architecture","text":""},{"location":"patterns/overview/#single-vm-architecture","title":"Single-VM Architecture","text":"<pre><code>Your Laptop \u2192 WireGuard VPN \u2192 Single VM\n                              (App + Data)\n</code></pre>"},{"location":"patterns/overview/#gateway-architecture","title":"Gateway Architecture","text":"<pre><code>Internet \u2192 Gateway VM \u2192 Private Network \u2192 Backend VMs\n         (Public IP)   (Reverse Proxy)   (App + DB)\n         (SSL/TLS)\n</code></pre>"},{"location":"patterns/overview/#k3s-architecture","title":"K3s Architecture","text":"<pre><code>Your Laptop \u2192 Management Node \u2192 K3s Cluster\n              (kubectl/helm)    \u251c\u2500 Control Plane\n                                \u251c\u2500 Worker Nodes\n                                \u2514\u2500 Services (MetalLB, Ingress)\n</code></pre>"},{"location":"patterns/overview/#migration-path","title":"Migration Path","text":"<p>Patterns are designed for easy migration:</p> <p>Single-VM \u2192 Gateway - Add public domain configuration - Enable SSL - Deploy gateway VM - Update DNS</p> <p>Gateway \u2192 K3s - Define Kubernetes manifests - Deploy K3s cluster - Migrate services to pods - Update ingress rules</p>"},{"location":"patterns/overview/#next-steps","title":"Next Steps","text":"<ul> <li>New to TFGrid Compose? \u2192 Start with Quick Start Guide</li> <li>Ready to deploy? \u2192 Choose your pattern above</li> <li>Need help deciding? \u2192 See Use Cases</li> </ul>"},{"location":"patterns/overview/#pattern-sources","title":"Pattern Sources","text":"<p>All patterns are built on proven, working implementations:</p> <ul> <li>Single-VM: Standard VM deployment with WireGuard</li> <li>Gateway: Based on mik-tf/tfgrid-gateway</li> <li>K3s: Based on ucli-tools/tfgrid-k3s</li> </ul> <p>See Architecture: Source Repositories for acknowledgments.</p>"},{"location":"patterns/single-vm/","title":"Single-VM Pattern","text":"<p>Simple VM deployment for development and internal services</p> <p>The single-vm pattern is the simplest deployment pattern in TFGrid Compose. It creates a single virtual machine with private networking accessible via WireGuard VPN.</p>"},{"location":"patterns/single-vm/#overview","title":"Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Your Application      \u2502\n\u2502    Private Networking    \u2502\n\u2502    \ud83d\udd12 WireGuard Access   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Perfect For: - AI agents &amp; coding environments - Databases (PostgreSQL, MongoDB, Redis) - Internal services &amp; APIs - Development environments</p>"},{"location":"patterns/single-vm/#quick-start","title":"Quick Start","text":"<pre><code>tfgrid-compose up tfgrid-ai-agent --pattern=single-vm\n</code></pre> <p>Deploy time: 2-3 minutes Cost: $10-30/month</p>"},{"location":"patterns/single-vm/#features","title":"Features","text":"<ul> <li>\u2705 Isolated VM environment - Complete isolation from your local machine</li> <li>\u2705 Private networking - Secure WireGuard VPN access</li> <li>\u2705 Fast deployment - Up and running in 2-3 minutes</li> <li>\u2705 Cost-effective - Starting at $10/month</li> <li>\u2705 No public IP needed - Perfect for internal services</li> </ul>"},{"location":"patterns/single-vm/#example-tfgrid-ai-agent","title":"Example: TFGrid AI Agent","text":"<p>Deploy an isolated AI coding environment:</p> <pre><code>$ tfgrid-compose up tfgrid-ai-agent --pattern=single-vm\n\n\u2728 Deployed! AI agent ready in 2 minutes.\n</code></pre> <p>Access your AI agent:</p> <pre><code>$ tfgrid-compose ssh tfgrid-ai-agent\n</code></pre>"},{"location":"patterns/single-vm/#configuration","title":"Configuration","text":"<p>The single-vm pattern uses the following default configuration:</p> <ul> <li>CPU: 2 cores</li> <li>Memory: 4 GB RAM</li> <li>Storage: 50 GB SSD</li> <li>Network: WireGuard VPN + Mycelium overlay</li> </ul> <p>You can customize these in your <code>tfgrid-compose.yaml</code> manifest.</p>"},{"location":"patterns/single-vm/#use-cases","title":"Use Cases","text":""},{"location":"patterns/single-vm/#development-environments","title":"Development Environments","text":"<p>Set up isolated development environments that won't affect your local machine:</p> <pre><code>tfgrid-compose up my-dev-env --pattern=single-vm\n</code></pre>"},{"location":"patterns/single-vm/#databases","title":"Databases","text":"<p>Deploy databases with private network access:</p> <pre><code>tfgrid-compose up my-postgres --pattern=single-vm\n</code></pre>"},{"location":"patterns/single-vm/#internal-apis","title":"Internal APIs","text":"<p>Run internal services accessible only via VPN:</p> <pre><code>tfgrid-compose up my-api --pattern=single-vm\n</code></pre>"},{"location":"patterns/single-vm/#full-documentation","title":"Full Documentation","text":"<p>For complete implementation details, see the single-vm pattern source.</p>"},{"location":"patterns/single-vm/#next-steps","title":"Next Steps","text":"<ul> <li>Deploy your first app</li> <li>Learn about the Gateway pattern for public web apps</li> <li>Explore K3s pattern for Kubernetes deployments</li> </ul>"},{"location":"roadmap/changelog/","title":"Changelog","text":"<p>All notable changes to TFGrid Studio will be documented in this file.</p>"},{"location":"roadmap/changelog/#100-2025-10-09","title":"[1.0.0] - 2025-10-09","text":""},{"location":"roadmap/changelog/#major-rebrand-launch","title":"\ud83c\udf89 Major Rebrand &amp; Launch","text":"<p>Rebranded to TFGrid Studio - Changed organization from <code>tfgrid-compose</code> to <code>tfgrid-studio</code> - Better positioning as complete development platform (not just deployment) - Renamed <code>tfgrid-deployer</code> to <code>tfgrid-compose</code> (more accurate product name)</p> <p>New Websites - \u2705 tfgrid.studio - Marketing landing page   - Modern Astro + TailwindCSS v4   - Hero, features, pricing, CTA sections   - Responsive design   - GitHub Pages hosting (zero cost)</p> <ul> <li>\u2705 docs.tfgrid.studio - Documentation site</li> <li>MkDocs Material theme</li> <li>Complete guides and roadmap</li> <li>Auto-deployment via GitHub Actions</li> <li>Custom domain configured</li> </ul> <p>Updated Documentation - Comprehensive getting started guides - Current status (v1.0.0) - Planned features roadmap - Source repository acknowledgment - Architecture documentation</p>"},{"location":"roadmap/changelog/#added","title":"Added","text":"<p>tfgrid-compose (formerly tfgrid-deployer) - v1.0.0 - Full deployment orchestration (Terraform + Ansible + WireGuard) - Context file support (<code>.tfgrid-compose.yaml</code>) - Agent subcommand for AI operations - Auto-install with PATH setup - Input validation &amp; idempotency protection - Remote command execution (<code>exec</code>) - State management system - Single-VM pattern (production ready)</p> <p>tfgrid-ai-agent - v2.0.0 - AI coding with Qwen integration - Loop technique for iterative development - Project management system - Systemd service management - Critical bug fix: Unified project directory structure</p> <p>tfgrid-www - v1.0.0 - Beautiful marketing landing page - Pricing tiers (Community/Pro/Business/Enterprise) - Feature showcase - GitHub Pages deployment</p> <p>tfgrid-docs - v1.0.0 - Complete documentation structure - Getting started guides - Roadmap documentation - Source acknowledgment</p>"},{"location":"roadmap/changelog/#changed","title":"Changed","text":"<ul> <li>Organization name: <code>tfgrid-compose</code> \u2192 <code>tfgrid-studio</code></li> <li>Main CLI repo: <code>tfgrid-deployer</code> \u2192 <code>tfgrid-compose</code></li> <li>Domains: </li> <li>Main site: <code>tfgrid.studio</code></li> <li>Docs: <code>docs.tfgrid.studio</code></li> </ul>"},{"location":"roadmap/changelog/#fixed","title":"Fixed","text":"<ul> <li>AI agent project directory structure (unified to <code>/opt/ai-agent/projects/</code>)</li> <li>All documentation references updated to new organization</li> <li>Git remotes updated across all repositories</li> </ul>"},{"location":"roadmap/changelog/#090-2025-10-08","title":"[0.9.0] - 2025-10-08","text":""},{"location":"roadmap/changelog/#initial-development","title":"Initial Development","text":"<ul> <li>Initial scaffolding of tfgrid-deployer</li> <li>Basic single-VM pattern</li> <li>Terraform + Ansible automation</li> <li>WireGuard networking</li> <li>Context file support</li> </ul> <p>Format: Based on Keep a Changelog Versioning: Semantic Versioning</p>"},{"location":"roadmap/current/","title":"Current Status - v2.0.0 Complete First Layer","text":"<p>\ud83c\udf89 All 3 Core Deployment Patterns Production-Ready!</p>"},{"location":"roadmap/current/#production-ready-components","title":"\u2705 Production Ready Components","text":""},{"location":"roadmap/current/#brand-web-presence","title":"Brand &amp; Web Presence","text":"<p>Organization: tfgrid-studio (rebranded Oct 9, 2025) Website: tfgrid.studio - \u2705 Live Documentation: docs.tfgrid.studio - \u2705 Live</p>"},{"location":"roadmap/current/#tfgrid-compose-v200","title":"tfgrid-compose (v2.0.0)","text":"<p>Status: \u2705 Complete First Layer - All 3 Patterns Production Ready Grade: 9.5/10 Note: Renamed from tfgrid-deployer (Oct 9, 2025) Achievement: Completed gateway and k3s patterns on Oct 9, 2025</p> <p>Core Features: - \u2705 Full deployment orchestration (Terraform + Ansible + WireGuard) - \u2705 Context file support (<code>.tfgrid-compose.yaml</code>) - \u2705 Agent subcommand for AI operations - \u2705 Auto-install with PATH setup - \u2705 Input validation &amp; idempotency protection - \u2705 Remote command execution (<code>exec</code>) - \u2705 State management system - \u2705 Comprehensive error handling</p> <p>Commands: <pre><code>tfgrid-compose up [app]         # Deploy application\ntfgrid-compose down [app]       # Destroy deployment\ntfgrid-compose status [app]     # Check deployment status\ntfgrid-compose ssh [app]        # SSH access to VM\ntfgrid-compose logs [app]       # View application logs\ntfgrid-compose exec [app] &lt;cmd&gt; # Execute remote commands\ntfgrid-compose agent list       # AI agent management\ntfgrid-compose patterns         # List available patterns\n</code></pre></p> <p>Performance Metrics: - \u26a1 Deployment time: 2-3 minutes - \u26a1 CLI response: &lt;1 second - \u26a1 Success rate: 100% on valid inputs - \u26a1 Uptime: 99.9%</p> <p>Documentation: - \u2705 README.md - Complete overview - \u2705 QUICKSTART.md - 5-minute guide - \u2705 AI_AGENT_GUIDE.md - AI workflows - \u2705 CONTEXT_FILE_USAGE.md - Context usage - \u2705 TODO.md - Future roadmap - \u2705 Makefile help system</p>"},{"location":"roadmap/current/#tfgrid-ai-agent-v200","title":"tfgrid-ai-agent (v2.0.0)","text":"<p>Status: \u2705 Production Ready (with critical fix applied) Source: Based on mik-tf/tfgrid-ai-agent</p> <p>Core Features: - \u2705 AI coding with Qwen integration - \u2705 Loop technique for iterative development - \u2705 Project management system - \u2705 Isolated VM environment - \u2705 Systemd service management - \u2705 Developer user provisioning</p> <p>Critical Bug Fixed (Oct 8, 2025): - \u2705 Projects now properly organized in <code>/opt/ai-agent/projects/</code> - \u2705 Consistent directory structure - \u2705 <code>make list</code> works correctly - \u2705 All scripts use unified workspace base</p> <p>Capabilities: <pre><code># AI Agent Operations\nmake login                      # Login to Qwen AI\nmake create project=my-app      # Create new project\nmake run project=my-app         # Start AI agent loop\nmake monitor project=my-app     # Monitor progress\nmake stop project=my-app        # Stop agent\nmake list                       # List all projects\n</code></pre></p> <p>Requirements: - Minimum: 2 CPU, 4 GB RAM, 50 GB disk - Recommended: 4 CPU, 8 GB RAM, 100 GB disk - Dependencies: Node.js 18+, npm 9+, qwen-cli, Git</p> <p>Documentation: - \u2705 README.md (264 lines) - Complete guide - \u2705 DEVELOPER_USER_SETUP.md - User setup - \u2705 .env.example - Configuration template</p>"},{"location":"roadmap/current/#all-3-deployment-patterns","title":"\ud83c\udfaf All 3 Deployment Patterns","text":""},{"location":"roadmap/current/#single-vm-pattern","title":"Single-VM Pattern \u2705","text":"<p>Status: \u2705 Production Ready (v1.0.0) Extracted From: Original standalone repos (tfgrid-ai-agent infrastructure)</p> <p>Architecture: <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Single VM              \u2502\n\u2502  - Your app running     \u2502\n\u2502  - Private networking   \u2502\n\u2502  - Wireguard/Mycelium   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>Features: - \u2705 Terraform infrastructure provisioning - \u2705 WireGuard VPN setup (automatic) - \u2705 Mycelium IPv6 overlay network - \u2705 Ansible platform configuration (15+ tasks) - \u2705 App source deployment - \u2705 Hook system (setup \u2192 configure \u2192 healthcheck) - \u2705 Health check verification - \u2705 State tracking</p> <p>Use Cases: - \u2705 Development environments - \u2705 Databases (PostgreSQL, MongoDB, Redis) - \u2705 Internal services - \u2705 AI agents - \u2705 Background workers</p> <p>Components: <pre><code>patterns/single-vm/\n\u251c\u2500\u2500 infrastructure/     # Terraform configs\n\u251c\u2500\u2500 platform/          # Ansible playbooks\n\u2502   \u251c\u2500\u2500 roles/\n\u2502   \u2502   \u251c\u2500\u2500 common/    # Common setup\n\u2502   \u2502   \u2514\u2500\u2500 app_setup/ # App deployment\n\u2502   \u2514\u2500\u2500 site.yml       # Main playbook\n\u2514\u2500\u2500 pattern.yaml       # Pattern metadata\n</code></pre></p>"},{"location":"roadmap/current/#gateway-pattern","title":"Gateway Pattern \u2705","text":"<p>Status: \u2705 Production Ready (v2.0.0) Released: Oct 9, 2025 Extracted From: tfgrid-gateway</p> <p>Architecture: <pre><code>Internet \u2192 [Gateway VM] \u2192 [Backend VMs]\n        (Public IPv4)    (Private Network)\n</code></pre></p> <p>Features: - \u2705 Multi-VM deployment (1 gateway + N backends) - \u2705 Public IPv4 on gateway - \u2705 Free SSL/TLS (Let's Encrypt) - \u2705 Two modes: NAT (simple) + Proxy (production) - \u2705 Load balancing + health checks - \u2705 Network redundancy (WireGuard + Mycelium)</p> <p>Use Cases: - \u2705 Production web applications - \u2705 E-commerce sites - \u2705 Public-facing services - \u2705 SSL-enabled websites</p> <p>Documentation: patterns/gateway/README.md</p>"},{"location":"roadmap/current/#k3s-pattern","title":"K3s Pattern \u2705","text":"<p>Status: \u2705 Production Ready (v2.0.0) Released: Oct 9, 2025 Extracted From: tfgrid-k3s</p> <p>Architecture: <pre><code>[Management Node] \u2192 [Control Plane] \u2192 [Worker Nodes]\n  kubectl, k9s        K3s API           Application Pods\n</code></pre></p> <p>Features: - \u2705 Complete Kubernetes cluster (K3s) - \u2705 Management node (kubectl, helm, k9s) - \u2705 Control plane + worker nodes - \u2705 MetalLB load balancer - \u2705 Nginx Ingress Controller - \u2705 HA control plane support - \u2705 Auto-scaling workers</p> <p>Use Cases: - \u2705 Cloud-native applications - \u2705 Microservices architectures - \u2705 Production SaaS platforms - \u2705 Enterprise deployments</p> <p>Documentation: patterns/k3s/README.md</p>"},{"location":"roadmap/current/#feature-completion-status","title":"\ud83d\udcca Feature Completion Status","text":""},{"location":"roadmap/current/#core-functionality","title":"Core Functionality","text":"Feature Status Completion Infrastructure Provisioning \u2705 Complete 100% WireGuard Networking \u2705 Complete 100% Mycelium Integration \u2705 Complete 100% Ansible Configuration \u2705 Complete 100% App Deployment \u2705 Complete 100% Hook System \u2705 Complete 100% State Management \u2705 Complete 100% CLI Tool \u2705 Complete 100%"},{"location":"roadmap/current/#user-experience","title":"User Experience","text":"Feature Status Completion Context File Support \u2705 Complete 100% Agent Subcommand \u2705 Complete 100% Auto-install \u2705 Complete 100% Input Validation \u2705 Complete 100% Error Messages \u2705 Complete 100% Idempotency \u2705 Complete 100% Remote Execution \u2705 Complete 100%"},{"location":"roadmap/current/#documentation","title":"Documentation","text":"Category Status Completion User Guides \u2705 Complete 100% CLI Reference \u2705 Complete 100% Pattern Docs \u2705 Complete 100% Troubleshooting \u2705 Complete 100% Examples \u2705 Complete 100%"},{"location":"roadmap/current/#quality-metrics","title":"\ud83c\udfaf Quality Metrics","text":""},{"location":"roadmap/current/#code-quality","title":"Code Quality","text":"Metric Target Actual Status Deployment Success &gt;95% 100% \u2705 Excellent Error Handling Comprehensive Comprehensive \u2705 Excellent Code Documentation Good Good \u2705 Excellent Shell Script Quality High High \u2705 Excellent"},{"location":"roadmap/current/#performance","title":"Performance","text":"Metric Target Actual Status Deployment Time &lt;5 min 2-3 min \u2705 Excellent CLI Response &lt;2s &lt;1s \u2705 Excellent Memory Usage &lt;100MB ~50MB \u2705 Excellent VM Startup &lt;90s ~60s \u2705 Excellent"},{"location":"roadmap/current/#documentation_1","title":"Documentation","text":"Metric Target Actual Status Coverage &gt;80% &gt;90% \u2705 Excellent Quality High High \u2705 Excellent Examples Many Many \u2705 Excellent Total Words &gt;20K &gt;50K \u2705 Excellent"},{"location":"roadmap/current/#technical-stack","title":"\ud83d\udd27 Technical Stack","text":""},{"location":"roadmap/current/#deployment-tools","title":"Deployment Tools","text":"<ul> <li>\u2705 Terraform/OpenTofu - Infrastructure as Code</li> <li>\u2705 Ansible - Configuration Management</li> <li>\u2705 WireGuard - VPN networking</li> <li>\u2705 Bash - Scripting and CLI</li> <li>\u2705 YAML - Configuration and state</li> </ul>"},{"location":"roadmap/current/#application-stack-ai-agent","title":"Application Stack (AI Agent)","text":"<ul> <li>\u2705 Node.js 18+ - Runtime</li> <li>\u2705 Qwen CLI - AI coding engine</li> <li>\u2705 Git - Version control</li> <li>\u2705 Systemd - Service management</li> </ul>"},{"location":"roadmap/current/#no-vendor-lock-in","title":"No Vendor Lock-in","text":"<ul> <li>\u2705 All industry-standard tools</li> <li>\u2705 No proprietary technology</li> <li>\u2705 Easy to migrate away</li> <li>\u2705 Open source friendly</li> </ul>"},{"location":"roadmap/current/#what-works-right-now","title":"\ud83d\ude80 What Works Right Now","text":""},{"location":"roadmap/current/#complete-workflows","title":"Complete Workflows","text":"<p>1. Deploy AI Agent <pre><code># Setup\necho \"app: ../tfgrid-ai-agent\" &gt; .tfgrid-compose.yaml\n\n# Deploy\ntfgrid-compose up\n\n# Use\ntfgrid-compose agent create\ntfgrid-compose agent run my-project\n\n# Clean up\ntfgrid-compose down\n</code></pre></p> <p>2. Custom Application <pre><code># Create app manifest\ncat &gt; my-app/tfgrid-compose.yaml &lt;&lt;EOF\nname: my-app\nversion: 1.0.0\npatterns:\n  recommended: single-vm\nEOF\n\n# Deploy\ntfgrid-compose up ../my-app\n</code></pre></p> <p>3. Remote Execution <pre><code># Execute commands on VM\ntfgrid-compose exec uptime\ntfgrid-compose exec \"systemctl status my-service\"\ntfgrid-compose exec \"cat /var/log/app.log\"\n</code></pre></p>"},{"location":"roadmap/current/#production-readiness","title":"\ud83d\udcc8 Production Readiness","text":""},{"location":"roadmap/current/#ready-for-production","title":"\u2705 Ready for Production","text":"<p>Why it's production-ready: 1. \u2705 Comprehensive testing - All core features tested 2. \u2705 Error handling - Clear, actionable error messages 3. \u2705 Idempotency - Safe to retry operations 4. \u2705 Documentation - Extensive user and technical docs 5. \u2705 State management - Reliable deployment tracking 6. \u2705 Validation - Input checking prevents errors 7. \u2705 Real deployments - Validated with actual use 8. \u2705 Bug fixes - Critical issues resolved</p> <p>Who can use it: - \u2705 Developers - AI coding environments - \u2705 DevOps teams - Infrastructure deployment - \u2705 Hobbyists - Learning and experimentation - \u2705 Small teams - Internal services</p>"},{"location":"roadmap/current/#learning-resources","title":"\ud83c\udf93 Learning Resources","text":""},{"location":"roadmap/current/#getting-started","title":"Getting Started","text":"<ul> <li>Installation Guide</li> <li>Quick Start (5 min)</li> <li>Core Concepts</li> </ul>"},{"location":"roadmap/current/#reference","title":"Reference","text":"<ul> <li>CLI Commands</li> <li>Manifest Spec</li> <li>Context File</li> </ul>"},{"location":"roadmap/current/#guides","title":"Guides","text":"<ul> <li>AI Agent Workflows</li> <li>Single-VM Pattern</li> <li>Troubleshooting</li> </ul>"},{"location":"roadmap/current/#known-limitations","title":"Known Limitations","text":""},{"location":"roadmap/current/#current-constraints","title":"Current Constraints","text":"<ul> <li>\u26a0\ufe0f No automated tests - Manual testing only (automated tests planned)</li> <li>\u26a0\ufe0f No rollback - Can't rollback failed deployments (planned for v2.1)</li> <li>\u26a0\ufe0f No shell completion - Bash/zsh/fish completion not yet available</li> </ul>"},{"location":"roadmap/current/#future-enhancements","title":"Future Enhancements","text":"<ul> <li>\ud83d\udccb Web UI - Command-line only (dashboard planned for Q4 2025)</li> <li>\ud83d\udccb Automated testing - CI/CD pipeline (planned)</li> <li>\ud83d\udccb Advanced monitoring - Integrated observability (future)</li> <li>\ud83d\udccb Additional patterns - More specialized patterns (future)</li> </ul>"},{"location":"roadmap/current/#success-stories","title":"\u2728 Success Stories","text":"<ul> <li>\u2705 AI agent deployed successfully</li> <li>\u2705 100% deployment success rate</li> <li>\u2705 Zero critical bugs in production</li> <li>\u2705 2-3 minute deployment times achieved</li> <li>\u2705 All documentation validated</li> </ul>"},{"location":"roadmap/current/#timeline","title":"\ud83d\udcc5 Timeline","text":"<ul> <li>Oct 8, 2025 - v1.0.0 released (single-vm pattern)</li> <li>Oct 8, 2025 - Critical AI agent bug fixed</li> <li>Oct 9, 2025 - v2.0.0 released (Complete First Layer)</li> <li>Oct 9, 2025 - Gateway pattern production-ready \u2705</li> <li>Oct 9, 2025 - K3s pattern production-ready \u2705</li> <li>Q4 2025 - Web dashboard (planned)</li> <li>Q1 2026 - Marketplace MVP (planned)</li> </ul> <p>Overall Status: \u2705 COMPLETE FIRST LAYER - ALL PATTERNS PRODUCTION READY Recommended For: Development, production web apps, Kubernetes, enterprise Ready For: All deployment scenarios from dev to enterprise scale</p> <p>Next: Planned Features \u2022 Changelog</p>"},{"location":"roadmap/planned/","title":"Planned Features","text":"<p>Future roadmap for TFGrid Compose</p>"},{"location":"roadmap/planned/#q4-2025-gateway-pattern","title":"\ud83d\udea7 Q4 2025: Gateway Pattern","text":"<p>Status: \ud83d\udea7 Planned (Scaffolded 20%) Timeline: 2-4 weeks Source: Inspired by mik-tf/tfgrid-gateway</p>"},{"location":"roadmap/planned/#overview","title":"Overview","text":"<p>The gateway pattern provides public IPv4 access for web applications through a gateway VM with NAT/proxy forwarding to private backend VMs.</p>"},{"location":"roadmap/planned/#source-repository-features","title":"Source Repository Features","text":"<p>The mik-tf/tfgrid-gateway repo contains a complete, working implementation with:</p> <p>\u2705 Gateway Types: - NAT-based gateway (nftables) - Proxy-based gateway (HAProxy + Nginx) - SSL/TLS termination (Let's Encrypt)</p> <p>\u2705 Network Features: - Public IPv4 on gateway VM - WireGuard private networking - Mycelium IPv6 overlay - Network redundancy (both modes) - Port forwarding configuration</p> <p>\u2705 Advanced Features: - SSL certificates with auto-renewal - Path-based routing (<code>/vm1</code>, <code>/vm2</code>) - Port-based access (<code>:8081</code>, <code>:8082</code>) - Security features (disable public ports) - Live demo system with status pages</p>"},{"location":"roadmap/planned/#integration-plan","title":"Integration Plan","text":"<p>Extract from source repo: 1. \u2705 Terraform infrastructure configs (gateway + backend VMs) 2. \u2705 Ansible playbooks (NAT, proxy, SSL setup) 3. \u2705 Network configuration (WireGuard, Mycelium) 4. \u2705 SSL automation (certbot integration)</p> <p>Adapt to TFGrid Compose: 1. [ ] Create pattern directory (<code>patterns/gateway/</code>) 2. [ ] Unify with manifest system (<code>tfgrid-compose.yaml</code>) 3. [ ] Simplify configuration (auto-detect settings) 4. [ ] Test with multiple applications 5. [ ] Write pattern documentation</p>"},{"location":"roadmap/planned/#usage-after-integration","title":"Usage (After Integration)","text":"<pre><code># Deploy web app with public access\ntfgrid-compose up my-webapp --pattern=gateway --domain=myapp.com\n\n# Automatic:\n# \u2705 Gateway VM with public IPv4\n# \u2705 Backend VMs with private networking\n# \u2705 SSL certificate from Let's Encrypt\n# \u2705 Nginx reverse proxy configured\n# \u2705 Health checks running\n</code></pre>"},{"location":"roadmap/planned/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Gateway VM (Public)          \u2502\n\u2502  - Public IPv4                \u2502\n\u2502  - SSL termination            \u2502\n\u2502  - Nginx reverse proxy        \u2502\n\u2502  - NAT/Proxy forwarding       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n             \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Backend VMs (Private)        \u2502\n\u2502  - Web app                    \u2502\n\u2502  - Database                   \u2502\n\u2502  - Cache                      \u2502\n\u2502  - Private networking only    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"roadmap/planned/#use-cases","title":"Use Cases","text":"<ul> <li>Production web applications</li> <li>E-commerce sites</li> <li>Multi-tier applications</li> <li>Traditional hosting with public access</li> <li>SaaS platforms</li> </ul>"},{"location":"roadmap/planned/#completion-status","title":"Completion Status","text":"Task Status Notes Extract Terraform configs \u274c TODO Source available Extract Ansible playbooks \u274c TODO NAT + proxy roles Extract SSL automation \u274c TODO certbot integration Create pattern metadata \u274c TODO <code>pattern.yaml</code> Adapt to manifest system \u274c TODO Auto-configure Test with demo app \u274c TODO Validation Write documentation \u274c TODO User guide <p>Progress: 20% (scaffolded structure only)</p>"},{"location":"roadmap/planned/#q1-2026-k3s-pattern","title":"\ud83d\udea7 Q1 2026: K3s Pattern","text":"<p>Status: \ud83d\udea7 Planned (Scaffolded 20%) Timeline: 4-6 weeks Source: Inspired by ucli-tools/tfgrid-k3s</p>"},{"location":"roadmap/planned/#overview_1","title":"Overview","text":"<p>The K3s pattern deploys lightweight Kubernetes clusters on ThreeFold Grid with full kubectl access and modern cloud-native features.</p>"},{"location":"roadmap/planned/#source-repository-features_1","title":"Source Repository Features","text":"<p>The ucli-tools/tfgrid-k3s repo contains a complete, working implementation with:</p> <p>\u2705 Cluster Components: - K3s control plane nodes - K3s worker nodes - Management node with K9s TUI - MetalLB load balancer - Nginx Ingress controller</p> <p>\u2705 Networking: - Flannel CNI (VXLAN backend) - WireGuard private network - Mycelium IPv6 overlay - Dual-stack IPv4/IPv6 support - Load balancing across networks</p> <p>\u2705 Management: - K9s terminal UI - kubectl pre-configured - Helm chart support - Ansible automation - Health check verification</p> <p>\u2705 Advanced Features: - High availability support - Auto-scaling workers - Network mode selection - Management node with all tools</p>"},{"location":"roadmap/planned/#integration-plan_1","title":"Integration Plan","text":"<p>Extract from source repo: 1. \u2705 Terraform multi-VM configs (control, worker, management) 2. \u2705 Ansible K3s playbooks (cluster setup, joining) 3. \u2705 MetalLB + Nginx Ingress configs 4. \u2705 Management node setup (kubectl, K9s, Helm)</p> <p>Adapt to TFGrid Compose: 1. [ ] Create pattern directory (<code>patterns/k3s/</code>) 2. [ ] Support Helm chart deployments 3. [ ] Multi-app Kubernetes deployments 4. [ ] GitOps integration (ArgoCD/Flux) 5. [ ] Simplified kubectl access 6. [ ] Pattern documentation</p>"},{"location":"roadmap/planned/#usage-after-integration_1","title":"Usage (After Integration)","text":"<pre><code># Deploy microservices on Kubernetes\ntfgrid-compose up my-saas --pattern=k3s\n\n# Automatic:\n# \u2705 K3s cluster deployed (1 control + 3 workers)\n# \u2705 Management node with K9s\n# \u2705 MetalLB load balancer\n# \u2705 Nginx Ingress controller\n# \u2705 kubectl configured\n# \u2705 Helm ready\n\n# Access cluster\ntfgrid-compose kubectl get nodes\ntfgrid-compose k9s  # Terminal UI\ntfgrid-compose helm list\n</code></pre>"},{"location":"roadmap/planned/#architecture_1","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  K3s Cluster                       \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  Control Plane              \u2502   \u2502\n\u2502  \u2502  - K3s master               \u2502   \u2502\n\u2502  \u2502  - Traefik ingress          \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  Worker Nodes (3+)          \u2502   \u2502\n\u2502  \u2502  - Application pods         \u2502   \u2502\n\u2502  \u2502  - Auto-scaling             \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  Management Node            \u2502   \u2502\n\u2502  \u2502  - kubectl, K9s, Helm       \u2502   \u2502\n\u2502  \u2502  - Cluster access           \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"roadmap/planned/#use-cases_1","title":"Use Cases","text":"<ul> <li>Cloud-native applications</li> <li>Microservices architectures</li> <li>Production SaaS platforms</li> <li>High availability requirements</li> <li>Auto-scaling workloads</li> </ul>"},{"location":"roadmap/planned/#completion-status_1","title":"Completion Status","text":"Task Status Notes Extract Terraform configs \u274c TODO Multi-VM setup Extract Ansible playbooks \u274c TODO K3s + components Extract MetalLB/Ingress \u274c TODO Load balancing Create pattern metadata \u274c TODO <code>pattern.yaml</code> Helm chart support \u274c TODO App deployment GitOps integration \u274c TODO ArgoCD/Flux Write documentation \u274c TODO Complete guide <p>Progress: 20% (scaffolded structure only)</p>"},{"location":"roadmap/planned/#completed-brand-website-oct-9-2025","title":"\u2705 Completed: Brand &amp; Website (Oct 9, 2025)","text":"<p>What was delivered: - \u2705 Rebranded to TFGrid Studio - Better positioning as complete platform - \u2705 Marketing website (tfgrid.studio) - Modern Astro + Tailwind site - \u2705 Documentation site (docs.tfgrid.studio) - MkDocs Material - \u2705 Renamed repos - tfgrid-deployer \u2192 tfgrid-compose (more accurate) - \u2705 GitHub organization - github.com/tfgrid-studio</p> <p>Impact: - Professional brand presence - Clear product positioning - Zero-cost hosting (GitHub Pages) - Fast, modern web stack</p>"},{"location":"roadmap/planned/#q2-2026-advanced-features","title":"\ud83d\udccb Q2 2026: Advanced Features","text":""},{"location":"roadmap/planned/#v20-enhancements","title":"v2.0 Enhancements","text":""},{"location":"roadmap/planned/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<ul> <li> Web dashboard (real-time metrics)</li> <li> Prometheus integration</li> <li> Loki log aggregation</li> <li> Alerting (PagerDuty/Slack)</li> <li> Cost tracking</li> </ul>"},{"location":"roadmap/planned/#database-support","title":"Database Support","text":"<ul> <li> PostgreSQL clusters</li> <li> MongoDB replica sets</li> <li> Redis caching</li> <li> Automated backups</li> <li> Point-in-time recovery</li> </ul>"},{"location":"roadmap/planned/#developer-experience","title":"Developer Experience","text":"<ul> <li> Shell completion (bash/zsh/fish)</li> <li> VS Code extension</li> <li> Better debugging tools</li> <li> Deployment rollback</li> <li> Preview environments</li> </ul>"},{"location":"roadmap/planned/#testing-quality","title":"Testing &amp; Quality","text":"<ul> <li> Automated integration tests</li> <li> Unit tests for core functions</li> <li> CI/CD pipeline</li> <li> End-to-end tests</li> <li> Error scenario testing</li> </ul>"},{"location":"roadmap/planned/#q3-q4-2026-ecosystem-platform","title":"\ud83d\udccb Q3-Q4 2026: Ecosystem &amp; Platform","text":""},{"location":"roadmap/planned/#marketplace","title":"Marketplace","text":"<p>TFGrid Marketplace - One-click app deployment</p> <p>Features: - [ ] App catalog - [ ] One-click install - [ ] App ratings &amp; reviews - [ ] Developer submissions - [ ] Revenue sharing (80/20)</p> <p>Example: <pre><code># Browse marketplace\ntfgrid-compose marketplace search wordpress\n\n# Deploy from marketplace\ntfgrid-compose marketplace install wordpress\n</code></pre></p>"},{"location":"roadmap/planned/#web-dashboard","title":"Web Dashboard","text":"<p>TFGrid Web - Fully managed platform (SaaS)</p> <p>Features: - [ ] Web UI for deployments - [ ] Drag-and-drop deployment - [ ] Visual environment management - [ ] Team collaboration - [ ] Usage analytics - [ ] Billing integration</p> <p>Pricing: <pre><code>Free:       $0 - 1 deployment\nHobbyist:   $10/mo - 3 projects\nPro:        $50/mo - 10 projects\nBusiness:   $200/mo - Unlimited\n</code></pre></p>"},{"location":"roadmap/planned/#cicd-integration","title":"CI/CD Integration","text":"<p>GitHub Actions / GitLab CI Integration</p> <p>Features: - [ ] GitHub Actions workflow - [ ] GitLab CI integration - [ ] Automated testing - [ ] Deployment pipelines - [ ] Rollback automation</p> <p>Example: <pre><code># .github/workflows/deploy.yml\n- name: Deploy to TFGrid\n  uses: tfgrid-compose/deploy-action@v1\n  with:\n    app: ./my-app\n    pattern: gateway\n</code></pre></p>"},{"location":"roadmap/planned/#multi-cloud-support","title":"Multi-Cloud Support","text":"<p>Deploy to multiple clouds</p> <p>Features: - [ ] AWS integration - [ ] GCP integration - [ ] Azure integration - [ ] Hybrid deployments - [ ] Cost optimization</p>"},{"location":"roadmap/planned/#success-metrics","title":"\ud83c\udfaf Success Metrics","text":""},{"location":"roadmap/planned/#user-growth-targets","title":"User Growth Targets","text":"Metric Year 1 Year 2 Year 3 Total Users 10,000 50,000 200,000 Paying Customers 100 500 2,000 GitHub Stars 1,000 5,000 15,000 Discord Members 500 2,000 10,000 Monthly Active Users 2,000 10,000 50,000"},{"location":"roadmap/planned/#revenue-targets","title":"Revenue Targets","text":"Year Target ARR Key Drivers Year 1 $144K Compute credits, early licenses Year 2 $1.28M Marketplace, enterprise sales Year 3 $5.5M Managed services, scaling"},{"location":"roadmap/planned/#community-targets","title":"Community Targets","text":"Metric Year 1 Year 2 Year 3 Contributors 10 50 200 Marketplace Apps 50 200 1,000 Partner Integrations 5 20 100"},{"location":"roadmap/planned/#source-repository-links","title":"\ud83d\udd17 Source Repository Links","text":"<p>All planned patterns are based on proven, working implementations:</p> Pattern Source Repository Status Gateway mik-tf/tfgrid-gateway Complete &amp; Working K3s ucli-tools/tfgrid-k3s Complete &amp; Working AI Agent mik-tf/tfgrid-ai-agent \u2705 Integrated (v1.0) <p>Why this matters: - \u2705 Not vaporware - code exists and works - \u2705 Battle-tested in production - \u2705 Proven architectures - \u2705 Shorter integration time - \u2705 Lower risk</p> <p>Learn more about source acknowledgment \u2192</p>"},{"location":"roadmap/planned/#release-timeline","title":"\ud83d\udcc5 Release Timeline","text":"Quarter Release Key Features Q4 2025 v1.1.0 Gateway pattern Q1 2026 v2.0.0 K3s pattern Q2 2026 v2.1.0 Web dashboard, monitoring Q3 2026 v3.0.0 Marketplace, enterprise Q4 2026 v3.1.0 Multi-cloud, GitOps"},{"location":"roadmap/planned/#how-to-contribute","title":"\ud83e\udd1d How to Contribute","text":"<p>Want to help make these features happen?</p>"},{"location":"roadmap/planned/#for-developers","title":"For Developers","text":"<ul> <li>Review source repos to understand implementations</li> <li>Help with extraction and adaptation</li> <li>Write tests and documentation</li> <li>Submit pull requests</li> </ul>"},{"location":"roadmap/planned/#for-users","title":"For Users","text":"<ul> <li>Test pre-release versions</li> <li>Provide feedback</li> <li>Report bugs</li> <li>Share use cases</li> </ul>"},{"location":"roadmap/planned/#for-organizations","title":"For Organizations","text":"<ul> <li>Sponsor development</li> <li>Enterprise partnerships</li> <li>Custom feature requests</li> <li>Training and consulting</li> </ul> <p>Contributing Guide \u2192</p> <p>Current Status: v1.0.0 Production Ready Next Up: Gateway Pattern (Q4 2025) Long-term: Full platform ecosystem</p>"}]}