{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TFGrid Studio Documentation","text":"<p>Complete development platform for ThreeFold Grid</p> <p>Build, deploy, and scale decentralized applications with <code>tfgrid-compose</code> CLI and integrated tools.</p> <p>\ud83c\udf10 New here? Check out our main website for an overview of TFGrid Studio, pricing, and features.</p>"},{"location":"#what-is-tfgrid-studio","title":"\ud83c\udfaf What is TFGrid Studio?","text":"<p>TFGrid Studio is a complete development platform for ThreeFold Grid. The flagship tool, tfgrid-compose, brings docker-compose-style simplicity to decentralized deployments.</p> <pre><code># Deploy any application with one command\ntfgrid-compose up my-app\n</code></pre> <p>No vendor lock-in. Industry standards. Decentralized infrastructure.</p>"},{"location":"#current-status","title":"\u2728 Current Status","text":""},{"location":"#production-ready-v200","title":"\u2705 Production Ready (v2.0.0)","text":"Component Status Description tfgrid-compose \u2705 v2.0.0 Universal orchestrator with all 3 patterns tfgrid-ai-agent \u2705 v2.0.0 AI coding agent (reference application) Single-VM Pattern \u2705 Production Deploy isolated VMs with private networking Gateway Pattern \u2705 Production Multi-VM with public access and SSL K3s Pattern \u2705 Production Full Kubernetes cluster deployment Context Files \u2705 Production Simplified workflow with <code>.tfgrid-compose.yaml</code> Agent Subcommand \u2705 Production AI agent management built-in"},{"location":"#coming-soon","title":"\ud83d\udea7 Coming Soon","text":"Component Status Timeline Source Web Dashboard \ud83d\udccb Future Q2 2026 SaaS offering Marketplace \ud83d\udccb Future Q3 2026 One-click app deployment"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"#1-install-tfgrid-compose","title":"1. Install tfgrid-compose","text":"<pre><code># One-line installer\ncurl -sSL install.tfgrid.studio/install.sh | sh\n\n# Verify installation\ntfgrid-compose --version\n</code></pre>"},{"location":"#2-configure-threefold","title":"2. Configure ThreeFold","text":"<pre><code># Store your mnemonic\nmkdir -p ~/.config/threefold\necho \"your mnemonic words\" &gt; ~/.config/threefold/mnemonic\nchmod 600 ~/.config/threefold/mnemonic\n</code></pre>"},{"location":"#3-create-context-file-optional-but-recommended","title":"3. Create Context File (Optional but Recommended)","text":"<pre><code># In your project directory\necho \"app: ../tfgrid-ai-agent\" &gt; .tfgrid-compose.yaml\n</code></pre>"},{"location":"#4-deploy","title":"4. Deploy","text":"<pre><code># With context file\ntfgrid-compose up\n\n# Or specify app path\ntfgrid-compose up ../tfgrid-ai-agent\n</code></pre> <p>That's it! Your application is now running on ThreeFold Grid. \ud83c\udf89</p>"},{"location":"#documentation-overview","title":"\ud83d\udcda Documentation Overview","text":""},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Introduction - What is TFGrid Compose and why use it</li> <li>Installation - Install and configure tfgrid-compose</li> <li>Quick Start - Deploy your first application in 5 minutes</li> <li>Core Concepts - Understand patterns, apps, and manifests</li> </ul>"},{"location":"#deployment-patterns","title":"Deployment Patterns","text":"<ul> <li>Pattern Overview - Understanding the pattern system</li> <li>Single-VM Pattern - \u2705 Production ready</li> <li>Gateway Pattern - \u2705 Production ready</li> <li>K3s Pattern - \u2705 Production ready</li> </ul>"},{"location":"#applications","title":"Applications","text":"<ul> <li>Application Overview - How apps work in TFGrid Compose</li> <li>TFGrid AI Agent - \u2705 AI coding agent</li> <li>Creating Apps - Build your own deployable apps</li> </ul>"},{"location":"#cli-reference","title":"CLI Reference","text":"<ul> <li>CLI Commands - Complete command reference</li> <li>App Manifest - <code>tfgrid-compose.yaml</code> specification</li> <li>Context File - <code>.tfgrid-compose.yaml</code> usage</li> <li>State Management - How state is tracked</li> <li>Environment Variables - Configuration options</li> </ul>"},{"location":"#guides","title":"Guides","text":"<ul> <li>Migration Guide - Migrate from standalone repos</li> <li>Advanced Deployment - Production deployment strategies</li> <li>Networking - WireGuard and Mycelium setup</li> <li>Security - Security best practices</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<ul> <li>System Architecture - How TFGrid Compose works</li> <li>Design Decisions - Why we built it this way</li> <li>Source Repositories - Acknowledgment of source work</li> <li>Comparison - vs standalone repos, vs other platforms</li> </ul>"},{"location":"#roadmap-contributing","title":"Roadmap &amp; Contributing","text":"<ul> <li>Current Status - \u2705 What's working now (v2.0.0 Complete First Layer)</li> <li>Planned Features - \ud83d\udea7 What's coming next</li> <li>Changelog - Version history</li> <li>Contributing - How to contribute</li> </ul>"},{"location":"#use-cases","title":"\ud83c\udfaf Use Cases","text":""},{"location":"#aiml-development","title":"AI/ML Development","text":"<p>Deploy isolated AI coding environments on ThreeFold Grid. <pre><code>tfgrid-compose up tfgrid-ai-agent\n</code></pre></p>"},{"location":"#web-applications","title":"Web Applications","text":"<p>Deploy web apps with public IPv4, SSL, and reverse proxy. <pre><code>tfgrid-compose up my-webapp --pattern=gateway --domain=myapp.com\n</code></pre></p>"},{"location":"#cloud-native-apps","title":"Cloud-Native Apps","text":"<p>Deploy microservices on Kubernetes clusters. <pre><code>tfgrid-compose up my-saas --pattern=k3s\n</code></pre></p>"},{"location":"#databases","title":"Databases","text":"<p>Deploy databases with persistent storage and private networking. <pre><code>tfgrid-compose up my-postgres --pattern=single-vm\n</code></pre></p>"},{"location":"#why-tfgrid-compose","title":"\ud83d\udca1 Why TFGrid Compose?","text":""},{"location":"#no-vendor-lock-in","title":"\u2705 No Vendor Lock-in","text":"<p>Uses industry standards: Terraform, Ansible, Kubernetes. Your apps aren't locked to ThreeFold Grid.</p>"},{"location":"#simple-powerful","title":"\u2705 Simple &amp; Powerful","text":"<p>Heroku-like UX with production-ready patterns. One command to deploy, full control when needed.</p>"},{"location":"#decentralized-infrastructure","title":"\u2705 Decentralized Infrastructure","text":"<p>Runs on ThreeFold Grid: decentralized compute, no single point of failure, cost-effective.</p>"},{"location":"#open-source","title":"\u2705 Open Source","text":"<p>Apache 2.0 license. Free to use, modify, and distribute. Community-driven development.</p>"},{"location":"#battle-tested","title":"\u2705 Battle-Tested","text":"<p>Built from proven, working implementations: - Gateway pattern: Based on mik-tf/tfgrid-gateway - K3s pattern: Based on ucli-tools/tfgrid-k3s - AI agent: Based on mik-tf/tfgrid-ai-agent</p>"},{"location":"#links","title":"\ud83d\udd17 Links","text":"<ul> <li>Website: tfgrid.studio - Marketing site</li> <li>Documentation: docs.tfgrid.studio - You are here!</li> <li>GitHub: github.com/tfgrid-studio - Organization</li> <li>CLI Tool: tfgrid-compose - Main repository</li> <li>AI Agent: tfgrid-ai-agent - AI development</li> <li>ThreeFold Grid: threefold.io - Infrastructure</li> </ul>"},{"location":"#community-support","title":"\ud83e\udd1d Community &amp; Support","text":"<ul> <li>Discussions: GitHub Discussions</li> <li>Issues: Open issues in respective repositories</li> <li>Contributing: See contributing guide</li> </ul>"},{"location":"#license","title":"\ud83d\udcdc License","text":"<p>FOSS Repositories: Apache 2.0 License Commercial Repositories: Business Source License / Proprietary</p> <p>See individual repositories for details.</p> <p>Made with \ud83d\udd25 for the decentralized web</p> <p>Get Started \u2022 View on GitHub</p>"},{"location":"architecture/overview/","title":"TFGrid Compose Architecture","text":"<p>Version: 0.9.0 Status: Active Audience: Developers, Contributors, Advanced Users</p>"},{"location":"architecture/overview/#table-of-contents","title":"Table of Contents","text":"<ol> <li>System Overview</li> <li>Core Components</li> <li>Data Flow</li> <li>Pattern System</li> <li>State Management</li> <li>Extension Guide</li> <li>Design Decisions</li> <li>Performance Considerations</li> </ol>"},{"location":"architecture/overview/#system-overview","title":"System Overview","text":""},{"location":"architecture/overview/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     tfgrid-compose CLI                      \u2502\n\u2502                    (User Entry Point)                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                   \u2502\n                   \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Core Orchestrator                        \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  Validation \u2192 Pattern Loading \u2192 App Loading          \u2502   \u2502\n\u2502  \u2502       \u2193            \u2193               \u2193                 \u2502   \u2502\n\u2502  \u2502  Infrastructure \u2192 Network \u2192 Platform \u2192 App Deploy    \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502                            \u2502\n              \u25bc                            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Pattern System         \u2502  \u2502   Task Executors         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502 Infrastructure/    \u2502  \u2502  \u2502  \u2502 terraform.sh       \u2502  \u2502\n\u2502  \u2502 Platform/          \u2502  \u2502  \u2502  \u2502 wireguard.sh       \u2502  \u2502\n\u2502  \u2502 App/               \u2502  \u2502  \u2502  \u2502 ansible.sh         \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502                            \u2502\n              \u25bc                            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     ThreeFold Grid                          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502   Nodes    \u2502    \u2502  Network   \u2502  \u2502  Storage/ZDB     \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/overview/#design-philosophy","title":"Design Philosophy","text":"<p>1. Pattern-Based Architecture</p> <ul> <li>Patterns encapsulate infrastructure, platform, and application concerns</li> <li>Orchestrator is pattern-agnostic (knows nothing about pattern internals)</li> <li>New patterns can be added without modifying core code</li> </ul> <p>2. Contract-Driven Integration</p> <ul> <li>Patterns must implement a standard contract</li> <li>Orchestrator consumes contract outputs (primary_ip, deployment_name, etc.)</li> <li>Loose coupling enables extensibility</li> </ul> <p>3. Shell-Based Implementation</p> <ul> <li>Bash scripts for simplicity and transparency</li> <li>Easy to understand, debug, and extend</li> <li>Minimal dependencies (bash, common Unix tools)</li> <li>Works on any Unix-like system (Linux, macOS)</li> </ul>"},{"location":"architecture/overview/#core-components","title":"Core Components","text":""},{"location":"architecture/overview/#1-cli-entry-point-clitfgrid-compose","title":"1. CLI Entry Point (<code>cli/tfgrid-compose</code>)","text":"<p>Purpose: User-facing command interface</p> <p>Responsibilities:</p> <ul> <li>Parse command-line arguments</li> <li>Load context file (<code>.tfgrid-compose.yaml</code>)</li> <li>Route commands to appropriate handlers</li> <li>Display help and version information</li> </ul> <p>Key Features:</p> <ul> <li>Context file support for simplified commands</li> <li>Command aliases (e.g., <code>agent</code> subcommand)</li> <li>Global flags (--debug, --version)</li> </ul> <p>Example Flow: <pre><code>tfgrid-compose up /path/to/app\n    \u2193\nLoad context (optional)\n    \u2193\nValidate prerequisites\n    \u2193\nCall orchestrator.deploy_app()\n</code></pre></p>"},{"location":"architecture/overview/#2-common-utilities-corecommonsh","title":"2. Common Utilities (<code>core/common.sh</code>)","text":"<p>Purpose: Shared functions used across all modules</p> <p>Key Functions:</p> <pre><code># Logging\nlog_info()      # Informational messages\nlog_success()   # Success indicators\nlog_warning()   # Warnings\nlog_error()     # Errors\nlog_step()      # Major steps\n\n# Utilities\ncommand_exists()    # Check if command is available\nyaml_get()          # Extract values from YAML files\nstate_save()        # Save to state file\nstate_get()         # Retrieve from state file\nstate_clear()       # Clear state directory\n</code></pre> <p>Color-Coded Output:</p> <ul> <li>\ud83d\udd35 Blue: Informational</li> <li>\u2705 Green: Success</li> <li>\u26a0\ufe0f Yellow: Warnings</li> <li>\u274c Red: Errors</li> <li>\u25b6 Purple: Major steps</li> </ul>"},{"location":"architecture/overview/#3-validation-module-corevalidationsh","title":"3. Validation Module (<code>core/validation.sh</code>)","text":"<p>Purpose: Validate prerequisites and configurations</p> <p>Validation Stages:</p> <pre><code>validate_prerequisites()\n    \u251c\u2500\u2500 Check OpenTofu/Terraform (prefer OpenTofu)\n    \u251c\u2500\u2500 Check Ansible\n    \u251c\u2500\u2500 Check SSH client\n    \u251c\u2500\u2500 Check WireGuard (optional warning)\n    \u251c\u2500\u2500 Load ThreeFold mnemonic\n    \u2514\u2500\u2500 Export TF_CMD environment variable\n\nvalidate_app_path()\n    \u251c\u2500\u2500 Check directory exists\n    \u2514\u2500\u2500 Check tfgrid-compose.yaml exists\n\nvalidate_deployment_exists()\n    \u251c\u2500\u2500 Check .tfgrid-compose/ directory\n    \u2514\u2500\u2500 Check state.yaml file\n\nvalidate_no_deployment()\n    \u2514\u2500\u2500 Prevent duplicate deployments\n\nvalidate_network_prerequisites()\n    \u251c\u2500\u2500 Check WireGuard (if needed)\n    \u251c\u2500\u2500 Check Mycelium (if needed)\n    \u2514\u2500\u2500 Test connectivity\n</code></pre> <p>Mnemonic Loading Priority: 1. Environment variable: <code>$TF_VAR_mnemonic</code> 2. Standard location: <code>~/.config/threefold/mnemonic</code> 3. Project-specific: <code>./.tfgrid-mnemonic</code></p> <p>OpenTofu Priority: <pre><code># Check tofu first (open source)\nif command -v tofu; then\n    export TF_CMD=\"tofu\"\nelif command -v terraform; then\n    export TF_CMD=\"terraform\"\nelse\n    error \"Neither found\"\nfi\n</code></pre></p>"},{"location":"architecture/overview/#4-pattern-loader-corepattern-loadersh","title":"4. Pattern Loader (<code>core/pattern-loader.sh</code>)","text":"<p>Purpose: Load and validate deployment patterns</p> <p>Pattern Structure: <pre><code>patterns/\n\u2514\u2500\u2500 single-vm/\n    \u251c\u2500\u2500 pattern.yaml           # Pattern metadata\n    \u251c\u2500\u2500 infrastructure/        # Terraform/OpenTofu files\n    \u2502   \u251c\u2500\u2500 main.tf\n    \u2502   \u251c\u2500\u2500 variables.tf\n    \u2502   \u2514\u2500\u2500 outputs.tf        # MUST implement contract\n    \u251c\u2500\u2500 platform/             # Ansible playbooks\n    \u2502   \u251c\u2500\u2500 site.yml\n    \u2502   \u2514\u2500\u2500 roles/\n    \u2514\u2500\u2500 README.md\n</code></pre></p> <p>Pattern Loading Flow: <pre><code>load_pattern()\n    \u251c\u2500\u2500 Read pattern name from app manifest\n    \u251c\u2500\u2500 Validate pattern directory exists\n    \u251c\u2500\u2500 Load pattern.yaml metadata\n    \u251c\u2500\u2500 Verify infrastructure/ (Terraform files)\n    \u251c\u2500\u2500 Verify platform/ (Ansible playbooks)\n    \u2514\u2500\u2500 Export pattern variables\n</code></pre></p> <p>Pattern Metadata (<code>pattern.yaml</code>): <pre><code>name: single-vm\nversion: 1.0.0\ndescription: Single VM deployment\nrequires:\n  - terraform  # or opentofu\n  - ansible\n  - wireguard  # optional\n</code></pre></p>"},{"location":"architecture/overview/#5-app-loader-coreapp-loadersh","title":"5. App Loader (<code>core/app-loader.sh</code>)","text":"<p>Purpose: Load and validate application manifests</p> <p>App Manifest (<code>tfgrid-compose.yaml</code>): <pre><code>name: my-app\nversion: 1.0.0\npattern: single-vm\n\n# Pattern configuration\nconfig:\n  node: 8\n  cpu: 4\n  memory: 8192\n  disk: 102400\n\n# Optional app-specific hooks\nhooks:\n  setup: ./deployment/hooks/setup.sh\n  configure: ./deployment/hooks/configure.sh\n  healthcheck: ./deployment/hooks/healthcheck.sh\n</code></pre></p> <p>App Loading Flow: <pre><code>load_app()\n    \u251c\u2500\u2500 Parse tfgrid-compose.yaml\n    \u251c\u2500\u2500 Extract app metadata\n    \u251c\u2500\u2500 Load pattern configuration\n    \u251c\u2500\u2500 Validate hooks (if present)\n    \u2514\u2500\u2500 Export app variables\n</code></pre></p>"},{"location":"architecture/overview/#6-orchestrator-coreorchestratorsh","title":"6. Orchestrator (<code>core/orchestrator.sh</code>)","text":"<p>Purpose: Main deployment orchestration logic</p> <p>Deployment Flow:</p> <pre><code>deploy_app()\n    \u2502\n    \u251c\u2500 1. VALIDATION PHASE\n    \u2502      \u251c\u2500\u2500 Validate system prerequisites\n    \u2502      \u251c\u2500\u2500 Validate no existing deployment\n    \u2502      \u251c\u2500\u2500 Validate app path and manifest\n    \u2502      \u2514\u2500\u2500 Load pattern and app config\n    \u2502\n    \u251c\u2500 2. INFRASTRUCTURE PHASE\n    \u2502      \u251c\u2500\u2500 Generate Terraform config\n    \u2502      \u251c\u2500\u2500 Run: terraform init\n    \u2502      \u251c\u2500\u2500 Run: terraform plan\n    \u2502      \u251c\u2500\u2500 Run: terraform apply\n    \u2502      \u2514\u2500\u2500 Extract outputs (primary_ip, node_ids, etc.)\n    \u2502\n    \u251c\u2500 3. NETWORK PHASE\n    \u2502      \u251c\u2500\u2500 If primary_ip_type == \"wireguard\":\n    \u2502      \u2502    \u251c\u2500\u2500 Extract WireGuard config\n    \u2502      \u2502    \u251c\u2500\u2500 Deploy to /etc/wireguard/\n    \u2502      \u2502    \u2514\u2500\u2500 Start wg-quick up\n    \u2502      \u2514\u2500\u2500 Test connectivity\n    \u2502\n    \u251c\u2500 4. WAIT PHASE\n    \u2502      \u251c\u2500\u2500 Wait for SSH (up to 5 minutes)\n    \u2502      \u251c\u2500\u2500 Retry connection every 10 seconds\n    \u2502      \u2514\u2500\u2500 Verify SSH access\n    \u2502\n    \u251c\u2500 5. PLATFORM PHASE\n    \u2502      \u251c\u2500\u2500 Generate Ansible inventory\n    \u2502      \u251c\u2500\u2500 Run: ansible-playbook site.yml\n    \u2502      \u2514\u2500\u2500 Configure base system\n    \u2502\n    \u251c\u2500 6. APPLICATION PHASE\n    \u2502      \u251c\u2500\u2500 Copy app source to VM\n    \u2502      \u251c\u2500\u2500 Run setup hook (if present)\n    \u2502      \u251c\u2500\u2500 Run configure hook (if present)\n    \u2502      \u2514\u2500\u2500 Run healthcheck hook (if present)\n    \u2502\n    \u251c\u2500 7. VERIFICATION PHASE\n    \u2502      \u251c\u2500\u2500 Test SSH connectivity\n    \u2502      \u251c\u2500\u2500 Check application service\n    \u2502      \u2514\u2500\u2500 Validate deployment\n    \u2502\n    \u2514\u2500 8. FINALIZATION\n           \u251c\u2500\u2500 Save deployment metadata\n           \u251c\u2500\u2500 Display connection info\n           \u2514\u2500\u2500 Show next steps\n</code></pre> <p>Destroy Flow: <pre><code>destroy_deployment()\n    \u251c\u2500\u2500 Validate deployment exists\n    \u251c\u2500\u2500 Stop WireGuard interface (if active)\n    \u251c\u2500\u2500 Run: terraform destroy\n    \u2514\u2500\u2500 Clear state directory\n</code></pre></p>"},{"location":"architecture/overview/#7-task-executors-coretasks","title":"7. Task Executors (<code>core/tasks/</code>)","text":"<p>Purpose: Execute specific deployment tasks</p>"},{"location":"architecture/overview/#terraformsh","title":"<code>terraform.sh</code>","text":"<pre><code># Detects OpenTofu or Terraform\nTF_CMD detection (tofu \u2192 terraform \u2192 error)\n    \u251c\u2500\u2500 terraform init\n    \u251c\u2500\u2500 terraform plan\n    \u251c\u2500\u2500 terraform apply\n    \u2514\u2500\u2500 Extract outputs to state.yaml\n</code></pre>"},{"location":"architecture/overview/#wireguardsh","title":"<code>wireguard.sh</code>","text":"<pre><code># Sets up WireGuard VPN\n    \u251c\u2500\u2500 Extract wg_config from Terraform\n    \u251c\u2500\u2500 Generate interface name (wg0, wg1, ...)\n    \u251c\u2500\u2500 Deploy to /etc/wireguard/\n    \u251c\u2500\u2500 Handle conflicts with existing interfaces\n    \u2514\u2500\u2500 Start interface with wg-quick\n</code></pre>"},{"location":"architecture/overview/#ansiblesh","title":"<code>ansible.sh</code>","text":"<pre><code># Configures platform\n    \u251c\u2500\u2500 Generate inventory from state\n    \u251c\u2500\u2500 Test connectivity\n    \u251c\u2500\u2500 Run playbook\n    \u2514\u2500\u2500 Capture logs\n</code></pre>"},{"location":"architecture/overview/#wait-sshsh","title":"<code>wait-ssh.sh</code>","text":"<pre><code># Waits for SSH to be ready\n    \u251c\u2500\u2500 Timeout: 300 seconds (5 minutes)\n    \u251c\u2500\u2500 Retry: Every 10 seconds\n    \u251c\u2500\u2500 Test: ssh -o BatchMode=yes &lt;ip&gt; 'echo ok'\n    \u2514\u2500\u2500 Early exit on first success\n</code></pre>"},{"location":"architecture/overview/#data-flow","title":"Data Flow","text":""},{"location":"architecture/overview/#state-directory-structure","title":"State Directory Structure","text":"<pre><code>.tfgrid-compose/\n\u251c\u2500\u2500 state.yaml                    # Deployment metadata\n\u251c\u2500\u2500 terraform/                    # Generated Terraform config\n\u2502   \u251c\u2500\u2500 main.tf\n\u2502   \u251c\u2500\u2500 variables.tf\n\u2502   \u251c\u2500\u2500 outputs.tf\n\u2502   \u251c\u2500\u2500 .terraform/              # Terraform state\n\u2502   \u2514\u2500\u2500 terraform.tfstate\n\u251c\u2500\u2500 inventory.ini                 # Generated Ansible inventory\n\u251c\u2500\u2500 wg0.conf                     # WireGuard config (if used)\n\u251c\u2500\u2500 terraform-init.log           # Terraform init log\n\u251c\u2500\u2500 terraform-plan.log           # Terraform plan log\n\u251c\u2500\u2500 terraform-apply.log          # Terraform apply log\n\u251c\u2500\u2500 ansible.log                  # Ansible playbook log\n\u251c\u2500\u2500 hook-setup.log              # Setup hook log\n\u251c\u2500\u2500 hook-configure.log          # Configure hook log\n\u2514\u2500\u2500 hook-healthcheck.log        # Healthcheck hook log\n</code></pre>"},{"location":"architecture/overview/#state-file-stateyaml","title":"State File (<code>state.yaml</code>)","text":"<pre><code># Metadata\napp_name: my-app\napp_version: 1.0.0\npattern: single-vm\ndeployment_id: abc123xyz\ncreated_at: 2025-10-14T12:00:00Z\n\n# Infrastructure outputs\nvm_ip: 10.1.3.2\nprimary_ip: 10.1.3.2\nprimary_ip_type: wireguard\ndeployment_name: vm_abc123xyz\nnode_ids: [8]\nmycelium_ip: 543:7233:7534:51c4:ff0f:f38b:d69b:8f19\n\n# Network\nwg_interface: wg0\nnetwork_name: net_abc123xyz\n\n# Platform\nssh_user: root\nssh_key: /home/user/.ssh/id_ed25519\n\n# Status\nstatus: running\nlast_updated: 2025-10-14T12:05:00Z\n</code></pre>"},{"location":"architecture/overview/#data-flow-diagram","title":"Data Flow Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  User Command    \u2502\n\u2502  tfgrid-compose  \u2502\n\u2502       up         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 App Manifest     \u2502\n\u2502 .yaml file       \u2502\u2500\u2500\u2500\u2510\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n         \u2502             \u2502\n         \u25bc             \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502 Pattern Files    \u2502\u25c4\u2500\u2500\u2518\n\u2502 Infrastructure/  \u2502\n\u2502 Platform/        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Terraform Apply  \u2502\n\u2502 Creates VMs      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Extract Outputs  \u2502\n\u2502 Save to state    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 WireGuard Setup  \u2502\n\u2502 Network Access   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Ansible Config   \u2502\n\u2502 Platform Setup   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 App Deployment   \u2502\n\u2502 Hooks Execution  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 State Saved      \u2502\n\u2502 Deployment Done  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/overview/#pattern-system","title":"Pattern System","text":""},{"location":"architecture/overview/#pattern-contract","title":"Pattern Contract","text":"<p>Every pattern MUST implement the standard contract.</p> <p>Required Terraform Outputs: <pre><code>output \"primary_ip\" {\n  value = \"10.1.3.2\"\n  description = \"Primary IP for SSH\"\n}\n\noutput \"primary_ip_type\" {\n  value = \"wireguard\"  # or \"public\" or \"mycelium\"\n  description = \"Type of primary IP\"\n}\n\noutput \"deployment_name\" {\n  value = \"vm_abc123\"\n  description = \"Deployment name\"\n}\n\noutput \"node_ids\" {\n  value = [8]\n  description = \"Node IDs used\"\n}\n</code></pre></p>"},{"location":"architecture/overview/#pattern-types","title":"Pattern Types","text":""},{"location":"architecture/overview/#1-single-vm-pattern","title":"1. Single-VM Pattern","text":"<p>Use Case: Development, databases, internal services, AI agents</p> <p>Infrastructure:</p> <ul> <li>1 VM on TFGrid</li> <li>WireGuard private network</li> <li>Optional Mycelium IPv6</li> </ul> <p>Network:</p> <ul> <li>Primary: WireGuard IP (10.x.x.x)</li> <li>Secondary: Mycelium IP (IPv6)</li> </ul> <p>Platform:</p> <ul> <li>Ubuntu 24.04</li> <li>Base packages (git, curl, build-essential)</li> <li>Docker (optional)</li> </ul>"},{"location":"architecture/overview/#2-gateway-pattern","title":"2. Gateway Pattern","text":"<p>Use Case: Production web apps with public IPv4</p> <p>Infrastructure:</p> <ul> <li>1 Gateway VM (public IPv4)</li> <li>N Backend VMs (private network)</li> <li>WireGuard + Mycelium</li> </ul> <p>Network:</p> <ul> <li>Primary: Public IPv4 (gateway)</li> <li>Secondary: WireGuard IPs (backends)</li> </ul> <p>Platform:</p> <ul> <li>Gateway: Nginx/HAProxy reverse proxy</li> <li>Backends: Application servers</li> <li>SSL/TLS: Let's Encrypt (automated)</li> </ul>"},{"location":"architecture/overview/#3-k3s-pattern","title":"3. K3s Pattern","text":"<p>Use Case: Kubernetes clusters</p> <p>Infrastructure:</p> <ul> <li>1+ Control plane nodes</li> <li>N Worker nodes</li> <li>1 Management node (kubectl, helm, k9s)</li> </ul> <p>Network:</p> <ul> <li>Primary: Control plane WireGuard IP</li> <li>Secondary: Worker node IPs</li> </ul> <p>Platform:</p> <ul> <li>K3s lightweight Kubernetes</li> <li>MetalLB load balancer</li> <li>Nginx Ingress Controller</li> <li>Local-path storage provisioner</li> </ul>"},{"location":"architecture/overview/#state-management","title":"State Management","text":""},{"location":"architecture/overview/#state-lifecycle","title":"State Lifecycle","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   No State   \u2502  Initial state\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u2502  deploy_app()\n       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Deploying   \u2502  Terraform running\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u2502  Success\n       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Running    \u2502  Deployment active\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u2502  destroy_deployment()\n       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Destroying  \u2502  Terraform destroy\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u2502  Success\n       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Cleaned    \u2502  State removed\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/overview/#state-operations","title":"State Operations","text":"<p>Create State: <pre><code>create_state_dir()\n    mkdir -p .tfgrid-compose\n    touch .tfgrid-compose/state.yaml\n</code></pre></p> <p>Save to State: <pre><code>state_save \"key\" \"value\"\n    echo \"key: value\" &gt;&gt; .tfgrid-compose/state.yaml\n</code></pre></p> <p>Read from State: <pre><code>state_get \"key\"\n    grep \"^key:\" .tfgrid-compose/state.yaml | awk '{print $2}'\n</code></pre></p> <p>Clear State: <pre><code>state_clear()\n    rm -rf .tfgrid-compose/\n</code></pre></p>"},{"location":"architecture/overview/#state-validation","title":"State Validation","text":"<p>Check Deployment Exists: <pre><code>if [ -f \".tfgrid-compose/state.yaml\" ]; then\n    echo \"Deployment exists\"\nfi\n</code></pre></p> <p>Prevent Duplicate Deployments: <pre><code>validate_no_deployment()\n    if deployment_exists; then\n        show current deployment info\n        error \"Cannot deploy while another exists\"\n    fi\n</code></pre></p>"},{"location":"architecture/overview/#extension-guide","title":"Extension Guide","text":""},{"location":"architecture/overview/#adding-a-new-pattern","title":"Adding a New Pattern","text":"<p>1. Create Pattern Directory: <pre><code>patterns/my-pattern/\n\u251c\u2500\u2500 pattern.yaml\n\u251c\u2500\u2500 infrastructure/\n\u2502   \u2514\u2500\u2500 main.tf         # Implement pattern contract!\n\u251c\u2500\u2500 platform/\n\u2502   \u2514\u2500\u2500 site.yml\n\u2514\u2500\u2500 README.md\n</code></pre></p> <p>2. Implement Pattern Contract: <pre><code># infrastructure/outputs.tf\noutput \"primary_ip\" {\n  value = your_resource.primary_ip\n}\n\noutput \"primary_ip_type\" {\n  value = \"wireguard\"\n}\n\noutput \"deployment_name\" {\n  value = your_resource.name\n}\n\noutput \"node_ids\" {\n  value = [var.node_id]\n}\n</code></pre></p> <p>3. Test Pattern: <pre><code># Test with example app\ntfgrid-compose up /path/to/test-app\n\n# Verify outputs\ncd .tfgrid-compose/terraform\nterraform output primary_ip\nterraform output primary_ip_type\n</code></pre></p> <p>4. Document Pattern: <pre><code># My Pattern\n\n## Use Cases\n\n- What problems does this solve?\n\n## Configuration\n\n- What options are available?\n\n## Example\n\n- Show complete example\n</code></pre></p>"},{"location":"architecture/overview/#adding-a-new-task","title":"Adding a New Task","text":"<p>1. Create Task Script: <pre><code>core/tasks/my-task.sh\n</code></pre></p> <p>2. Implement Task: <pre><code>#!/usr/bin/env bash\nset -e\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &amp;&amp; pwd)\"\nsource \"$SCRIPT_DIR/../common.sh\"\n\nlog_step \"Running my task...\"\n\n# Task implementation\n# ...\n\nlog_success \"Task complete\"\n</code></pre></p> <p>3. Call from Orchestrator: <pre><code># In core/orchestrator.sh\nif ! bash \"$DEPLOYER_ROOT/core/tasks/my-task.sh\"; then\n    log_error \"My task failed\"\n    return 1\nfi\n</code></pre></p>"},{"location":"architecture/overview/#adding-new-commands","title":"Adding New Commands","text":"<p>1. Add Command Handler: <pre><code># In cli/tfgrid-compose\ncase \"$COMMAND\" in\n    my-command)\n        # Implementation\n        ;;\nesac\n</code></pre></p> <p>2. Update Help Text: <pre><code># In core/common.sh show_help()\necho \"  my-command &lt;args&gt;  - Description\"\n</code></pre></p>"},{"location":"architecture/overview/#design-decisions","title":"Design Decisions","text":""},{"location":"architecture/overview/#why-bash","title":"Why Bash?","text":"<p>Pros:</p> <ul> <li>\u2705 Universal availability (every Unix system)</li> <li>\u2705 Easy to understand and debug</li> <li>\u2705 Transparent execution (no compilation)</li> <li>\u2705 Excellent for orchestration</li> <li>\u2705 Direct integration with CLI tools</li> <li>\u2705 Minimal dependencies</li> </ul> <p>Cons:</p> <ul> <li>\u274c Error handling can be tricky</li> <li>\u274c No type safety</li> <li>\u274c Testing is harder</li> </ul> <p>Mitigation:</p> <ul> <li>Use <code>set -e</code> (exit on error)</li> <li>Extensive validation</li> <li>Logging at each step</li> <li>Test scripts provided</li> </ul>"},{"location":"architecture/overview/#why-pattern-based","title":"Why Pattern-Based?","text":"<p>Benefits:</p> <ul> <li>Different use cases need different infrastructure</li> <li>Patterns encapsulate best practices</li> <li>Easy to add new patterns without modifying core</li> <li>Users can create custom patterns</li> </ul> <p>Alternatives Considered:</p> <ul> <li>Single monolithic template (too rigid)</li> <li>Full config DSL (too complex)</li> <li>GUI builder (not CLI-friendly)</li> </ul>"},{"location":"architecture/overview/#why-opentofu-priority","title":"Why OpenTofu Priority?","text":"<p>Rationale:</p> <ul> <li>Open source (Apache 2.0 license)</li> <li>Compatible with Terraform</li> <li>Community-driven development</li> <li>No license restrictions</li> <li>Same user experience</li> </ul> <p>Fallback:</p> <ul> <li>Terraform still supported</li> <li>Auto-detection at runtime</li> <li>No breaking changes</li> </ul>"},{"location":"architecture/overview/#why-state-in-tfgrid-compose","title":"Why State in <code>.tfgrid-compose/</code>?","text":"<p>Benefits:</p> <ul> <li>Co-located with deployment</li> <li>Easy to find and inspect</li> <li>Git-ignored by default</li> <li>Self-contained</li> </ul> <p>Alternatives:</p> <ul> <li><code>~/.tfgrid/</code> (harder to track per-project)</li> <li>Database (added complexity)</li> <li>Cloud storage (requires connectivity)</li> </ul>"},{"location":"architecture/overview/#performance-considerations","title":"Performance Considerations","text":""},{"location":"architecture/overview/#deployment-speed","title":"Deployment Speed","text":"<p>Typical Timeline:</p> <ul> <li>Infrastructure (Terraform): 30-60 seconds</li> <li>Network setup (WireGuard): 5-10 seconds</li> <li>Wait for SSH: 30-90 seconds</li> <li>Platform config (Ansible): 60-120 seconds</li> <li>App deployment: 10-30 seconds</li> </ul> <p>Total: 2-5 minutes</p>"},{"location":"architecture/overview/#optimization-opportunities","title":"Optimization Opportunities","text":"<p>1. Parallel Execution:</p> <ul> <li>Multiple Ansible hosts configured in parallel</li> <li>Background tasks where possible</li> </ul> <p>2. Caching:</p> <ul> <li>Terraform state cached locally</li> <li>Ansible facts cached between runs</li> </ul> <p>3. Incremental Updates:</p> <ul> <li>Only run changed playbooks</li> <li>Terraform plan before apply</li> </ul>"},{"location":"architecture/overview/#resource-usage","title":"Resource Usage","text":"<p>Local Machine:</p> <ul> <li>Minimal CPU usage (mostly waiting)</li> <li>Small disk footprint (&lt;50MB for state)</li> <li>Network: Depends on Terraform operations</li> </ul> <p>Remote VMs:</p> <ul> <li>Configured per pattern requirements</li> <li>Single-VM: 2-8 CPU, 4-16GB RAM typical</li> <li>Gateway: 1-2 CPU per VM, 2-4GB RAM</li> <li>K3s: 2+ CPU per node, 4+GB RAM</li> </ul>"},{"location":"architecture/overview/#security-considerations","title":"Security Considerations","text":""},{"location":"architecture/overview/#mnemonic-security","title":"Mnemonic Security","text":"<p>Storage:</p> <ul> <li>File permissions: 600 (read/write owner only)</li> <li>Standard location: <code>~/.config/threefold/mnemonic</code></li> <li>Warning if permissions are incorrect</li> </ul> <p>Best Practices:</p> <ul> <li>Never commit to version control</li> <li>Use environment variable in CI/CD</li> <li>Rotate regularly</li> </ul>"},{"location":"architecture/overview/#ssh-key-management","title":"SSH Key Management","text":"<p>Default Behavior:</p> <ul> <li>Uses system SSH keys (<code>~/.ssh/id_*.pub</code>)</li> <li>Injected into VMs during deployment</li> <li>No passwords (key-based auth only)</li> </ul>"},{"location":"architecture/overview/#wireguard-security","title":"WireGuard Security","text":"<p>Private Keys:</p> <ul> <li>Generated by Terraform provider</li> <li>Stored in Terraform state (encrypted at rest)</li> <li>Deployed to <code>/etc/wireguard/</code> with 600 permissions</li> </ul> <p>Network Isolation:</p> <ul> <li>Private networks per deployment</li> <li>No default internet routing</li> <li>Explicit rules required for external access</li> </ul>"},{"location":"architecture/overview/#troubleshooting-architecture","title":"Troubleshooting Architecture","text":""},{"location":"architecture/overview/#debug-mode","title":"Debug Mode","text":"<p>Enable: <pre><code>tfgrid-compose --debug up &lt;app&gt;\n</code></pre></p> <p>Effects:</p> <ul> <li>Verbose logging (<code>set -x</code>)</li> <li>Keep temporary files</li> <li>Show all command output</li> <li>Network diagnostics</li> </ul>"},{"location":"architecture/overview/#log-files","title":"Log Files","text":"<p>All logs saved to <code>.tfgrid-compose/</code>:</p> <ul> <li><code>terraform-init.log</code></li> <li><code>terraform-plan.log</code></li> <li><code>terraform-apply.log</code></li> <li><code>ansible.log</code></li> <li><code>hook-*.log</code></li> </ul>"},{"location":"architecture/overview/#state-inspection","title":"State Inspection","text":"<p>Check Deployment: <pre><code>cat .tfgrid-compose/state.yaml\n</code></pre></p> <p>Check Terraform State: <pre><code>cd .tfgrid-compose/terraform\nterraform show\n</code></pre></p> <p>Check WireGuard: <pre><code>sudo wg show\n</code></pre></p>"},{"location":"architecture/overview/#future-architecture","title":"Future Architecture","text":""},{"location":"architecture/overview/#planned-enhancements","title":"Planned Enhancements","text":"<p>1. Multi-Deployment Support <pre><code>~/.tfgrid-compose/\n\u251c\u2500\u2500 deployments/\n\u2502   \u251c\u2500\u2500 abc123/  # Deployment 1\n\u2502   \u2514\u2500\u2500 def456/  # Deployment 2\n\u2514\u2500\u2500 index.yaml   # Registry\n</code></pre></p> <p>2. Plugin System <pre><code>~/.tfgrid/plugins/\n\u2514\u2500\u2500 my-plugin/\n    \u251c\u2500\u2500 plugin.yaml\n    \u2514\u2500\u2500 hooks/\n</code></pre></p> <p>3. Remote State <pre><code># tfgrid-compose.yaml\nstate:\n  backend: s3\n  config:\n    bucket: my-tfgrid-state\n</code></pre></p>"},{"location":"architecture/overview/#references","title":"References","text":"<ul> <li>Pattern Contract</li> <li>Quick Start Guide</li> <li>Troubleshooting Guide</li> <li>Versioning Policy</li> </ul> <p>Document Status: Active Last Updated: 2025-10-14 Next Review: After 1.0.0 release</p>"},{"location":"architecture/source-repos/","title":"Source Repositories &amp; Acknowledgments","text":"<p>TFGrid Compose was built by extracting and unifying proven, production-ready implementations.</p>"},{"location":"architecture/source-repos/#philosophy","title":"\ud83c\udfaf Philosophy","text":"<p>TFGrid Compose is not built from scratch. Instead, it:</p> <ol> <li>Extracts working code from proven repositories</li> <li>Unifies them under a common deployer framework  </li> <li>Simplifies the deployment experience</li> <li>Standardizes the workflow</li> </ol> <p>This approach provides: - \u2705 Battle-tested code - Already working in production - \u2705 Faster development - No reinventing the wheel - \u2705 Lower risk - Proven architectures - \u2705 Quality assurance - Real-world validation</p>"},{"location":"architecture/source-repos/#source-repositories","title":"\ud83d\udce6 Source Repositories","text":""},{"location":"architecture/source-repos/#integrated-current","title":"\u2705 Integrated (Current)","text":""},{"location":"architecture/source-repos/#1-tfgrid-ai-agent-mik-tf","title":"1. tfgrid-ai-agent (mik-tf)","text":"<p>Source: mik-tf/tfgrid-ai-agent Author: mik-tf Status: \u2705 Fully integrated into TFGrid Compose (v1.0.0)</p> <p>What it provides: - Complete AI coding agent deployment - Qwen AI integration - Project management system - Remote execution workflows - Git integration - Developer user provisioning</p> <p>Integration: <pre><code>Source: github.com/mik-tf/tfgrid-ai-agent\n  \u2193\nExtracted:\n  \u2022 Infrastructure code \u2192 patterns/single-vm/infrastructure/\n  \u2022 Platform config \u2192 patterns/single-vm/platform/\n  \u2022 AI agent app \u2192 tfgrid-compose/tfgrid-ai-agent/\n  \u2193\nResult: tfgrid-ai-agent deployable via tfgrid-compose\n</code></pre></p> <p>Changes made: - \u2705 Extracted infrastructure as reusable pattern - \u2705 Separated app from deployment logic - \u2705 Created manifest system (<code>tfgrid-compose.yaml</code>) - \u2705 Fixed project directory structure (Oct 8, 2025) - \u2705 Unified CLI commands</p> <p>Before (Standalone): <pre><code>cd tfgrid-ai-agent\nmake deploy\nmake login\nmake create project=my-app\n</code></pre></p> <p>After (TFGrid Compose): <pre><code>tfgrid-compose up\ntfgrid-compose agent login\ntfgrid-compose agent create\n</code></pre></p>"},{"location":"architecture/source-repos/#planned-integration-q4-2025","title":"\ud83d\udea7 Planned Integration (Q4 2025)","text":""},{"location":"architecture/source-repos/#2-tfgrid-gateway-mik-tf","title":"2. tfgrid-gateway (mik-tf)","text":"<p>Source: mik-tf/tfgrid-gateway Author: mik-tf Status: \ud83d\udea7 Planned for integration (Q4 2025)</p> <p>What it provides: - Public IPv4 gateway deployment - NAT-based gateway (nftables) - Proxy-based gateway (HAProxy + Nginx) - SSL/TLS automation (Let's Encrypt) - WireGuard + Mycelium networking - Network redundancy features - Live demo system with status pages - Port forwarding configuration - Path-based routing</p> <p>Key features: - \u2705 Dual gateway modes: NAT vs Proxy - \u2705 SSL certificates: Free Let's Encrypt with auto-renewal - \u2705 Network redundancy: WireGuard + Mycelium both mode - \u2705 Flexible access: Port-based or path-based - \u2705 Security features: Disable public port forwarding - \u2705 Production-ready: Used in real deployments</p> <p>Planned integration: <pre><code>Source: github.com/mik-tf/tfgrid-gateway\n  \u2193\nExtract:\n  \u2022 Gateway infrastructure \u2192 patterns/gateway/infrastructure/\n  \u2022 NAT/Proxy configs \u2192 patterns/gateway/platform/\n  \u2022 SSL automation \u2192 patterns/gateway/ssl/\n  \u2022 Network configs \u2192 patterns/gateway/networking/\n  \u2193\nResult: Gateway pattern in tfgrid-compose\n</code></pre></p> <p>Usage (after integration): <pre><code>tfgrid-compose up my-webapp --pattern=gateway --domain=myapp.com\n</code></pre></p> <p>Repository stats: - 1,054 commits - Complete Terraform + Ansible implementation - Comprehensive documentation - Production deployments validated</p>"},{"location":"architecture/source-repos/#3-tfgrid-k3s-ucli-tools","title":"3. tfgrid-k3s (ucli-tools)","text":"<p>Source: ucli-tools/tfgrid-k3s Organization: ucli-tools Status: \ud83d\udea7 Planned for integration (Q1 2026)</p> <p>What it provides: - Complete K3s cluster deployment - Multi-node orchestration (control + workers) - Management node with K9s TUI - MetalLB load balancer - Nginx Ingress controller - Dual-stack networking (IPv4/IPv6) - High availability support - Auto-scaling workers</p> <p>Key features: - \u2705 K3s lightweight Kubernetes - Production-grade - \u2705 Management node: kubectl, K9s, Helm pre-installed - \u2705 Load balancing: MetalLB with IPv4/IPv6 support - \u2705 Ingress: Nginx Ingress controller - \u2705 Networking: Flannel CNI + WireGuard + Mycelium - \u2705 Scalability: Add nodes dynamically - \u2705 Production-ready: Real cluster deployments</p> <p>Planned integration: <pre><code>Source: github.com/ucli-tools/tfgrid-k3s\n  \u2193\nExtract:\n  \u2022 Cluster infrastructure \u2192 patterns/k3s/infrastructure/\n  \u2022 K3s playbooks \u2192 patterns/k3s/platform/\n  \u2022 MetalLB/Ingress \u2192 patterns/k3s/components/\n  \u2022 Management node \u2192 patterns/k3s/management/\n  \u2193\nResult: K3s pattern in tfgrid-compose\n</code></pre></p> <p>Usage (after integration): <pre><code>tfgrid-compose up my-saas --pattern=k3s\ntfgrid-compose kubectl get nodes\ntfgrid-compose k9s\n</code></pre></p> <p>Repository stats: - 522 commits - Complete K3s automation - Comprehensive K9s integration - Production cluster deployments</p>"},{"location":"architecture/source-repos/#ai-agent-framework-mik-tf","title":"\ud83d\udd17 ai-agent Framework (mik-tf)","text":"<p>Source: mik-tf/ai-agent Author: mik-tf Status: \u2705 Dependency of tfgrid-ai-agent</p> <p>What it provides: - AI coding loop technique - Qwen CLI integration - Project management framework - Continuous automation system</p> <p>Inspiration: Based on the \"Ralph\" coding technique by Geoff Huntley, extended into a production-ready automation platform.</p> <p>Usage: This framework is automatically installed on tfgrid-ai-agent VMs and provides the underlying AI automation capabilities.</p>"},{"location":"architecture/source-repos/#extraction-integration-process","title":"\ud83c\udfd7\ufe0f Extraction &amp; Integration Process","text":""},{"location":"architecture/source-repos/#phase-1-single-vm-pattern-complete","title":"Phase 1: Single-VM Pattern (\u2705 Complete)","text":"<p>Source: Infrastructure from mik-tf/tfgrid-ai-agent</p> <p>Extraction: 1. \u2705 Terraform configs extracted 2. \u2705 Ansible playbooks generalized 3. \u2705 WireGuard setup automated 4. \u2705 Pattern metadata created 5. \u2705 Documentation written</p> <p>Result: - Reusable single-vm pattern - Works with any application - Clean separation of concerns</p>"},{"location":"architecture/source-repos/#phase-2-gateway-pattern-q4-2025","title":"Phase 2: Gateway Pattern (\ud83d\udea7 Q4 2025)","text":"<p>Source: mik-tf/tfgrid-gateway (complete repo)</p> <p>Plan:</p> <ul> <li> Extract Terraform multi-VM configs</li> <li> Extract Ansible NAT/proxy playbooks</li> <li> Extract SSL automation (certbot)</li> <li> Create gateway pattern structure</li> <li> Adapt to manifest system</li> <li> Test with multiple apps</li> <li> Write pattern documentation</li> </ul> <p>Complexity: Medium Timeline: 2-4 weeks Risk: Low (code exists and works)</p>"},{"location":"architecture/source-repos/#phase-3-k3s-pattern-q1-2026","title":"Phase 3: K3s Pattern (\ud83d\udea7 Q1 2026)","text":"<p>Source: ucli-tools/tfgrid-k3s (complete repo)</p> <p>Plan:</p> <ul> <li> Extract Terraform cluster configs</li> <li> Extract Ansible K3s playbooks</li> <li> Extract MetalLB/Ingress configs</li> <li> Create k3s pattern structure</li> <li> Add Helm chart support</li> <li> GitOps integration</li> <li> Write pattern documentation</li> </ul> <p>Complexity: High Timeline: 4-6 weeks Risk: Medium (more complex integration)</p>"},{"location":"architecture/source-repos/#what-we-learned","title":"\ud83c\udf93 What We Learned","text":""},{"location":"architecture/source-repos/#from-mik-tftfgrid-ai-agent","title":"From mik-tf/tfgrid-ai-agent","text":"<ul> <li>\u2705 Clean deployment hooks - setup \u2192 configure \u2192 healthcheck</li> <li>\u2705 Developer user system - Non-root user provisioning</li> <li>\u2705 Remote execution - Run commands from local machine</li> <li>\u2705 Project organization - Structured workspace</li> </ul>"},{"location":"architecture/source-repos/#from-mik-tftfgrid-gateway","title":"From mik-tf/tfgrid-gateway","text":"<ul> <li>\u2705 Dual gateway modes - NAT vs Proxy flexibility</li> <li>\u2705 SSL automation - Let's Encrypt integration</li> <li>\u2705 Network redundancy - Multiple network paths</li> <li>\u2705 Security controls - Granular access control</li> </ul>"},{"location":"architecture/source-repos/#from-ucli-toolstfgrid-k3s","title":"From ucli-tools/tfgrid-k3s","text":"<ul> <li>\u2705 Management node pattern - Dedicated cluster control</li> <li>\u2705 Component integration - MetalLB + Ingress automation</li> <li>\u2705 Dual-stack networking - IPv4/IPv6 support</li> <li>\u2705 K9s TUI - Better cluster management UX</li> </ul>"},{"location":"architecture/source-repos/#acknowledgments","title":"\ud83d\ude4f Acknowledgments","text":""},{"location":"architecture/source-repos/#individual-contributors","title":"Individual Contributors","text":"<p>mik-tf - Created tfgrid-ai-agent (complete AI deployment) - Created tfgrid-gateway (gateway patterns, SSL, networking) - Created ai-agent framework (loop technique) - Provided foundation for TFGrid Compose</p> <p>ucli-tools organization - Created tfgrid-k3s (complete K3s cluster deployment) - Advanced Kubernetes automation - Management node patterns</p> <p>Geoff Huntley - Pioneered \"Ralph\" AI coding technique - Inspired ai-agent framework</p>"},{"location":"architecture/source-repos/#threefold-community","title":"ThreeFold Community","text":"<ul> <li>ThreeFold Grid infrastructure</li> <li>Terraform provider</li> <li>Community support</li> </ul>"},{"location":"architecture/source-repos/#code-origin-breakdown","title":"\ud83d\udcca Code Origin Breakdown","text":""},{"location":"architecture/source-repos/#current-v100","title":"Current (v1.0.0)","text":"Component Source Integration Infrastructure mik-tf/tfgrid-ai-agent \u2705 Extracted as pattern Platform config mik-tf/tfgrid-ai-agent \u2705 Generalized for reuse AI agent app mik-tf/tfgrid-ai-agent \u2705 Separated from deployer CLI tool TFGrid Compose \u2705 Built from scratch Context files TFGrid Compose \u2705 New feature Agent subcommand TFGrid Compose \u2705 New feature"},{"location":"architecture/source-repos/#planned","title":"Planned","text":"Component Source Integration Gateway pattern mik-tf/tfgrid-gateway \ud83d\udea7 Q4 2025 K3s pattern ucli-tools/tfgrid-k3s \ud83d\udea7 Q1 2026"},{"location":"architecture/source-repos/#differences-from-source","title":"\ud83d\udd04 Differences from Source","text":""},{"location":"architecture/source-repos/#whats-new-in-tfgrid-compose","title":"What's New in TFGrid Compose","text":"<p>Features not in source repos:</p> <ul> <li>\u2705 Universal deployer - Single CLI for all patterns</li> <li>\u2705 Manifest system - <code>tfgrid-compose.yaml</code> for apps</li> <li>\u2705 Context files - <code>.tfgrid-compose.yaml</code> for projects</li> <li>\u2705 Agent subcommand - Simplified AI agent operations</li> <li>\u2705 Pattern system - Reusable deployment strategies</li> <li>\u2705 State management - Track all deployments</li> <li>\u2705 Unified CLI - Consistent commands across patterns</li> </ul> <p>Simplifications:</p> <ul> <li>\u2705 One command deployment (<code>tfgrid-compose up</code>)</li> <li>\u2705 Auto-detect configurations</li> <li>\u2705 Smart defaults</li> <li>\u2705 Better error messages</li> <li>\u2705 Idempotent operations</li> </ul>"},{"location":"architecture/source-repos/#whats-preserved","title":"What's Preserved","text":"<p>Kept from source repos:</p> <ul> <li>\u2705 All core functionality</li> <li>\u2705 Infrastructure code (Terraform)</li> <li>\u2705 Platform configs (Ansible)</li> <li>\u2705 Network setup (WireGuard, Mycelium)</li> <li>\u2705 Best practices</li> <li>\u2705 Production readiness</li> </ul>"},{"location":"architecture/source-repos/#migration-guides","title":"\ud83d\udcd6 Migration Guides","text":""},{"location":"architecture/source-repos/#from-mik-tftfgrid-ai-agent_1","title":"From mik-tf/tfgrid-ai-agent","text":"<p>Before: <pre><code>git clone https://github.com/mik-tf/tfgrid-ai-agent\ncd tfgrid-ai-agent\nmake deploy\n</code></pre></p> <p>After: <pre><code>git clone https://github.com/tfgrid-studio/tfgrid-compose\ncd tfgrid-compose\nmake install\ntfgrid-compose up ../tfgrid-ai-agent\n</code></pre></p> <p>Benefits: - \u2705 Simpler commands - \u2705 Context file support - \u2705 Pattern reusability - \u2705 Better documentation</p> <p>Complete migration guide \u2192</p>"},{"location":"architecture/source-repos/#external-links","title":"\ud83d\udd17 External Links","text":""},{"location":"architecture/source-repos/#source-repositories_1","title":"Source Repositories","text":"<ul> <li>mik-tf/tfgrid-ai-agent</li> <li>mik-tf/tfgrid-gateway</li> <li>ucli-tools/tfgrid-k3s</li> <li>mik-tf/ai-agent</li> </ul>"},{"location":"architecture/source-repos/#tfgrid-compose-organization","title":"TFGrid Compose Organization","text":"<ul> <li>tfgrid-compose</li> <li>tfgrid-compose</li> <li>tfgrid-ai-agent</li> <li>tfgrid-docs</li> </ul>"},{"location":"architecture/source-repos/#license-attribution","title":"\ud83d\udcdc License &amp; Attribution","text":""},{"location":"architecture/source-repos/#source-code-licenses","title":"Source Code Licenses","text":"<p>From source repos: - tfgrid-ai-agent: Apache 2.0 License - tfgrid-gateway: Apache 2.0 License - tfgrid-k3s: Apache 2.0 License</p> <p>TFGrid Compose: - tfgrid-compose: Apache 2.0 License - tfgrid-ai-agent: Apache 2.0 License - Commercial repos: Business Source License / Proprietary</p>"},{"location":"architecture/source-repos/#attribution","title":"Attribution","text":"<p>All source repositories are properly credited in: - \u2705 README files - \u2705 Documentation - \u2705 Code comments - \u2705 This acknowledgment page</p> <p>Thank you to all contributors who made TFGrid Compose possible! \ud83d\ude4f</p> <p>View current status \u2192 \u2022 View planned features \u2192</p>"},{"location":"community/code-of-conduct/","title":"Code of Conduct","text":"<p>Version: 1.0 Last Updated: October 14, 2025 Applies To: All TFGrid Studio projects and community spaces</p>"},{"location":"community/code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in TFGrid Studio a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"community/code-of-conduct/#our-standards","title":"Our Standards","text":""},{"location":"community/code-of-conduct/#expected-behavior","title":"\u2705 Expected Behavior","text":"<p>Examples of behavior that contributes to a positive environment:</p> <ul> <li>Respect: Treating all community members with respect and consideration</li> <li>Kindness: Being welcoming and supportive to newcomers</li> <li>Constructive Feedback: Providing helpful, actionable criticism</li> <li>Collaboration: Working together toward common goals</li> <li>Responsibility: Taking accountability for mistakes and learning from them</li> <li>Focus: Keeping discussions relevant and productive</li> <li>Empathy: Showing understanding of different viewpoints and experiences</li> <li>Professionalism: Maintaining professional standards in all interactions</li> </ul>"},{"location":"community/code-of-conduct/#unacceptable-behavior","title":"\u274c Unacceptable Behavior","text":"<p>Examples of unacceptable behavior include:</p> <ul> <li>Harassment: Trolling, insulting/derogatory comments, personal or political attacks</li> <li>Discrimination: Any form of discrimination or exclusionary jokes/language</li> <li>Privacy Violation: Publishing others' private information without permission</li> <li>Intimidation: Threatening, stalking, or doxxing community members</li> <li>Sexual Content: Unwelcome sexual attention or advances</li> <li>Disruption: Deliberately disrupting discussions or community activities</li> <li>Spam: Excessive self-promotion or off-topic posts</li> <li>Bad Faith: Arguing in bad faith or sea-lioning</li> <li>Weaponization: Using the Code of Conduct as a tool for harassment</li> </ul>"},{"location":"community/code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies to all TFGrid Studio spaces, including but not limited to:</p> <p>Online Spaces:</p> <ul> <li>GitHub repositories (issues, pull requests, discussions)</li> <li>Official Discord/Slack channels</li> <li>Social media accounts</li> <li>Email communications</li> <li>Documentation sites</li> <li>Video calls and meetings</li> </ul> <p>Offline Spaces:</p> <ul> <li>Conferences and meetups</li> <li>Workshops and training sessions</li> <li>Any event representing TFGrid Studio</li> </ul> <p>This Code of Conduct also applies when an individual is officially representing the community in public spaces.</p>"},{"location":"community/code-of-conduct/#enforcement","title":"Enforcement","text":""},{"location":"community/code-of-conduct/#reporting","title":"Reporting","text":"<p>If you experience or witness unacceptable behavior, or have any other concerns, please report it by:</p> <ol> <li>Email: conduct@tfgrid.studio</li> <li>GitHub: Create a confidential security advisory</li> <li>Direct Message: Contact a maintainer privately</li> </ol> <p>What to include in your report:</p> <ul> <li>Your contact information</li> <li>Names (usernames) of people involved</li> <li>Description of the behavior</li> <li>Links or screenshots (if applicable)</li> <li>Any other relevant context</li> <li>Whether you prefer to remain anonymous</li> </ul> <p>All reports will be kept confidential. We will never share reporter information without explicit consent unless required by law.</p>"},{"location":"community/code-of-conduct/#response-timeline","title":"Response Timeline","text":"<ul> <li>Acknowledgment: Within 24 hours</li> <li>Initial Review: Within 3 business days</li> <li>Resolution: Varies by complexity, typically within 1-2 weeks</li> </ul> <p>You will receive updates on the progress of your report.</p>"},{"location":"community/code-of-conduct/#enforcement-actions","title":"Enforcement Actions","text":"<p>Project maintainers are responsible for clarifying and enforcing our standards. They will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Possible consequences include:</p>"},{"location":"community/code-of-conduct/#1-warning","title":"1. Warning","text":"<p>Impact: A private, written warning explaining the violation and why the behavior was inappropriate.</p> <p>Duration: Single incident</p>"},{"location":"community/code-of-conduct/#2-temporary-ban","title":"2. Temporary Ban","text":"<p>Impact: A temporary ban from all community spaces (GitHub, Discord, etc.)</p> <p>Duration: Days to weeks, depending on severity</p>"},{"location":"community/code-of-conduct/#3-permanent-ban","title":"3. Permanent Ban","text":"<p>Impact: Permanent ban from all TFGrid Studio community spaces</p> <p>Duration: Indefinite</p>"},{"location":"community/code-of-conduct/#appeal-process","title":"Appeal Process","text":"<p>If you believe an enforcement action was made in error, you may appeal by:</p> <ol> <li>Emailing conduct@tfgrid.studio with \"Appeal\" in the subject</li> <li>Providing new information or context</li> <li>Explaining why you believe the decision was incorrect</li> </ol> <p>Appeals will be reviewed by a different maintainer when possible.</p>"},{"location":"community/code-of-conduct/#guidelines-for-specific-spaces","title":"Guidelines for Specific Spaces","text":""},{"location":"community/code-of-conduct/#github","title":"GitHub","text":"<p>Issues and Pull Requests:</p> <ul> <li>Stay on topic</li> <li>Be patient with maintainers (they're volunteers)</li> <li>Don't demand immediate responses</li> <li>Provide complete information (logs, versions, steps to reproduce)</li> <li>Close resolved issues</li> </ul> <p>Code Reviews:</p> <ul> <li>Focus on code, not people (\"This function could be improved\" vs \"You wrote bad code\")</li> <li>Suggest alternatives</li> <li>Acknowledge good work</li> <li>Accept feedback gracefully</li> </ul> <p>Discussions:</p> <ul> <li>Search before posting duplicates</li> <li>Use appropriate categories</li> <li>Mark solutions when found</li> <li>Help others when you can</li> </ul>"},{"location":"community/code-of-conduct/#chat-discordslack","title":"Chat (Discord/Slack)","text":"<ul> <li>Keep conversations in appropriate channels</li> <li>No excessive @mentions</li> <li>Use threads for long discussions</li> <li>Respect Do Not Disturb status</li> <li>No spam or unsolicited DMs</li> <li>Keep memes and off-topic content minimal</li> </ul>"},{"location":"community/code-of-conduct/#social-media","title":"Social Media","text":"<ul> <li>Don't speak on behalf of TFGrid Studio without authorization</li> <li>Be respectful in comments and replies</li> <li>Disclose your relationship when promoting TFGrid Studio projects</li> <li>Don't engage with trolls or bad-faith actors</li> </ul>"},{"location":"community/code-of-conduct/#maintainer-responsibilities","title":"Maintainer Responsibilities","text":"<p>Project maintainers are responsible for:</p> <ul> <li>Modeling: Exemplifying the Code of Conduct in their own behavior</li> <li>Enforcing: Fairly and consistently enforcing the Code of Conduct</li> <li>Communicating: Clearly communicating expectations and decisions</li> <li>Transparency: Being transparent about enforcement actions (while respecting privacy)</li> <li>Improvement: Continuously improving community health</li> </ul> <p>Maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"community/code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from:</p> <ul> <li>Contributor Covenant, version 2.1</li> <li>Django Code of Conduct</li> <li>Rust Code of Conduct</li> </ul>"},{"location":"community/code-of-conduct/#changes","title":"Changes","text":"<p>We may update this Code of Conduct from time to time. All changes will be announced through official channels and posted to this document.</p> <p>Version History:</p> <ul> <li>v1.0 (2025-10-14): Initial Code of Conduct</li> </ul>"},{"location":"community/code-of-conduct/#contact","title":"Contact","text":"<p>Enforcement Team: conduct@tfgrid.studio General Inquiries: community@tfgrid.studio Security Issues: See Security Policy</p>"},{"location":"community/code-of-conduct/#license","title":"License","text":"<p>This Code of Conduct is licensed under the Creative Commons Attribution 4.0 International License.</p> <p>Thank you for helping make TFGrid Studio a welcoming and inclusive community! \ud83c\udf1f</p>"},{"location":"community/contributing/","title":"Contributing to TFGrid Studio","text":"<p>Welcome! We're excited that you're interested in contributing to TFGrid Studio. This guide will help you get started.</p>"},{"location":"community/contributing/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Getting Started</li> <li>How to Contribute</li> <li>Development Workflow</li> <li>Code Standards</li> <li>Testing</li> <li>Documentation</li> <li>Community</li> </ol>"},{"location":"community/contributing/#getting-started","title":"Getting Started","text":""},{"location":"community/contributing/#prerequisites","title":"Prerequisites","text":"<p>For tfgrid-compose development:</p> <ul> <li>Bash 4.0+</li> <li>Git</li> <li>OpenTofu or Terraform</li> <li>Ansible</li> <li>Basic understanding of shell scripting</li> </ul> <p>For documentation:</p> <ul> <li>Markdown knowledge</li> <li>Git</li> <li>Python 3.8+ (for local MkDocs preview)</li> </ul>"},{"location":"community/contributing/#set-up-development-environment","title":"Set Up Development Environment","text":"<pre><code># Clone the repository\ngit clone https://github.com/tfgrid-studio/tfgrid-compose\ncd tfgrid-compose\n\n# Install prerequisites\n# Ubuntu/Debian\nsudo apt update\nsudo apt install ansible git\n\n# Install OpenTofu (recommended)\ncurl -L https://get.opentofu.org/install-opentofu.sh | sudo bash\n\n# Test your setup\n./cli/tfgrid-compose --version\n</code></pre>"},{"location":"community/contributing/#first-time-setup","title":"First Time Setup","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork: <pre><code>git clone https://github.com/YOUR-USERNAME/tfgrid-compose\ncd tfgrid-compose\n</code></pre></li> <li>Add upstream remote: <pre><code>git remote add upstream https://github.com/tfgrid-studio/tfgrid-compose\n</code></pre></li> <li>Create a branch: <pre><code>git checkout -b feature/my-feature\n</code></pre></li> </ol>"},{"location":"community/contributing/#how-to-contribute","title":"How to Contribute","text":""},{"location":"community/contributing/#types-of-contributions","title":"Types of Contributions","text":"<p>We welcome many types of contributions:</p>"},{"location":"community/contributing/#bug-reports","title":"\ud83d\udc1b Bug Reports","text":"<p>Found a bug? Help us fix it!</p> <p>Before reporting:</p> <ul> <li>Search existing issues</li> <li>Try latest version</li> <li>Gather reproduction steps</li> </ul> <p>Create an issue with:</p> <ul> <li>Clear title</li> <li>Description of the bug</li> <li>Steps to reproduce</li> <li>Expected vs actual behavior</li> <li>Environment details (OS, versions)</li> <li>Logs (with sensitive data removed)</li> </ul>"},{"location":"community/contributing/#feature-requests","title":"\ud83d\udca1 Feature Requests","text":"<p>Have an idea for improvement?</p> <p>Create an issue with:</p> <ul> <li>Clear use case</li> <li>Proposed solution</li> <li>Alternatives considered</li> <li>Willingness to implement</li> </ul>"},{"location":"community/contributing/#documentation","title":"\ud83d\udcdd Documentation","text":"<p>Improve or add documentation:</p> <ul> <li>Fix typos</li> <li>Clarify confusing sections</li> <li>Add examples</li> <li>Write guides</li> <li>Translate content</li> </ul>"},{"location":"community/contributing/#code-contributions","title":"\ud83d\udcbb Code Contributions","text":"<p>Implement features or fix bugs:</p> <ul> <li>Bug fixes</li> <li>New features</li> <li>Performance improvements</li> <li>Refactoring</li> <li>Tests</li> </ul>"},{"location":"community/contributing/#design-patterns","title":"\ud83c\udfa8 Design Patterns","text":"<p>Create new deployment patterns:</p> <ul> <li>Follow Pattern Contract</li> <li>Document use cases</li> <li>Provide examples</li> <li>Test thoroughly</li> </ul>"},{"location":"community/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"community/contributing/#1-pick-an-issue","title":"1. Pick an Issue","text":"<p>Good first issues:</p> <ul> <li>Look for <code>good-first-issue</code> label</li> <li>Check <code>help-wanted</code> label</li> <li>Simple bug fixes</li> <li>Documentation improvements</li> </ul> <p>Claim an issue:</p> <ul> <li>Comment \"I'd like to work on this\"</li> <li>Wait for assignment (prevents duplicates)</li> </ul>"},{"location":"community/contributing/#2-create-a-branch","title":"2. Create a Branch","text":"<pre><code># Get latest code\ngit checkout main\ngit pull upstream main\n\n# Create feature branch\ngit checkout -b type/description\n\n# Branch naming:\n# feature/add-monitoring\n# fix/ssh-timeout\n# docs/architecture-guide\n# refactor/validation-module\n</code></pre>"},{"location":"community/contributing/#3-make-changes","title":"3. Make Changes","text":"<p>Best practices:</p> <ul> <li>Make focused, atomic commits</li> <li>Write clear commit messages</li> <li>Test your changes</li> <li>Update documentation</li> <li>Follow code standards</li> </ul>"},{"location":"community/contributing/#4-commit-your-changes","title":"4. Commit Your Changes","text":"<p>Commit message format: <pre><code>type(scope): brief description\n\nDetailed explanation (if needed)\n\nFixes #123\n</code></pre></p> <p>Types:</p> <ul> <li><code>feat</code>: New feature</li> <li><code>fix</code>: Bug fix</li> <li><code>docs</code>: Documentation only</li> <li><code>refactor</code>: Code refactoring</li> <li><code>test</code>: Adding tests</li> <li><code>chore</code>: Maintenance tasks</li> </ul> <p>Examples: <pre><code>git commit -m \"feat(orchestrator): add multi-deployment support\"\ngit commit -m \"fix(validation): resolve mnemonic loading issue\"\ngit commit -m \"docs(architecture): add system diagrams\"\n</code></pre></p>"},{"location":"community/contributing/#5-push-and-create-pull-request","title":"5. Push and Create Pull Request","text":"<pre><code># Push to your fork\ngit push origin feature/my-feature\n\n# Create PR on GitHub\n# - Fill out the PR template\n# - Link related issues\n# - Request review\n</code></pre>"},{"location":"community/contributing/#6-code-review-process","title":"6. Code Review Process","text":"<p>What to expect: - Maintainers will review within 3-5 business days - You may be asked to make changes - CI tests must pass - At least one approval required</p> <p>Responding to feedback: - Be receptive to suggestions - Ask questions if unclear - Make requested changes - Push updates to your branch - Re-request review when ready</p>"},{"location":"community/contributing/#7-merge","title":"7. Merge","text":"<p>Once approved: - Maintainer will merge your PR - Branch will be deleted automatically - Changes go into next release</p>"},{"location":"community/contributing/#code-standards","title":"Code Standards","text":""},{"location":"community/contributing/#shell-scripts-bash","title":"Shell Scripts (Bash)","text":"<p>Style: <pre><code>#!/usr/bin/env bash\n# Brief description of script purpose\n\nset -e  # Exit on error\n\n# Constants in UPPERCASE\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &amp;&amp; pwd)\"\n\n# Functions use snake_case\nmy_function() {\n    local param=$1\n\n    # Clear logic with comments\n    echo \"Processing: $param\"\n}\n\n# Call functions\nmy_function \"value\"\n</code></pre></p> <p>Best practices: - Use <code>set -e</code> for error handling - Quote variables: <code>\"$var\"</code> not <code>$var</code> - Use <code>local</code> for function variables - Add comments for complex logic - Use meaningful variable names - Check command existence: <code>command -v cmd</code></p>"},{"location":"community/contributing/#terraformopentofu","title":"Terraform/OpenTofu","text":"<p>Style: <pre><code># Use consistent formatting\nresource \"grid_deployment\" \"vm\" {\n  name = \"my_deployment\"\n\n  # Group related attributes\n  network {\n    node_id = var.node_id\n    name    = \"network\"\n  }\n}\n\n# Document outputs\noutput \"primary_ip\" {\n  description = \"Primary IP address for SSH connection\"\n  value       = local.primary_ip\n}\n</code></pre></p> <p>Requirements: - Implement pattern contract - Use variables for configurability - Document all outputs - Run <code>terraform fmt</code> before committing</p>"},{"location":"community/contributing/#ansible","title":"Ansible","text":"<p>Style: <pre><code>---\n# Use descriptive task names\n- name: Install required packages\n  apt:\n    name:\n      - git\n      - curl\n      - build-essential\n    state: present\n    update_cache: yes\n  become: yes\n\n# Use handlers for services\n- name: Configure application\n  template:\n    src: app.conf.j2\n    dest: /etc/app/config.conf\n  notify: restart application\n\nhandlers:\n  - name: restart application\n    systemd:\n      name: app\n      state: restarted\n</code></pre></p> <p>Best practices: - Use descriptive task names - Idempotent operations - Use handlers for restarts - Tag tasks appropriately - Test playbooks thoroughly</p>"},{"location":"community/contributing/#testing","title":"Testing","text":""},{"location":"community/contributing/#manual-testing","title":"Manual Testing","text":"<p>Before submitting PR: 1. Test your changes locally 2. Try different configurations 3. Test error cases 4. Verify logs are helpful</p> <p>Test script: <pre><code># Example test workflow\ncd tfgrid-compose\n\n# Test validation\n./cli/tfgrid-compose up /nonexistent/path  # Should fail gracefully\n\n# Test deployment (if you have access to ThreeFold Grid)\n./cli/tfgrid-compose up ../tfgrid-ai-agent\n\n# Test cleanup\n./cli/tfgrid-compose down ../tfgrid-ai-agent\n</code></pre></p>"},{"location":"community/contributing/#automated-testing","title":"Automated Testing","text":"<p>Run test suite: <pre><code># Run validation tests\n./tests/test-validation.sh\n\n# Add new tests for your changes\n# tests/test-my-feature.sh\n</code></pre></p>"},{"location":"community/contributing/#test-checklist","title":"Test Checklist","text":"<ul> <li> Code follows style guide</li> <li> Manual testing completed</li> <li> Error cases handled</li> <li> Logs are clear and helpful</li> <li> Documentation updated</li> <li> No sensitive data in commits</li> </ul>"},{"location":"community/contributing/#documentation_1","title":"Documentation","text":""},{"location":"community/contributing/#when-to-update-docs","title":"When to Update Docs","text":"<p>Always update docs when: - Adding new features - Changing behavior - Adding CLI commands - Modifying configuration options - Fixing bugs that affect usage</p>"},{"location":"community/contributing/#documentation-structure","title":"Documentation Structure","text":"<p>tfgrid-docs/ (public-facing): - User guides - API documentation - Tutorials - Troubleshooting</p> <p>tfgrid-compose/README.md: - Project overview - Quick start - Links to full docs</p>"},{"location":"community/contributing/#writing-style","title":"Writing Style","text":"<p>Be clear and concise: - Short sentences - Active voice - Clear examples - Step-by-step instructions</p> <p>Good example: <pre><code>## Deploy Application\n\nDeploy your application to ThreeFold Grid:\n\n```bash\ntfgrid-compose up /path/to/app\n</code></pre></p> <p>This command will: 1. Validate prerequisites 2. Create infrastructure 3. Configure networking 4. Deploy your application <pre><code>**Bad example:**\n```markdown\n## Deployment\n\nYou can deploy stuff with the up command maybe.\n</code></pre></p>"},{"location":"community/contributing/#community","title":"Community","text":""},{"location":"community/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>All contributors must follow our Code of Conduct.</p> <p>Key points: - Be respectful - Be inclusive - Be constructive - Be professional</p>"},{"location":"community/contributing/#communication-channels","title":"Communication Channels","text":"<p>GitHub: - Issues: Bug reports, feature requests - Discussions: Questions, ideas, help - Pull Requests: Code contributions</p> <p>Maintainers: - Tag <code>@tfgrid-studio/maintainers</code> for urgent issues - Be patient - we're volunteers</p>"},{"location":"community/contributing/#getting-help","title":"Getting Help","text":"<p>Before asking: 1. Check documentation 2. Search existing issues 3. Read troubleshooting guide</p> <p>When asking: - Provide context - Include error messages - Show what you tried - Be specific</p>"},{"location":"community/contributing/#release-process","title":"Release Process","text":""},{"location":"community/contributing/#versioning","title":"Versioning","text":"<p>We follow Semantic Versioning: - MAJOR: Breaking changes - MINOR: New features (backward-compatible) - PATCH: Bug fixes</p>"},{"location":"community/contributing/#release-cycle","title":"Release Cycle","text":"<p>Regular releases: - PATCH: As needed for bug fixes - MINOR: Monthly or when features are ready - MAJOR: Annually or for significant changes</p> <p>Your contribution will be included in the next release after merge.</p>"},{"location":"community/contributing/#recognition","title":"Recognition","text":""},{"location":"community/contributing/#contributors","title":"Contributors","text":"<p>All contributors are recognized in: - GitHub contributors list - Release notes - Project README</p>"},{"location":"community/contributing/#maintainers","title":"Maintainers","text":"<p>Outstanding contributors may be invited to become maintainers.</p> <p>Maintainer responsibilities: - Review pull requests - Triage issues - Guide contributors - Make release decisions - Enforce Code of Conduct</p>"},{"location":"community/contributing/#quick-reference","title":"Quick Reference","text":""},{"location":"community/contributing/#common-tasks","title":"Common Tasks","text":"<pre><code># Get latest code\ngit checkout main\ngit pull upstream main\n\n# Create branch\ngit checkout -b feature/my-feature\n\n# Make changes and commit\ngit add .\ngit commit -m \"feat(scope): description\"\n\n# Push and create PR\ngit push origin feature/my-feature\n\n# Update branch with latest main\ngit fetch upstream\ngit rebase upstream/main\ngit push --force-with-lease origin feature/my-feature\n</code></pre>"},{"location":"community/contributing/#getting-unstuck","title":"Getting Unstuck","text":"<p>Your PR isn't being reviewed? - Ping after 5 business days - Check if CI failed - Ensure you filled out PR template</p> <p>Tests are failing? - Check CI logs - Run tests locally - Ask for help in PR comments</p> <p>Merge conflict? - Rebase on latest main - Resolve conflicts - Force push to your branch</p>"},{"location":"community/contributing/#thank-you","title":"Thank You!","text":"<p>Thank you for contributing to TFGrid Studio! Your help makes this project better for everyone.</p> <p>Questions? - Create a GitHub Discussion - Email: community@tfgrid.studio</p> <p>Happy Contributing! \ud83d\ude80</p>"},{"location":"community/security/","title":"Security Policy","text":"<p>Version: 1.0 Last Updated: October 14, 2025 Applies To: All TFGrid Studio projects</p>"},{"location":"community/security/#reporting-security-vulnerabilities","title":"Reporting Security Vulnerabilities","text":"<p>We take security seriously. If you discover a security vulnerability, please report it responsibly.</p>"},{"location":"community/security/#how-to-report","title":"\ud83d\udd12 How to Report","text":"<p>DO NOT create public GitHub issues for security vulnerabilities.</p> <p>Instead, use one of these secure channels:</p>"},{"location":"community/security/#1-github-security-advisory-preferred","title":"1. GitHub Security Advisory (Preferred)","text":"<ol> <li>Go to the repository's Security tab</li> <li>Click \"Report a vulnerability\"</li> <li>Fill out the private advisory form</li> <li>Submit</li> </ol>"},{"location":"community/security/#2-email","title":"2. Email","text":"<p>Send details to: security@tfgrid.studio</p> <p>Encrypt with PGP: (optional but recommended) <pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\n[PGP key will be published separately]\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre></p>"},{"location":"community/security/#what-to-include","title":"\ud83d\udccb What to Include","text":"<p>Please provide:</p> <ul> <li>Description: Clear explanation of the vulnerability</li> <li>Impact: What an attacker could do</li> <li>Affected versions: Which versions are vulnerable</li> <li>Steps to reproduce: Detailed reproduction steps</li> <li>Proof of concept: Code/commands demonstrating the issue (if applicable)</li> <li>Suggested fix: If you have ideas (optional)</li> <li>Your contact info: For follow-up questions</li> </ul> <p>Example report: <pre><code>Title: Mnemonic exposure in debug logs\n\nDescription:\nWhen running with debug mode, the ThreeFold mnemonic is logged\nin plain text to .tfgrid-compose/terraform-apply.log\n\nImpact:\nAn attacker with access to log files could steal wallet credentials\nand drain funds from the ThreeFold account.\n\nAffected Versions:\ntfgrid-compose v0.9.0 and earlier\n\nSteps to Reproduce:\n1. Enable debug mode\n2. Run: tfgrid-compose --debug up &lt;app&gt;\n3. Check: .tfgrid-compose/terraform-apply.log\n4. Mnemonic visible in output\n\nSuggested Fix:\nRedact TF_VAR_mnemonic from all log output\n</code></pre></p>"},{"location":"community/security/#response-timeline","title":"Response Timeline","text":"<p>We aim to respond quickly to security reports:</p> Stage Timeline Acknowledgment Within 24 hours Initial Assessment Within 3 business days Severity Rating Within 5 business days Patch Development Varies by severity (see below) Disclosure After patch is released"},{"location":"community/security/#severity-based-timelines","title":"Severity-Based Timelines","text":"<p>Critical (CVSS 9.0-10.0):</p> <ul> <li>Emergency patch within 7 days</li> <li>Immediate notification to users</li> </ul> <p>High (CVSS 7.0-8.9):</p> <ul> <li>Patch within 30 days</li> <li>Advance notification to users</li> </ul> <p>Medium (CVSS 4.0-6.9):</p> <ul> <li>Patch in next regular release</li> <li>Standard release notes</li> </ul> <p>Low (CVSS 0.1-3.9):</p> <ul> <li>May be batched with other fixes</li> <li>Documented in changelog</li> </ul>"},{"location":"community/security/#what-happens-next","title":"What Happens Next?","text":""},{"location":"community/security/#1-triage","title":"1. Triage","text":"<p>We will: - Confirm the vulnerability - Assess severity using CVSS - Determine affected versions - Identify fix priority</p>"},{"location":"community/security/#2-fix-development","title":"2. Fix Development","text":"<p>We will: - Develop a patch - Test thoroughly - Prepare security advisory - Plan coordinated disclosure</p>"},{"location":"community/security/#3-disclosure","title":"3. Disclosure","text":"<p>We will: - Release patched version - Publish security advisory - Update CHANGELOG - Credit you (if desired)</p>"},{"location":"community/security/#4-communication","title":"4. Communication","text":"<p>You will receive: - Regular updates on progress - Credit in security advisory (optional) - Recognition in Hall of Fame (optional)</p>"},{"location":"community/security/#supported-versions","title":"Supported Versions","text":"<p>We provide security updates for:</p> Version Supported 0.9.x \u2705 Yes (current) 0.8.x \u274c No &lt; 0.8 \u274c No <p>Recommendation: Always use the latest version.</p>"},{"location":"community/security/#security-best-practices","title":"Security Best Practices","text":""},{"location":"community/security/#for-users","title":"For Users","text":""},{"location":"community/security/#mnemonic-security","title":"Mnemonic Security","text":"<p>Store securely: <pre><code># Create secure config directory\nmkdir -p ~/.config/threefold\nchmod 700 ~/.config/threefold\n\n# Store mnemonic with restricted permissions\necho \"your twelve word mnemonic here\" &gt; ~/.config/threefold/mnemonic\nchmod 600 ~/.config/threefold/mnemonic\n\n# Verify permissions\nls -la ~/.config/threefold/mnemonic\n# Should show: -rw------- (600)\n</code></pre></p> <p>Never: - \u274c Commit mnemonics to version control - \u274c Share mnemonics in chat/email - \u274c Store in publicly accessible locations - \u274c Use same mnemonic across environments</p> <p>Do: - \u2705 Use environment variables in CI/CD - \u2705 Rotate mnemonics regularly - \u2705 Use separate mnemonics for dev/prod - \u2705 Back up securely (encrypted offline storage)</p>"},{"location":"community/security/#ssh-key-management","title":"SSH Key Management","text":"<p>Use strong keys: <pre><code># Generate Ed25519 key (recommended)\nssh-keygen -t ed25519 -f ~/.ssh/tfgrid_ed25519\n\n# Or RSA 4096-bit\nssh-keygen -t rsa -b 4096 -f ~/.ssh/tfgrid_rsa\n</code></pre></p> <p>Protect private keys: <pre><code># Set correct permissions\nchmod 600 ~/.ssh/tfgrid_ed25519\nchmod 644 ~/.ssh/tfgrid_ed25519.pub\n\n# Use passphrase (recommended)\nssh-keygen -p -f ~/.ssh/tfgrid_ed25519\n</code></pre></p>"},{"location":"community/security/#wireguard-security","title":"WireGuard Security","text":"<p>Key management: - Generated keys stored in Terraform state - Private keys in <code>/etc/wireguard/</code> (600 permissions) - Don't share WireGuard configurations</p> <p>Network isolation: - WireGuard creates private networks - No default internet routing - Explicitly configure external access if needed</p>"},{"location":"community/security/#deployment-security","title":"Deployment Security","text":"<p>State files contain sensitive data: <pre><code># Add to .gitignore\necho \".tfgrid-compose/\" &gt;&gt; .gitignore\necho \".terraform/\" &gt;&gt; .gitignore\necho \"*.tfstate*\" &gt;&gt; .gitignore\n\n# Never commit:\n# - .tfgrid-compose/\n# - Terraform state files\n# - WireGuard configs\n# - Private keys\n</code></pre></p> <p>Clean up after testing: <pre><code># Remove sensitive logs\nrm -rf .tfgrid-compose/\n\n# Remove WireGuard configs\nsudo rm -f /etc/wireguard/wg*.conf\n</code></pre></p>"},{"location":"community/security/#for-contributors","title":"For Contributors","text":""},{"location":"community/security/#code-security","title":"Code Security","text":"<p>Never commit: - API keys or tokens - Passwords or secrets - Private keys - Mnemonics or seed phrases - Personal data</p> <p>Use secure coding practices: - Validate all inputs - Sanitize log output - Use parameterized commands (avoid injection) - Check file permissions - Handle errors securely</p> <p>Example - Redacting sensitive data: <pre><code># \u274c Bad: Logs mnemonic\necho \"Using mnemonic: $TF_VAR_mnemonic\"\n\n# \u2705 Good: Redacts mnemonic\nif [ -n \"$TF_VAR_mnemonic\" ]; then\n    echo \"Mnemonic loaded successfully\"\nelse\n    echo \"Mnemonic not found\"\nfi\n</code></pre></p>"},{"location":"community/security/#dependency-security","title":"Dependency Security","text":"<p>Keep dependencies updated: <pre><code># Check for updates\nansible --version\nterraform --version\ntofu --version\n\n# Update to latest\nsudo apt update &amp;&amp; sudo apt upgrade\n</code></pre></p> <p>Review third-party code: - Audit pattern contributions - Review Terraform modules - Check Ansible roles - Verify scripts before execution</p>"},{"location":"community/security/#for-maintainers","title":"For Maintainers","text":""},{"location":"community/security/#release-security","title":"Release Security","text":"<p>Before release: - Review all PRs for security issues - Run security scanners - Check for hardcoded secrets - Verify dependency versions - Test in isolated environment</p> <p>Release checklist: - [ ] No hardcoded credentials - [ ] Dependencies up to date - [ ] Security advisory reviewed - [ ] CHANGELOG includes security fixes - [ ] Version bumped appropriately</p>"},{"location":"community/security/#incident-response","title":"Incident Response","text":"<p>If vulnerability found: 1. Assess severity immediately 2. Notify security team 3. Develop fix in private 4. Test thoroughly 5. Coordinate disclosure 6. Release patch 7. Notify users</p>"},{"location":"community/security/#common-security-issues","title":"Common Security Issues","text":""},{"location":"community/security/#mnemonic-exposure","title":"Mnemonic Exposure","text":"<p>Risk: High - Can lead to fund theft</p> <p>Vectors: - Logs containing mnemonics - Committed to version control - Insecure file permissions - Exposed in error messages</p> <p>Prevention: - Redact from all logs - Check file permissions - Use <code>.gitignore</code> - Sanitize error output</p>"},{"location":"community/security/#state-file-exposure","title":"State File Exposure","text":"<p>Risk: Medium - Contains deployment details</p> <p>Vectors: - Committed to version control - Publicly accessible storage - Insufficient file permissions</p> <p>Prevention: - Add to <code>.gitignore</code> - Use secure state backends - Restrict file permissions - Clean up after use</p>"},{"location":"community/security/#ssh-key-compromise","title":"SSH Key Compromise","text":"<p>Risk: High - Unauthorized VM access</p> <p>Vectors: - Weak key strength - No passphrase - Insecure storage - Shared keys</p> <p>Prevention: - Use Ed25519 or RSA 4096 - Use passphrases - Restrict permissions (600) - Unique keys per deployment</p>"},{"location":"community/security/#wireguard-config-exposure","title":"WireGuard Config Exposure","text":"<p>Risk: Medium - Network access</p> <p>Vectors: - World-readable files - Committed to repos - Shared configurations</p> <p>Prevention: - 600 permissions on configs - Don't commit configs - Rotate keys regularly</p>"},{"location":"community/security/#security-features","title":"Security Features","text":""},{"location":"community/security/#current-security-measures","title":"Current Security Measures","text":"<p>tfgrid-compose implements:</p> <ol> <li>Mnemonic Protection</li> <li>Environment variable isolation</li> <li>File permission checks</li> <li> <p>Warning on insecure permissions</p> </li> <li> <p>SSH Key Security</p> </li> <li>System key usage (not embedded)</li> <li>Key-based auth only (no passwords)</li> <li> <p>Multiple key type support</p> </li> <li> <p>WireGuard Encryption</p> </li> <li>End-to-end encrypted tunnels</li> <li>Private network isolation</li> <li> <p>Automatic key generation</p> </li> <li> <p>State Isolation</p> </li> <li>Local state directory</li> <li>Git-ignored by default</li> <li> <p>Per-deployment separation</p> </li> <li> <p>Input Validation</p> </li> <li>Path validation</li> <li>Manifest validation</li> <li>Prerequisite checks</li> </ol>"},{"location":"community/security/#planned-security-enhancements","title":"Planned Security Enhancements","text":"<p>Roadmap: - [ ] Encrypted state backends (v0.11.0) - [ ] Secrets management integration (v0.12.0) - [ ] Automated security scanning (v1.0.0) - [ ] Supply chain verification (v1.1.0) - [ ] Zero-knowledge deployment options (v2.0.0)</p>"},{"location":"community/security/#security-audits","title":"Security Audits","text":"<p>Status: No formal audit completed yet</p> <p>Planned: - Community review: Ongoing - First formal audit: Planned for v1.0.0 - Regular audits: Annually after 1.0</p> <p>Want to help? - Review code for security issues - Report vulnerabilities responsibly - Contribute security improvements</p>"},{"location":"community/security/#hall-of-fame","title":"Hall of Fame","text":"<p>We recognize security researchers who help keep TFGrid Studio secure.</p> <p>Contributors: - Be the first!</p> <p>Acknowledgment options: - GitHub profile link - Twitter handle - Company name - Anonymous</p>"},{"location":"community/security/#contact","title":"Contact","text":"<p>Security Team: security@tfgrid.studio General Inquiries: community@tfgrid.studio Code of Conduct: Code of Conduct</p>"},{"location":"community/security/#legal","title":"Legal","text":""},{"location":"community/security/#safe-harbor","title":"Safe Harbor","text":"<p>TFGrid Studio supports safe harbor for security researchers who: - Make good faith effort to avoid harm - Follow responsible disclosure - Don't access/modify user data without permission - Don't perform DoS attacks - Don't spam or cause disruption</p> <p>We will not pursue legal action against researchers who follow these guidelines.</p>"},{"location":"community/security/#scope","title":"Scope","text":"<p>In scope: - tfgrid-compose - tfgrid-ai-agent - tfgrid-docs website - Official infrastructure</p> <p>Out of scope: - Third-party services (ThreeFold Grid itself) - User deployments - Community projects - Social engineering</p> <p>Thank you for helping keep TFGrid Studio secure! \ud83d\udd12</p>"},{"location":"development/pattern-contract/","title":"Pattern Contract","text":"<p>All deployment patterns MUST follow this contract to work with tfgrid-compose orchestrator.</p>"},{"location":"development/pattern-contract/#required-outputs","title":"Required Outputs","text":"<p>Every pattern's Terraform configuration MUST provide these outputs:</p>"},{"location":"development/pattern-contract/#primary_ip-string-required","title":"<code>primary_ip</code> (string, required)","text":"<p>The main IP address for connecting to the deployment. This is used for SSH and management.</p> <pre><code>output \"primary_ip\" {\n  value       = \"10.1.3.2\"  # or whatever the IP is\n  description = \"Primary IP address for SSH connection\"\n}\n</code></pre>"},{"location":"development/pattern-contract/#primary_ip_type-string-required","title":"<code>primary_ip_type</code> (string, required)","text":"<p>The type of the primary IP. Valid values: <code>wireguard</code>, <code>public</code>, <code>mycelium</code></p> <pre><code>output \"primary_ip_type\" {\n  value       = \"wireguard\"\n  description = \"Type of primary IP\"\n}\n</code></pre>"},{"location":"development/pattern-contract/#deployment_name-string-required","title":"<code>deployment_name</code> (string, required)","text":"<p>The name of the deployment on TFGrid.</p> <pre><code>output \"deployment_name\" {\n  value       = \"my_deployment\"\n  description = \"Name of the deployment\"\n}\n</code></pre>"},{"location":"development/pattern-contract/#node_ids-list-required","title":"<code>node_ids</code> (list, required)","text":"<p>List of node IDs used in this deployment.</p> <pre><code>output \"node_ids\" {\n  value       = [8, 12, 15]  # Single or multiple nodes\n  description = \"List of node IDs used in deployment\"\n}\n</code></pre>"},{"location":"development/pattern-contract/#optional-outputs","title":"Optional Outputs","text":""},{"location":"development/pattern-contract/#secondary_ips-list-optional","title":"<code>secondary_ips</code> (list, optional)","text":"<p>Additional IP addresses for multi-node deployments (workers, backends, etc.)</p> <pre><code>output \"secondary_ips\" {\n  value = [\n    {\n      name = \"worker-1\"\n      ip   = \"10.1.3.3\"\n      type = \"wireguard\"\n      role = \"worker\"\n    },\n    {\n      name = \"worker-2\"\n      ip   = \"10.1.3.4\"\n      type = \"wireguard\"\n      role = \"worker\"\n    }\n  ]\n  description = \"Additional IPs for multi-node deployments\"\n}\n</code></pre>"},{"location":"development/pattern-contract/#mycelium_ip-string-optional","title":"<code>mycelium_ip</code> (string, optional)","text":"<p>Mycelium IPv6 address if available.</p> <pre><code>output \"mycelium_ip\" {\n  value       = \"57e:efab:75c4:1a3a:ff0f:2ac:d184:9715\"\n  description = \"Mycelium IPv6 address\"\n}\n</code></pre>"},{"location":"development/pattern-contract/#connection_info-map-optional","title":"<code>connection_info</code> (map, optional)","text":"<p>Special connection information for non-standard deployments.</p> <pre><code>output \"connection_info\" {\n  value = {\n    method     = \"kubectl\"      # How to connect: ssh, kubectl, etc.\n    kubeconfig = \"...\"          # Config file content if needed\n    endpoint   = \"https://...\"  # API endpoint\n  }\n  description = \"Connection information\"\n}\n</code></pre>"},{"location":"development/pattern-contract/#pattern-examples","title":"Pattern Examples","text":""},{"location":"development/pattern-contract/#single-vm-pattern","title":"Single-VM Pattern","text":"<pre><code>output \"primary_ip\" {\n  value = split(\"/\", grid_deployment.vm.vms[0].computedip)[0]\n}\n\noutput \"primary_ip_type\" {\n  value = \"wireguard\"\n}\n\noutput \"deployment_name\" {\n  value = grid_deployment.vm.name\n}\n\noutput \"node_ids\" {\n  value = [var.node_id]\n}\n</code></pre>"},{"location":"development/pattern-contract/#gateway-pattern","title":"Gateway Pattern","text":"<pre><code>output \"primary_ip\" {\n  value = grid_deployment.gateway.vms[0].public_ip\n}\n\noutput \"primary_ip_type\" {\n  value = \"public\"\n}\n\noutput \"secondary_ips\" {\n  value = [\n    for vm in grid_deployment.backends.vms : {\n      name = vm.name\n      ip   = split(\"/\", vm.computedip)[0]\n      type = \"wireguard\"\n      role = \"backend\"\n    }\n  ]\n}\n\noutput \"node_ids\" {\n  value = concat([var.gateway_node], var.backend_nodes)\n}\n</code></pre>"},{"location":"development/pattern-contract/#k3s-pattern","title":"K3s Pattern","text":"<pre><code>output \"primary_ip\" {\n  value = grid_deployment.k3s.vms[0].computedip  # master\n}\n\noutput \"primary_ip_type\" {\n  value = \"wireguard\"\n}\n\noutput \"secondary_ips\" {\n  value = [\n    for vm in slice(grid_deployment.k3s.vms, 1, length(grid_deployment.k3s.vms)) : {\n      name = vm.name\n      ip   = vm.computedip\n      type = \"wireguard\"\n      role = \"worker\"\n    }\n  ]\n}\n\noutput \"connection_info\" {\n  value = {\n    method     = \"kubectl\"\n    kubeconfig = data.remote_file.kubeconfig.content\n    endpoint   = \"https://${primary_ip}:6443\"\n  }\n}\n</code></pre>"},{"location":"development/pattern-contract/#why-this-contract","title":"Why This Contract?","text":"<p>Universal Orchestration: The orchestrator never needs to know pattern-specific details. It just reads standard outputs.</p> <p>Future-Proof: New patterns automatically work with the orchestrator.</p> <p>Multi-Node Support: Secondary IPs handle gateway backends, k8s workers, database replicas, etc.</p> <p>Flexibility: Optional outputs allow pattern-specific features without breaking compatibility.</p>"},{"location":"development/pattern-contract/#validation","title":"Validation","text":"<p>The orchestrator will fail deployment if <code>primary_ip</code> is not provided. All other standard outputs have sensible defaults.</p> <p>Test your pattern: <pre><code>cd patterns/my-pattern/infrastructure\nterraform output primary_ip        # MUST return an IP\nterraform output primary_ip_type   # MUST return wireguard/public/mycelium\nterraform output deployment_name   # MUST return a name\nterraform output node_ids          # MUST return JSON array\n</code></pre></p>"},{"location":"development/versioning-policy/","title":"Versioning Policy","text":"<p>Status: Active Adopted: October 14, 2025 Applies to: tfgrid-compose and all TFGrid Studio projects</p>"},{"location":"development/versioning-policy/#overview","title":"Overview","text":"<p>TFGrid Studio follows Semantic Versioning 2.0.0 for all projects. This document defines our versioning standards, release processes, and backward compatibility commitments.</p>"},{"location":"development/versioning-policy/#semantic-versioning-standard","title":"Semantic Versioning Standard","text":""},{"location":"development/versioning-policy/#format-majorminorpatch","title":"Format: MAJOR.MINOR.PATCH","text":"<p>Given a version number MAJOR.MINOR.PATCH (e.g., 1.2.3):</p>"},{"location":"development/versioning-policy/#major-version-x00","title":"MAJOR Version (X.0.0)","text":"<p>Increment when making incompatible API changes or breaking changes.</p> <p>Examples:</p> <ul> <li>Changing CLI command structure (e.g., <code>tfgrid-compose deploy</code> \u2192 <code>tfgrid-compose up</code>)</li> <li>Removing or renaming core features</li> <li>Changing pattern contract requirements</li> <li>Modifying state file format without migration</li> <li>Removing deprecated features</li> <li>Changing default behavior in non-backward-compatible ways</li> </ul> <p>User Impact: May require code/script changes, migration steps, or configuration updates.</p>"},{"location":"development/versioning-policy/#minor-version-xy0","title":"MINOR Version (x.Y.0)","text":"<p>Increment when adding new features in a backward-compatible manner.</p> <p>Examples:</p> <ul> <li>Adding new patterns (e.g., adding k3s pattern)</li> <li>Adding new CLI commands (e.g., <code>tfgrid-compose monitor</code>)</li> <li>Adding new configuration options</li> <li>Adding new networking modes</li> <li>Introducing new capabilities without breaking existing functionality</li> <li>Adding optional parameters to existing commands</li> </ul> <p>User Impact: No changes required; new features available opt-in.</p>"},{"location":"development/versioning-policy/#patch-version-xyz","title":"PATCH Version (x.y.Z)","text":"<p>Increment when making backward-compatible bug fixes.</p> <p>Examples:</p> <ul> <li>Fixing validation logic</li> <li>Correcting error messages</li> <li>Improving performance</li> <li>Documentation corrections</li> <li>Security patches (non-breaking)</li> <li>Dependency updates (non-breaking)</li> <li>Minor UI/UX improvements</li> </ul> <p>User Impact: Seamless upgrade; fixes only.</p>"},{"location":"development/versioning-policy/#version-0xy-pre-10-policy","title":"Version 0.x.y (Pre-1.0) Policy","text":""},{"location":"development/versioning-policy/#special-rules-for-pre-10-versions","title":"Special Rules for Pre-1.0 Versions","text":"<p>During the 0.x.y phase, the project is considered pre-release with more flexibility:</p> <ul> <li>0.y.0: May include breaking changes (similar to MAJOR in 1.x.y+)</li> <li>0.y.z: Bug fixes and minor features</li> <li>0.1.0: Initial development</li> <li>0.9.0: Release candidate, feature-complete, near 1.0</li> <li>1.0.0: First stable release, API locked</li> </ul>"},{"location":"development/versioning-policy/#current-status-tfgrid-compose","title":"Current Status (tfgrid-compose)","text":"<p>Version: 0.9.0 (October 2025)</p> <p>What this means:</p> <ul> <li>Core features are production-ready</li> <li>API is stable but may evolve based on feedback</li> <li>Breaking changes possible but minimized</li> <li>Path to 1.0.0 within 2-3 months</li> </ul>"},{"location":"development/versioning-policy/#release-process","title":"Release Process","text":""},{"location":"development/versioning-policy/#1-version-decision","title":"1. Version Decision","text":"<p>Before any release, determine version bump:</p> <pre><code># Current version: 0.9.0\n\n# Bug fix only \u2192 0.9.1\n# New backward-compatible feature \u2192 0.10.0\n# Breaking change (pre-1.0) \u2192 0.10.0 or 1.0.0\n# Breaking change (post-1.0) \u2192 2.0.0\n</code></pre>"},{"location":"development/versioning-policy/#2-update-version-references","title":"2. Update Version References","text":"<p>Files to update:</p> <ul> <li><code>cli/tfgrid-compose</code> (VERSION variable)</li> <li><code>Makefile</code> (help text)</li> <li><code>README.md</code> (version badge)</li> <li>Any other version references</li> </ul>"},{"location":"development/versioning-policy/#3-update-changelog","title":"3. Update Changelog","text":"<p>Format: Keep a <code>CHANGELOG.md</code> using Keep a Changelog format.</p> <pre><code># Changelog\n\n## [0.9.1] - 2025-10-15\n\n### Fixed\n- WireGuard connection timeout handling\n- State file permission issues\n\n### Changed\n- Improved error messages for missing prerequisites\n\n## [0.9.0] - 2025-10-14\n\n### Added\n- OpenTofu priority support\n- Multi-deployment management\n- Architecture documentation\n\n### Changed\n- Renamed from tfgrid-deployer to tfgrid-compose\n\n### Fixed\n- Version inconsistency across files\n</code></pre>"},{"location":"development/versioning-policy/#4-git-tagging","title":"4. Git Tagging","text":"<p>Tag format: <code>vMAJOR.MINOR.PATCH</code></p> <pre><code># Create annotated tag\ngit tag -a v0.9.1 -m \"Release v0.9.1: Bug fixes and improvements\"\n\n# Push tag to remote\ngit push origin v0.9.1\n</code></pre>"},{"location":"development/versioning-policy/#5-release-notes","title":"5. Release Notes","text":"<p>Create GitHub Release with:</p> <ul> <li>Version number</li> <li>Release date</li> <li>Changelog excerpt</li> <li>Installation instructions</li> <li>Breaking changes (if any)</li> <li>Migration guide (if needed)</li> </ul>"},{"location":"development/versioning-policy/#backward-compatibility","title":"Backward Compatibility","text":""},{"location":"development/versioning-policy/#commitment","title":"Commitment","text":"<p>Post-1.0.0:</p> <ul> <li>MAJOR version changes only for breaking changes</li> <li>Deprecation warnings before removal</li> <li>Migration guides for breaking changes</li> <li>Support for N-1 version during transition</li> </ul> <p>Pre-1.0.0 (0.x.y):</p> <ul> <li>Best effort to maintain compatibility</li> <li>Breaking changes documented in changelog</li> <li>Migration notes provided when needed</li> </ul>"},{"location":"development/versioning-policy/#deprecation-policy","title":"Deprecation Policy","text":"<p>Post-1.0.0:</p> <ol> <li>Announce: Mark feature as deprecated with warning</li> <li>Grace Period: Minimum 1 MINOR version (e.g., 1.2.0 \u2192 1.3.0)</li> <li>Remove: In next MAJOR version (e.g., 2.0.0)</li> </ol> <p>Example: <pre><code># Version 1.2.0\ntfgrid-compose old-command\n# Warning: 'old-command' is deprecated, use 'new-command' instead\n# Will be removed in v2.0.0\n\n# Version 1.3.0\n# Still works, still warns\n\n# Version 2.0.0\n# 'old-command' removed\n</code></pre></p>"},{"location":"development/versioning-policy/#breaking-changes","title":"Breaking Changes","text":""},{"location":"development/versioning-policy/#definition","title":"Definition","text":"<p>A breaking change is any modification that: - Requires users to modify existing scripts/code - Changes default behavior in incompatible ways - Removes or renames commands/features - Changes output formats (CLI, logs, state files) - Changes configuration schema</p>"},{"location":"development/versioning-policy/#communication","title":"Communication","text":"<p>When introducing breaking changes:</p> <ol> <li>Document in CHANGELOG under \"BREAKING CHANGES\" section</li> <li>Provide migration guide</li> <li>Announce in release notes prominently</li> <li>Support with automated migration tools when possible</li> </ol> <p>Example Breaking Change Documentation: <pre><code>## [2.0.0] - 2026-01-15\n\n### BREAKING CHANGES\n\n- **CLI Command Structure**: Renamed `deploy` to `up` and `destroy` to `down`\n  - Migration: Replace `tfgrid-compose deploy` with `tfgrid-compose up`\n  - Migration: Replace `tfgrid-compose destroy` with `tfgrid-compose down`\n\n- **State Directory**: Changed from `.tfgrid-deployer` to `.tfgrid-compose`\n  - Migration: Run `tfgrid-compose migrate-state` to automatically upgrade\n</code></pre></p>"},{"location":"development/versioning-policy/#version-progression-path","title":"Version Progression Path","text":""},{"location":"development/versioning-policy/#tfgrid-compose-roadmap","title":"tfgrid-compose Roadmap","text":"<pre><code>v0.9.0  \u2190 Current (Oct 2025)\n  \u2193     Core features complete, production-ready\n  \u2193\nv0.9.1  \u2190 Bug fixes, OpenTofu refinements\n  \u2193\nv0.9.2  \u2190 Minor improvements\n  \u2193\nv0.10.0 \u2190 Multi-deployment, monitoring features\n  \u2193\nv0.11.0 \u2190 CI/CD, complete documentation, shell completion\n  \u2193\nv0.12.0 \u2190 Testing suite, community feedback incorporated\n  \u2193\nv1.0.0  \u2190 Official Stable Release (Q1 2026)\n  \u2193     API locked, backward compatibility guaranteed\n  \u2193\nv1.1.0  \u2190 Pattern registry, community patterns\n  \u2193\nv1.2.0  \u2190 Plugin system\n  \u2193\nv2.0.0  \u2190 Major architectural changes (if needed)\n</code></pre>"},{"location":"development/versioning-policy/#path-to-100","title":"Path to 1.0.0","text":"<p>Requirements for 1.0.0 release: - \u2705 All core patterns production-ready - \u2705 Comprehensive documentation - \u2705 Test coverage &gt;80% - \u2705 CI/CD pipeline operational - \u2705 No known critical bugs - \u2705 Community feedback incorporated - \u2705 Migration guides prepared - \u2705 Performance benchmarks met - \u2705 Security review completed - \u2705 API/CLI stable and finalized</p> <p>Estimated Timeline: Q1 2026 (2-3 months from v0.9.0)</p>"},{"location":"development/versioning-policy/#release-cadence","title":"Release Cadence","text":""},{"location":"development/versioning-policy/#post-100-release-schedule","title":"Post-1.0.0 Release Schedule","text":"<ul> <li>PATCH releases: As needed (bug fixes, security)</li> <li>MINOR releases: Monthly or bi-monthly (features)</li> <li>MAJOR releases: Annually or as needed (breaking changes)</li> </ul>"},{"location":"development/versioning-policy/#pre-100-release-schedule","title":"Pre-1.0.0 Release Schedule","text":"<ul> <li>More frequent releases during active development</li> <li>Focus on feedback and iteration</li> <li>Version bumps based on feature completion</li> </ul>"},{"location":"development/versioning-policy/#version-checking","title":"Version Checking","text":""},{"location":"development/versioning-policy/#in-scripts","title":"In Scripts","text":"<p>Users can check version programmatically:</p> <pre><code># Get version\ntfgrid-compose --version\n# Output: TFGrid Compose v0.9.0\n\n# Check minimum version in scripts\nREQUIRED_VERSION=\"0.9.0\"\nCURRENT_VERSION=$(tfgrid-compose --version | grep -oP '\\d+\\.\\d+\\.\\d+')\n\nif [[ \"$(printf '%s\\n' \"$REQUIRED_VERSION\" \"$CURRENT_VERSION\" | sort -V | head -n1)\" != \"$REQUIRED_VERSION\" ]]; then\n    echo \"Error: tfgrid-compose $REQUIRED_VERSION or higher required\"\n    exit 1\nfi\n</code></pre>"},{"location":"development/versioning-policy/#version-api","title":"Version API","text":"<p>Future enhancement:</p> <pre><code># Check for updates\ntfgrid-compose update check\n\n# Auto-update\ntfgrid-compose update install\n</code></pre>"},{"location":"development/versioning-policy/#multi-project-coordination","title":"Multi-Project Coordination","text":""},{"location":"development/versioning-policy/#tfgrid-studio-version-alignment","title":"TFGrid Studio Version Alignment","text":"<p>Projects: - <code>tfgrid-compose</code>: Orchestration platform - <code>tfgrid-ai-agent</code>: AI agent application - <code>tfgrid-docs</code>: Documentation site - <code>tfgrid-web</code>: Web interface</p> <p>Version Independence: - Each project has its own version - No requirement for version alignment - Compatibility documented in release notes</p> <p>Example: <pre><code>tfgrid-compose v0.9.0\n  Compatible with: tfgrid-ai-agent v0.3.0+\n\ntfgrid-ai-agent v0.3.2\n  Requires: tfgrid-compose v0.8.0+\n</code></pre></p>"},{"location":"development/versioning-policy/#examples","title":"Examples","text":""},{"location":"development/versioning-policy/#example-1-bug-fix-release","title":"Example 1: Bug Fix Release","text":"<pre><code>Current: v0.9.0\nChange: Fixed WireGuard timeout issue\nNext: v0.9.1 (PATCH bump)\n</code></pre>"},{"location":"development/versioning-policy/#example-2-new-feature","title":"Example 2: New Feature","text":"<pre><code>Current: v0.9.1\nChange: Added multi-deployment management\nNext: v0.10.0 (MINOR bump)\n</code></pre>"},{"location":"development/versioning-policy/#example-3-breaking-change-pre-10","title":"Example 3: Breaking Change (Pre-1.0)","text":"<pre><code>Current: v0.10.5\nChange: Changed state directory structure\nNext: v0.11.0 (MINOR bump in 0.x, includes breaking change)\nNote: Provide migration tool\n</code></pre>"},{"location":"development/versioning-policy/#example-4-breaking-change-post-10","title":"Example 4: Breaking Change (Post-1.0)","text":"<pre><code>Current: v1.5.3\nChange: Removed deprecated 'deploy' command\nNext: v2.0.0 (MAJOR bump)\nNote: Announced in v1.2.0, removed in v2.0.0\n</code></pre>"},{"location":"development/versioning-policy/#frequently-asked-questions","title":"Frequently Asked Questions","text":""},{"location":"development/versioning-policy/#why-start-at-090-instead-of-010-or-100","title":"Why start at 0.9.0 instead of 0.1.0 or 1.0.0?","text":"<p>Answer: v0.9.0 signals: - Core features are complete and production-ready - API is stable but may evolve slightly based on feedback - Close to 1.0.0 but not locked in yet - Allows flexibility while showing maturity</p>"},{"location":"development/versioning-policy/#when-will-we-reach-100","title":"When will we reach 1.0.0?","text":"<p>Answer: When we meet the 1.0.0 requirements checklist (see above). Estimated Q1 2026, approximately 2-3 months after comprehensive testing and community feedback.</p>"},{"location":"development/versioning-policy/#can-i-use-0x-versions-in-production","title":"Can I use 0.x versions in production?","text":"<p>Answer: Yes! Version 0.9.0+ is production-ready. The 0.x designation means the API may evolve, not that it's unstable.</p>"},{"location":"development/versioning-policy/#what-if-i-find-a-critical-bug","title":"What if I find a critical bug?","text":"<p>Answer: We'll release a PATCH version (e.g., 0.9.0 \u2192 0.9.1) immediately. Security issues take highest priority.</p>"},{"location":"development/versioning-policy/#how-do-i-stay-updated","title":"How do I stay updated?","text":"<p>Answer: - Watch the GitHub repository - Subscribe to release notifications - Check changelog regularly - Use <code>tfgrid-compose update check</code> (future)</p>"},{"location":"development/versioning-policy/#references","title":"References","text":"<ul> <li>Semantic Versioning 2.0.0</li> <li>Keep a Changelog</li> <li>GitHub Release Best Practices</li> </ul>"},{"location":"development/versioning-policy/#document-updates","title":"Document Updates","text":"Date Version Changes 2025-10-14 1.0 Initial versioning policy created <p>Status: Active Next Review: After v1.0.0 release Maintained by: TFGrid Studio Team</p>"},{"location":"getting-started/concepts/","title":"Core Concepts","text":"<p>Coming Soon</p> <p>This page will cover: - Apps and manifests - Deployment patterns - State management - Hook system</p> <p>Back to Getting Started</p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>Complete setup guide for TFGrid Compose.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":""},{"location":"getting-started/installation/#required-software","title":"Required Software","text":"Tool Purpose Installation Terraform or OpenTofu Infrastructure provisioning Install Ansible Platform configuration Install WireGuard Secure networking Install Git Version control Usually pre-installed"},{"location":"getting-started/installation/#threefold-account","title":"ThreeFold Account","text":"<ol> <li>Create Account: ThreeFold Connect</li> <li>Get TFT Tokens: Purchase or earn TFT</li> <li>Save Mnemonic: 12-word recovery phrase</li> </ol>"},{"location":"getting-started/installation/#install-prerequisites","title":"Install Prerequisites","text":""},{"location":"getting-started/installation/#ubuntudebian","title":"Ubuntu/Debian","text":"<pre><code># OpenTofu\ncurl --proto '=https' --tlsv1.2 -fsSL https://get.opentofu.org/install-opentofu.sh | bash\n\n# Ansible\nsudo apt update\nsudo apt install ansible\n\n# WireGuard\nsudo apt install wireguard\n\n# Optional tools\nsudo apt install jq curl wget git\n</code></pre>"},{"location":"getting-started/installation/#macos","title":"macOS","text":"<pre><code># Using Homebrew\nbrew install opentofu ansible wireguard-tools jq\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<pre><code># Check versions\ntofu version         # or: terraform version\nansible --version\nwg --version\ngit --version\n</code></pre>"},{"location":"getting-started/installation/#install-tfgrid-compose","title":"Install TFGrid Compose","text":""},{"location":"getting-started/installation/#method-1-one-line-installer-recommended","title":"Method 1: One-Line Installer (Recommended)","text":"<pre><code>curl -sSL install.tfgrid.studio/install.sh | sh\n</code></pre> <p>The installer automatically:</p> <ul> <li>\u2705 Checks prerequisites (git, make)</li> <li>\u2705 Clones tfgrid-compose repository to <code>~/.tfgrid/</code></li> <li>\u2705 Installs CLI to <code>~/.local/bin/</code></li> <li>\u2705 Adds to PATH in your shell config</li> <li>\u2705 Works with bash, zsh, fish</li> </ul> <p>After installation: <pre><code># Reload your shell\nsource ~/.bashrc  # or ~/.zshrc or ~/.config/fish/config.fish\n\n# Verify installation\ntfgrid-compose --version\n</code></pre></p>"},{"location":"getting-started/installation/#method-2-manual-clone-and-install","title":"Method 2: Manual Clone and Install","text":"<pre><code># Clone repository\ngit clone https://github.com/tfgrid-studio/tfgrid-compose\ncd tfgrid-compose\n\n# Run install script (automatically sets up PATH)\nmake install\n\n# Verify installation\ntfgrid-compose --version\n</code></pre>"},{"location":"getting-started/installation/#method-3-manual-installation","title":"Method 3: Manual Installation","text":"<pre><code># Clone repository\ngit clone https://github.com/tfgrid-studio/tfgrid-compose\ncd tfgrid-compose\n\n# Make CLI executable\nchmod +x cli/tfgrid-compose\n\n# Add to PATH (choose your shell)\n# Bash/Zsh:\necho 'export PATH=\"$PATH:'$(pwd)'/cli\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Fish:\necho 'set -gx PATH $PATH '(pwd)'/cli' &gt;&gt; ~/.config/fish/config.fish\nsource ~/.config/fish/config.fish\n\n# Verify\ntfgrid-compose --version\n</code></pre>"},{"location":"getting-started/installation/#configure-threefold","title":"Configure ThreeFold","text":""},{"location":"getting-started/installation/#1-store-mnemonic-securely","title":"1. Store Mnemonic Securely","text":"<pre><code># Create config directory\nmkdir -p ~/.config/threefold\n\n# Save mnemonic (replace with your actual mnemonic)\necho \"your twelve word mnemonic phrase here\" &gt; ~/.config/threefold/mnemonic\n\n# Set secure permissions (owner-only read/write)\nchmod 600 ~/.config/threefold/mnemonic\n\n# Verify\ncat ~/.config/threefold/mnemonic\n</code></pre> <p>Security Note: The mnemonic file should have <code>600</code> permissions (owner-only access).</p>"},{"location":"getting-started/installation/#2-set-environment-variable","title":"2. Set Environment Variable","text":"<p>The mnemonic needs to be set as an environment variable for Terraform:</p>"},{"location":"getting-started/installation/#bashzsh","title":"Bash/Zsh","text":"<pre><code># Set for current session\nexport TF_VAR_mnemonic=$(cat ~/.config/threefold/mnemonic)\n\n# Or add to shell config for persistence\necho 'export TF_VAR_mnemonic=$(cat ~/.config/threefold/mnemonic)' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre>"},{"location":"getting-started/installation/#fish","title":"Fish","text":"<pre><code># Set for current session\nset -x TF_VAR_mnemonic (cat ~/.config/threefold/mnemonic)\n\n# Or add to fish config for persistence\necho 'set -x TF_VAR_mnemonic (cat ~/.config/threefold/mnemonic)' &gt;&gt; ~/.config/fish/config.fish\nsource ~/.config/fish/config.fish\n</code></pre>"},{"location":"getting-started/installation/#3-verify-configuration","title":"3. Verify Configuration","text":"<pre><code># Check mnemonic is set\necho $TF_VAR_mnemonic\n\n# Should output your 12-word mnemonic\n</code></pre>"},{"location":"getting-started/installation/#setup-workspace-optional-but-recommended","title":"Setup Workspace (Optional but Recommended)","text":"<p>TFGrid Compose works best with an organized workspace structure:</p> <pre><code># Create standard workspace\nmkdir -p ~/code/github.com/tfgrid-studio\ncd ~/code/github.com/tfgrid-studio\n\n# Clone deployer\ngit clone https://github.com/tfgrid-studio/tfgrid-compose\n\n# Clone apps you want to deploy\ngit clone https://github.com/tfgrid-studio/tfgrid-ai-agent\n\n# Your workspace should look like:\n# ~/code/github.com/tfgrid-studio/\n# \u251c\u2500\u2500 tfgrid-compose/\n# \u2514\u2500\u2500 tfgrid-ai-agent/\n</code></pre> <p>This structure: - \u2705 Keeps everything organized - \u2705 Makes relative paths consistent - \u2705 Follows standard conventions - \u2705 Easy to manage multiple apps</p>"},{"location":"getting-started/installation/#verify-installation_1","title":"Verify Installation","text":""},{"location":"getting-started/installation/#1-check-cli","title":"1. Check CLI","text":"<pre><code># Show help\ntfgrid-compose --help\n\n# Should display:\n# TFGrid Compose - Universal deployment orchestrator\n# \n# Commands:\n#   up [app]       - Deploy application\n#   down [app]     - Destroy deployment\n#   status [app]   - Show deployment status\n#   ...\n</code></pre>"},{"location":"getting-started/installation/#2-check-prerequisites","title":"2. Check Prerequisites","text":"<pre><code># Run built-in validation\ncd tfgrid-compose\nmake check-prereqs\n\n# Should verify:\n# \u2705 Terraform/OpenTofu installed\n# \u2705 Ansible installed\n# \u2705 WireGuard installed\n# \u2705 Mnemonic configured\n</code></pre>"},{"location":"getting-started/installation/#3-test-deployment-optional","title":"3. Test Deployment (Optional)","text":"<pre><code># Deploy the AI agent to verify everything works\ncd ~/code/github.com/tfgrid-studio/tfgrid-compose\ntfgrid-compose up ../tfgrid-ai-agent\n\n# If successful, you'll see:\n# \u2705 Infrastructure deployed\n# \u2705 WireGuard configured\n# \u2705 Platform configured\n# \u2705 Application deployed\n# \u2705 Deployment complete!\n\n# Clean up test deployment\ntfgrid-compose down ../tfgrid-ai-agent\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#command-not-found","title":"Command Not Found","text":"<pre><code># Check if tfgrid-compose is in PATH\nwhich tfgrid-compose\n\n# If not found, add manually:\nexport PATH=\"$PATH:$HOME/code/github.com/tfgrid-studio/tfgrid-compose/cli\"\n</code></pre>"},{"location":"getting-started/installation/#mnemonic-not-set","title":"Mnemonic Not Set","text":"<pre><code># Check if mnemonic is configured\necho $TF_VAR_mnemonic\n\n# If empty, set it:\nexport TF_VAR_mnemonic=$(cat ~/.config/threefold/mnemonic)\n</code></pre>"},{"location":"getting-started/installation/#permission-denied","title":"Permission Denied","text":"<pre><code># Make CLI executable\nchmod +x ~/code/github.com/tfgrid-studio/tfgrid-compose/cli/tfgrid-compose\n\n# Fix mnemonic permissions\nchmod 600 ~/.config/threefold/mnemonic\n</code></pre>"},{"location":"getting-started/installation/#terraformopentofu-not-found","title":"Terraform/OpenTofu Not Found","text":"<pre><code># Install OpenTofu (recommended)\ncurl --proto '=https' --tlsv1.2 -fsSL https://get.opentofu.org/install-opentofu.sh | bash\n\n# Or install Terraform\n# See: https://www.terraform.io/downloads\n</code></pre>"},{"location":"getting-started/installation/#ansible-not-found","title":"Ansible Not Found","text":"<pre><code># Ubuntu/Debian\nsudo apt install ansible\n\n# macOS\nbrew install ansible\n\n# Verify\nansible --version\n</code></pre>"},{"location":"getting-started/installation/#wireguard-not-found","title":"WireGuard Not Found","text":"<pre><code># Ubuntu/Debian\nsudo apt install wireguard\n\n# macOS\nbrew install wireguard-tools\n\n# Verify\nwg --version\n</code></pre>"},{"location":"getting-started/installation/#optional-configuration","title":"Optional Configuration","text":""},{"location":"getting-started/installation/#context-file","title":"Context File","text":"<p>Create a context file to avoid specifying app paths:</p> <pre><code># In your deployer directory\ncd ~/code/github.com/tfgrid-studio/tfgrid-compose\necho \"app: ../tfgrid-ai-agent\" &gt; .tfgrid-compose.yaml\n\n# Now you can run commands without app path:\ntfgrid-compose up        # instead of: tfgrid-compose up ../tfgrid-ai-agent\ntfgrid-compose status    # instead of: tfgrid-compose status ../tfgrid-ai-agent\n</code></pre>"},{"location":"getting-started/installation/#shell-aliases","title":"Shell Aliases","text":"<p>Add convenient aliases to your shell config:</p> <pre><code># Bash/Zsh (~/.bashrc or ~/.zshrc)\nalias tfc='tfgrid-compose'\nalias tfc-up='tfgrid-compose up'\nalias tfc-down='tfgrid-compose down'\nalias tfc-status='tfgrid-compose status'\n\n# Fish (~/.config/fish/config.fish)\nalias tfc='tfgrid-compose'\nalias tfc-up='tfgrid-compose up'\nalias tfc-down='tfgrid-compose down'\nalias tfc-status='tfgrid-compose status'\n</code></pre>"},{"location":"getting-started/installation/#ssh-key-setup","title":"SSH Key Setup","text":"<p>If you don't have SSH keys:</p> <pre><code># Generate ed25519 key (recommended)\nssh-keygen -t ed25519 -C \"your_email@example.com\"\n\n# Or RSA key\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n\n# Accept default location (~/.ssh/id_ed25519 or ~/.ssh/id_rsa)\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Installation complete! \ud83c\udf89</p>"},{"location":"getting-started/installation/#whats-next","title":"What's Next?","text":"<ol> <li>Quick Start Guide - Deploy your first application</li> <li>Core Concepts - Understand how TFGrid Compose works</li> <li>Pattern Documentation - Learn about deployment patterns</li> </ol>"},{"location":"getting-started/installation/#upgrade","title":"Upgrade","text":"<p>To upgrade to the latest version:</p> <pre><code>cd ~/code/github.com/tfgrid-studio/tfgrid-compose\ngit pull origin main\n\n# Re-install if needed\nmake install\n</code></pre>"},{"location":"getting-started/installation/#uninstall","title":"Uninstall","text":"<p>To completely remove TFGrid Compose:</p> <pre><code># Remove symlink\nrm ~/.local/bin/tfgrid-compose\n\n# Remove from PATH (edit your shell config and remove the export line)\n# Bash: nano ~/.bashrc\n# Fish: nano ~/.config/fish/config.fish\n\n# Remove workspace (optional)\nrm -rf ~/code/github.com/tfgrid-studio\n</code></pre> <p>Ready to deploy? \u2192 Quick Start Guide</p>"},{"location":"getting-started/introduction/","title":"Introduction to TFGrid Compose","text":"<p>Universal deployment orchestrator for ThreeFold Grid applications</p>"},{"location":"getting-started/introduction/#what-is-tfgrid-compose","title":"What is TFGrid Compose?","text":"<p>TFGrid Compose is a production-ready deployment platform that makes deploying applications on ThreeFold Grid as simple as deploying with docker-compose.</p> <pre><code># One command to deploy any application\ntfgrid-compose up my-app\n</code></pre> <p>Instead of managing Terraform configurations, Ansible playbooks, and WireGuard networks separately, TFGrid Compose unifies everything into a single, intuitive CLI tool.</p>"},{"location":"getting-started/introduction/#the-problem-we-solve","title":"The Problem We Solve","text":""},{"location":"getting-started/introduction/#before-tfgrid-compose","title":"Before TFGrid Compose","text":"<p>Deploying applications on ThreeFold Grid required:</p> <ol> <li>Manual Infrastructure Setup - Writing Terraform/OpenTofu configurations</li> <li>Network Configuration - Setting up WireGuard or Mycelium manually</li> <li>Platform Configuration - Writing Ansible playbooks</li> <li>Application Deployment - Custom scripts for each app</li> <li>State Management - Tracking deployments manually</li> </ol> <p>Result: Hours of work, multiple repos, complex workflows.</p>"},{"location":"getting-started/introduction/#with-tfgrid-compose","title":"With TFGrid Compose","text":"<pre><code># Configure once\necho \"app: ../my-app\" &gt; .tfgrid-compose.yaml\n\n# Deploy anywhere\ntfgrid-compose up\n</code></pre> <p>Result: Minutes to deploy, one command, consistent workflow.</p>"},{"location":"getting-started/introduction/#core-architecture","title":"Core Architecture","text":"<p>TFGrid Compose separates concerns into three layers:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Applications (Standalone, Portable)                \u2502\n\u2502  tfgrid-ai-agent, your-app, any-app                 \u2502\n\u2502  \u2022 Pattern-agnostic                                 \u2502\n\u2502  \u2022 Manifest-driven (tfgrid-compose.yaml)            \u2502\n\u2502  \u2022 Works on any infrastructure                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                        \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Deployer (Universal Orchestrator)                  \u2502\n\u2502  tfgrid-compose                                     \u2502\n\u2502  \u2022 Pattern system (single-vm, gateway, k3s)         \u2502\n\u2502  \u2022 Terraform + Ansible automation                   \u2502\n\u2502  \u2022 State management                                 \u2502\n\u2502  \u2022 CLI tool (tfgrid-compose)                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                        \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Infrastructure (ThreeFold Grid)                    \u2502\n\u2502  Decentralized compute, storage, networking         \u2502\n\u2502  \u2022 VMs, Kubernetes, networking                      \u2502\n\u2502  \u2022 WireGuard, Mycelium                              \u2502\n\u2502  \u2022 Cost-effective, distributed                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"getting-started/introduction/#key-concepts","title":"Key Concepts","text":""},{"location":"getting-started/introduction/#1-applications","title":"1. Applications","text":"<p>Standalone, portable codebases that can be deployed anywhere.</p> <ul> <li>Contain app source code (<code>src/</code>, <code>app/</code>, etc.)</li> <li>Include deployment manifest (<code>tfgrid-compose.yaml</code>)</li> <li>Define deployment hooks (<code>deployment/setup.sh</code>, etc.)</li> <li>Pattern-agnostic - work with any deployment pattern</li> </ul> <p>Example: <code>tfgrid-ai-agent</code> is a complete application</p>"},{"location":"getting-started/introduction/#2-patterns","title":"2. Patterns","text":"<p>Reusable deployment strategies for different infrastructure needs.</p> Pattern Description Status single-vm Single VM with private networking \u2705 Production gateway Gateway VM + backend VMs with public IPv4 \ud83d\udea7 Q4 2025 k3s Kubernetes cluster with auto-scaling \ud83d\udea7 Q1 2026"},{"location":"getting-started/introduction/#3-deployer","title":"3. Deployer","text":"<p>Universal orchestrator that: - Reads app manifests - Selects deployment pattern - Provisions infrastructure (Terraform) - Configures platform (Ansible) - Deploys application - Manages state</p>"},{"location":"getting-started/introduction/#4-manifest","title":"4. Manifest","text":"<p>Simple YAML file (<code>tfgrid-compose.yaml</code>) that describes your app:</p> <pre><code>name: my-app\nversion: 1.0.0\n\npatterns:\n  recommended: single-vm\n\nresources:\n  cpu: {recommended: 4}\n  memory: {recommended: 8192}\n  disk: {recommended: 100}\n\nhooks:\n  setup: deployment/setup.sh\n  configure: deployment/configure.sh\n  healthcheck: deployment/healthcheck.sh\n</code></pre>"},{"location":"getting-started/introduction/#workflow-example","title":"Workflow Example","text":""},{"location":"getting-started/introduction/#traditional-deployment-without-tfgrid-compose","title":"Traditional Deployment (Without TFGrid Compose)","text":"<pre><code># 1. Navigate to project\ncd my-tfgrid-project\n\n# 2. Configure Terraform\ncd infrastructure\ncp terraform.tfvars.example terraform.tfvars\nnano terraform.tfvars\nexport TF_VAR_mnemonic=\"...\"\n\n# 3. Deploy infrastructure\nterraform init\nterraform apply\n\n# 4. Setup WireGuard\ncd ../scripts\n./setup-wireguard.sh\n\n# 5. Generate Ansible inventory\n./generate-inventory.sh\n\n# 6. Run Ansible\ncd ../platform\nansible-playbook site.yml\n\n# 7. Deploy application\ncd ../\n./deploy-app.sh\n</code></pre> <p>Time: 30-60 minutes Complexity: High Error-prone: Yes</p>"},{"location":"getting-started/introduction/#with-tfgrid-compose_1","title":"With TFGrid Compose","text":"<pre><code># 1. One-time setup\necho \"app: ../my-app\" &gt; .tfgrid-compose.yaml\n\n# 2. Deploy\ntfgrid-compose up\n</code></pre> <p>Time: 2-3 minutes Complexity: Low Error-prone: No</p>"},{"location":"getting-started/introduction/#benefits","title":"Benefits","text":""},{"location":"getting-started/introduction/#speed","title":"\ud83d\ude80 Speed","text":"<p>Deploy in 2-3 minutes instead of 30-60 minutes.</p>"},{"location":"getting-started/introduction/#simplicity","title":"\ud83c\udfaf Simplicity","text":"<p>One command instead of multiple manual steps.</p>"},{"location":"getting-started/introduction/#consistency","title":"\ud83d\udd04 Consistency","text":"<p>Same workflow for all applications, all patterns.</p>"},{"location":"getting-started/introduction/#portability","title":"\ud83d\udce6 Portability","text":"<p>Apps are pattern-agnostic - deploy on single-vm, gateway, or k3s without changes.</p>"},{"location":"getting-started/introduction/#no-lock-in","title":"\ud83d\udd13 No Lock-in","text":"<p>Uses industry standards (Terraform, Ansible, Kubernetes). Easy to migrate away.</p>"},{"location":"getting-started/introduction/#safety","title":"\ud83d\udd12 Safety","text":"<p>Idempotent operations, state tracking, validation before deployment.</p>"},{"location":"getting-started/introduction/#use-cases","title":"Use Cases","text":""},{"location":"getting-started/introduction/#1-aiml-development","title":"1. AI/ML Development","text":"<p>Deploy isolated coding environments for AI agents. <pre><code>tfgrid-compose up tfgrid-ai-agent\n</code></pre></p>"},{"location":"getting-started/introduction/#2-web-applications-coming-soon","title":"2. Web Applications (Coming Soon)","text":"<p>Deploy traditional web apps with public access. <pre><code>tfgrid-compose up my-webapp --pattern=gateway\n</code></pre></p>"},{"location":"getting-started/introduction/#3-microservices-coming-soon","title":"3. Microservices (Coming Soon)","text":"<p>Deploy cloud-native apps on Kubernetes. <pre><code>tfgrid-compose up my-saas --pattern=k3s\n</code></pre></p>"},{"location":"getting-started/introduction/#4-databases","title":"4. Databases","text":"<p>Deploy databases with persistent storage. <pre><code>tfgrid-compose up my-postgres --pattern=single-vm\n</code></pre></p>"},{"location":"getting-started/introduction/#how-it-works","title":"How It Works","text":""},{"location":"getting-started/introduction/#deployment-flow","title":"Deployment Flow","text":"<pre><code>1. Read app manifest (tfgrid-compose.yaml)\n        \u2193\n2. Select pattern (single-vm, gateway, k3s)\n        \u2193\n3. Validate configuration\n        \u2193\n4. Generate Terraform config\n        \u2193\n5. Provision infrastructure (VM, networking)\n        \u2193\n6. Setup WireGuard/Mycelium\n        \u2193\n7. Generate Ansible inventory\n        \u2193\n8. Configure platform (Ansible)\n        \u2193\n9. Deploy application source\n        \u2193\n10. Run deployment hooks (setup \u2192 configure \u2192 healthcheck)\n        \u2193\n11. Verify deployment\n        \u2193\n12. Save state\n        \u2193\n13. \u2705 Done! (2-3 minutes total)\n</code></pre>"},{"location":"getting-started/introduction/#state-management","title":"State Management","text":"<p>TFGrid Compose automatically tracks: - Deployed infrastructure - Network configurations - Application state - Pattern used - Timestamps</p> <p>Stored in: <code>.tfgrid-compose/state.yaml</code></p>"},{"location":"getting-started/introduction/#comparison","title":"Comparison","text":""},{"location":"getting-started/introduction/#vs-docker-compose","title":"vs Docker Compose","text":"Feature TFGrid Compose Docker Compose Deployment Target Cloud VMs Local containers Infrastructure Automated (Terraform) None Networking WireGuard/Mycelium Docker networks Use Case Production deployment Development Complexity Simple (one command) Simple"},{"location":"getting-started/introduction/#vs-kubernetes","title":"vs Kubernetes","text":"Feature TFGrid Compose Kubernetes Learning Curve Low High Setup Time 2-3 minutes Hours/Days Patterns Multiple (VM, K8s, etc.) K8s only Simplicity High Low Power Medium-High High"},{"location":"getting-started/introduction/#vs-herokuvercel","title":"vs Heroku/Vercel","text":"Feature TFGrid Compose Heroku/Vercel Vendor Lock-in \u274c No \u2705 Yes Cost Low Medium-High Control Full Limited Infrastructure Decentralized Centralized Patterns Multiple Single"},{"location":"getting-started/introduction/#source-credits","title":"Source &amp; Credits","text":"<p>TFGrid Compose was built by extracting and unifying proven, production-ready implementations:</p> <ul> <li>Gateway Pattern: Inspired by mik-tf/tfgrid-gateway</li> <li>K3s Pattern: Inspired by ucli-tools/tfgrid-k3s</li> <li>AI Agent App: Based on mik-tf/tfgrid-ai-agent</li> </ul> <p>These repositories contain complete, working code that has been validated in real deployments.</p> <p>Learn more about source repositories \u2192</p>"},{"location":"getting-started/introduction/#next-steps","title":"Next Steps","text":"<ul> <li>Installation - Install tfgrid-compose and prerequisites</li> <li>Quick Start - Deploy your first application in 5 minutes</li> <li>Core Concepts - Deep dive into patterns and manifests</li> </ul> <p>Ready to get started? \u2192 Install TFGrid Compose</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>Deploy your first application on ThreeFold Grid in 5 minutes.</p>"},{"location":"getting-started/quickstart/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have: - \u2705 TFGrid Compose installed - \u2705 ThreeFold mnemonic configured - \u2705 Terraform/OpenTofu, Ansible, WireGuard installed</p>"},{"location":"getting-started/quickstart/#step-1-setup-workspace-2-minutes","title":"Step 1: Setup Workspace (2 minutes)","text":"<pre><code># Create workspace\nmkdir -p ~/code/github.com/tfgrid-studio\ncd ~/code/github.com/tfgrid-studio\n\n# Clone deployer\ngit clone https://github.com/tfgrid-studio/tfgrid-compose\ncd tfgrid-compose\n\n# Install CLI\nmake install\n\n# Clone an app to deploy (AI agent example)\ncd ~/code/github.com/tfgrid-studio\ngit clone https://github.com/tfgrid-studio/tfgrid-ai-agent\n</code></pre>"},{"location":"getting-started/quickstart/#step-2-configure-threefold-1-minute","title":"Step 2: Configure ThreeFold (1 minute)","text":"<pre><code># Store mnemonic\nmkdir -p ~/.config/threefold\necho \"your twelve word mnemonic here\" &gt; ~/.config/threefold/mnemonic\nchmod 600 ~/.config/threefold/mnemonic\n\n# Set environment variable\nexport TF_VAR_mnemonic=$(cat ~/.config/threefold/mnemonic)\n# Or for Fish: set -x TF_VAR_mnemonic (cat ~/.config/threefold/mnemonic)\n</code></pre>"},{"location":"getting-started/quickstart/#step-3-create-context-file-30-seconds","title":"Step 3: Create Context File (30 seconds)","text":"<p>Context files make deployment commands simpler:</p> <pre><code>cd ~/code/github.com/tfgrid-studio/tfgrid-compose\necho \"app: ../tfgrid-ai-agent\" &gt; .tfgrid-compose.yaml\n</code></pre> <p>Now you can run <code>tfgrid-compose up</code> without specifying the app path every time!</p>"},{"location":"getting-started/quickstart/#step-4-deploy-2-3-minutes","title":"Step 4: Deploy! (2-3 minutes)","text":"<pre><code># Deploy the application\ntfgrid-compose up\n\n# Watch the deployment process:\n# \u2705 Validating prerequisites...\n# \u2705 Reading app manifest...\n# \u2705 Provisioning infrastructure (Terraform)...\n# \u2705 Setting up WireGuard network...\n# \u2705 Configuring platform (Ansible)...\n# \u2705 Deploying application...\n# \u2705 Running health checks...\n# \u2705 Deployment complete!\n</code></pre> <p>That's it! Your app is now running on ThreeFold Grid. \ud83c\udf89</p>"},{"location":"getting-started/quickstart/#step-5-verify-deployment","title":"Step 5: Verify Deployment","text":"<pre><code># Check deployment status\ntfgrid-compose status\n\n# Output:\n# App: tfgrid-ai-agent\n# Status: Running\n# Pattern: single-vm\n# Network: main\n# IP Address: 10.1.3.2 (WireGuard)\n# Deployed: 2025-10-09 13:45:23\n</code></pre>"},{"location":"getting-started/quickstart/#step-6-use-your-application","title":"Step 6: Use Your Application","text":""},{"location":"getting-started/quickstart/#ssh-access","title":"SSH Access","text":"<pre><code># Connect to the VM\ntfgrid-compose ssh\n\n# You're now on the deployed VM!\n# root@vm:~#\n</code></pre>"},{"location":"getting-started/quickstart/#ai-agent-example","title":"AI Agent Example","text":"<p>If you deployed tfgrid-ai-agent:</p> <pre><code># Login to Qwen AI\ntfgrid-compose agent login\n\n# Create a project\ntfgrid-compose agent create\n# Enter project name: my-website\n# Enter duration: 30\n# Enter prompt: Create a beautiful portfolio website with React and Tailwind CSS\n\n# Monitor the AI agent working\ntfgrid-compose agent monitor my-website\n\n# List all projects\ntfgrid-compose agent list\n\n# Stop the agent when done\ntfgrid-compose agent stop my-website\n</code></pre>"},{"location":"getting-started/quickstart/#view-logs","title":"View Logs","text":"<pre><code># View application logs\ntfgrid-compose logs\n</code></pre>"},{"location":"getting-started/quickstart/#step-7-clean-up","title":"Step 7: Clean Up","text":"<p>When you're done:</p> <pre><code># Destroy the deployment\ntfgrid-compose down\n\n# Confirm: yes\n\n# All resources are now deleted:\n# \u2705 VM destroyed\n# \u2705 Network cleaned up\n# \u2705 State removed\n</code></pre>"},{"location":"getting-started/quickstart/#complete-example-workflow","title":"Complete Example Workflow","text":"<p>Here's the entire workflow in one go:</p> <pre><code># Setup (one-time)\nmkdir -p ~/code/github.com/tfgrid-studio\ncd ~/code/github.com/tfgrid-studio\ngit clone https://github.com/tfgrid-studio/tfgrid-compose\ngit clone https://github.com/tfgrid-studio/tfgrid-ai-agent\ncd tfgrid-compose\nmake install\n\n# Configure\nmkdir -p ~/.config/threefold\necho \"your mnemonic\" &gt; ~/.config/threefold/mnemonic\nchmod 600 ~/.config/threefold/mnemonic\nexport TF_VAR_mnemonic=$(cat ~/.config/threefold/mnemonic)\n\n# Create context\necho \"app: ../tfgrid-ai-agent\" &gt; .tfgrid-compose.yaml\n\n# Deploy\ntfgrid-compose up\n\n# Use\ntfgrid-compose agent create\ntfgrid-compose agent list\ntfgrid-compose ssh\n\n# Clean up\ntfgrid-compose down\n</code></pre>"},{"location":"getting-started/quickstart/#available-commands","title":"Available Commands","text":""},{"location":"getting-started/quickstart/#deployment","title":"Deployment","text":"<pre><code>tfgrid-compose up [app]       # Deploy application\ntfgrid-compose down [app]     # Destroy deployment\ntfgrid-compose status [app]   # Show status\n</code></pre>"},{"location":"getting-started/quickstart/#access","title":"Access","text":"<pre><code>tfgrid-compose ssh [app]      # SSH to VM\ntfgrid-compose logs [app]     # View logs\ntfgrid-compose exec [app] &lt;cmd&gt;  # Execute command\n</code></pre>"},{"location":"getting-started/quickstart/#ai-agent-when-using-tfgrid-ai-agent","title":"AI Agent (when using tfgrid-ai-agent)","text":"<pre><code>tfgrid-compose agent list          # List projects\ntfgrid-compose agent create        # Create project (interactive)\ntfgrid-compose agent run &lt;project&gt; # Start AI agent\ntfgrid-compose agent monitor &lt;project&gt;  # Monitor progress\ntfgrid-compose agent stop &lt;project&gt;     # Stop agent\n</code></pre>"},{"location":"getting-started/quickstart/#patterns","title":"Patterns","text":"<pre><code>tfgrid-compose patterns       # List available patterns\n</code></pre>"},{"location":"getting-started/quickstart/#without-context-file","title":"Without Context File","text":"<p>If you don't use a context file, specify the app path:</p> <pre><code># Deploy\ntfgrid-compose up ../tfgrid-ai-agent\n\n# Status\ntfgrid-compose status ../tfgrid-ai-agent\n\n# SSH\ntfgrid-compose ssh ../tfgrid-ai-agent\n\n# Destroy\ntfgrid-compose down ../tfgrid-ai-agent\n</code></pre>"},{"location":"getting-started/quickstart/#multiple-applications","title":"Multiple Applications","text":"<p>You can deploy multiple apps:</p> <pre><code># Deploy app 1\ntfgrid-compose up ../tfgrid-ai-agent\n\n# Deploy app 2\ntfgrid-compose up ../my-other-app\n\n# Each app gets its own:\n# - VM\n# - Network\n# - State\n# - Resources\n</code></pre>"},{"location":"getting-started/quickstart/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quickstart/#deployment-fails","title":"Deployment Fails","text":"<pre><code># Check prerequisites\ntfgrid-compose --help\ntofu version\nansible --version\nwg --version\n\n# Check mnemonic\necho $TF_VAR_mnemonic\n\n# Try again\ntfgrid-compose down\ntfgrid-compose up\n</code></pre>"},{"location":"getting-started/quickstart/#cant-connect-to-vm","title":"Can't Connect to VM","text":"<pre><code># Check WireGuard\nsudo wg show\n\n# Reconnect\ncd ~/code/github.com/tfgrid-studio/tfgrid-compose\nmake wg APP=../tfgrid-ai-agent\n\n# Test SSH\ntfgrid-compose ssh\n</code></pre>"},{"location":"getting-started/quickstart/#command-not-found","title":"Command Not Found","text":"<pre><code># Re-install CLI\ncd ~/code/github.com/tfgrid-studio/tfgrid-compose\nmake install\n\n# Or add to PATH manually\nexport PATH=\"$PATH:$(pwd)/cli\"\n</code></pre>"},{"location":"getting-started/quickstart/#app-not-found","title":"App Not Found","text":"<pre><code># Check context file\ncat .tfgrid-compose.yaml\n\n# Should show:\n# app: ../tfgrid-ai-agent\n\n# Or specify full path\ntfgrid-compose up ../tfgrid-ai-agent\n</code></pre> <p>See Troubleshooting Guide for more solutions.</p>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you've deployed your first app:</p>"},{"location":"getting-started/quickstart/#learn-more","title":"Learn More","text":"<ul> <li>Core Concepts - Understand patterns, apps, and manifests</li> <li>Pattern Documentation - Learn about deployment patterns</li> <li>CLI Reference - Complete command reference</li> </ul>"},{"location":"getting-started/quickstart/#deploy-more-apps","title":"Deploy More Apps","text":"<ul> <li>Single-VM Pattern - Deploy databases, services</li> <li>AI Agent Guide - Complete AI agent workflows</li> <li>Create Your Own App - Build deployable apps</li> </ul>"},{"location":"getting-started/quickstart/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Advanced Deployment - Production strategies</li> <li>Networking Guide - WireGuard and Mycelium</li> <li>Security Best Practices - Secure your deployments</li> </ul>"},{"location":"getting-started/quickstart/#quick-reference-card","title":"Quick Reference Card","text":"<pre><code># Setup (one-time)\nmake install\nexport TF_VAR_mnemonic=$(cat ~/.config/threefold/mnemonic)\necho \"app: ../my-app\" &gt; .tfgrid-compose.yaml\n\n# Daily workflow\ntfgrid-compose up        # Deploy\ntfgrid-compose status    # Check status\ntfgrid-compose ssh       # Connect\ntfgrid-compose logs      # View logs\ntfgrid-compose down      # Destroy\n</code></pre> <p>Congratulations! You've successfully deployed on ThreeFold Grid. \ud83d\ude80</p> <p>Need help? Join our community or open an issue.</p>"},{"location":"guides/ai-agent/","title":"AI Agent Integration Guide","text":"<p>Complete guide for deploying and using the AI coding agent on ThreeFold Grid.</p>"},{"location":"guides/ai-agent/#overview","title":"Overview","text":"<p>The AI Agent is an AI-powered coding assistant that runs on ThreeFold Grid. It can:</p> <ul> <li>\ud83e\udd16 Write and edit code autonomously</li> <li>\ud83d\udd04 Run iterative improvement loops</li> <li>\ud83e\uddea Test and debug automatically</li> <li>\ud83d\udcdd Generate documentation</li> <li>\ud83d\udd27 Refactor and optimize code</li> </ul> <p>Deployment time: 2-3 minutes Cost: Pay-as-you-go on ThreeFold Grid Access: From your local machine via <code>tfgrid-compose exec</code></p>"},{"location":"guides/ai-agent/#quick-start","title":"Quick Start","text":"<p>Two ways to use: Make wrapper (easier) or direct CLI (more control)</p>"},{"location":"guides/ai-agent/#1-deploy-the-ai-agent","title":"1. Deploy the AI Agent","text":"<p>Option A: Using Make (Recommended for beginners) <pre><code># Set your app path (do once)\nexport APP=../tfgrid-ai-agent\n\n# Deploy to ThreeFold Grid\nmake up\n</code></pre></p> <p>Option B: Using tfgrid-compose CLI directly <pre><code># Deploy to ThreeFold Grid\ntfgrid-compose up ../tfgrid-ai-agent\n</code></pre></p> <p>What happens: 1. \u2705 Creates Ubuntu 24.04 VM (4 CPU, 8GB RAM, 100GB disk) 2. \u2705 Configures WireGuard networking 3. \u2705 Installs Node.js, Qwen CLI, and dependencies 4. \u2705 Sets up git credentials 5. \u2705 Configures workspace directories 6. \u2705 Runs health checks</p> <p>Output: <pre><code>\u2705 \ud83c\udf89 Deployment complete!\n\u2139 App: tfgrid-ai-agent v2.0.0\n\u2139 Pattern: single-vm v1.0.0\n\u2139 Next steps:\n  \u2022 Check status: tfgrid-compose status tfgrid-ai-agent\n  \u2022 View logs: tfgrid-compose logs tfgrid-ai-agent\n  \u2022 Connect: tfgrid-compose ssh tfgrid-ai-agent\n</code></pre></p>"},{"location":"guides/ai-agent/#2-login-to-qwen-ai","title":"2. Login to Qwen AI","text":"<p>Make wrapper: <pre><code>make login\n</code></pre></p> <p>Direct CLI: <pre><code># Get VM IP\nVM_IP=$(cat .tfgrid-compose/state.yaml | grep '^vm_ip:' | awk '{print $2}')\n\n# SSH with TTY for OAuth\nssh -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@$VM_IP qwen\n</code></pre></p> <p>Follow the OAuth prompts, copy the URL to your browser, authenticate, and press Enter.</p>"},{"location":"guides/ai-agent/#3-create-your-first-project","title":"3. Create Your First Project","text":"<p>Make wrapper: <pre><code>make create\n# Interactive - follow prompts for:\n# - Project name\n# - Duration\n# - Prompt type\n</code></pre></p> <p>Direct CLI: <pre><code># Get VM IP\nVM_IP=$(cat .tfgrid-compose/state.yaml | grep '^vm_ip:' | awk '{print $2}')\n\n# Create interactively\nssh -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@$VM_IP \\\n  \"cd /opt/ai-agent &amp;&amp; /opt/ai-agent/scripts/create-project.sh\"\n</code></pre></p>"},{"location":"guides/ai-agent/#4-run-the-ai-agent-loop","title":"4. Run the AI Agent Loop","text":"<p>Make wrapper: <pre><code># Run specific project\nmake run project=my-webapp\n\n# Or interactive selection\nmake run\n</code></pre></p> <p>Direct CLI: <pre><code># Run specific project\ntfgrid-compose exec ../tfgrid-ai-agent \"/opt/ai-agent/scripts/run-project.sh my-webapp\"\n\n# Or interactive selection\nVM_IP=$(cat .tfgrid-compose/state.yaml | grep '^vm_ip:' | awk '{print $2}')\nssh -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@$VM_IP \\\n  \"cd /opt/ai-agent &amp;&amp; bash scripts/interactive-wrapper.sh run\"\n</code></pre></p>"},{"location":"guides/ai-agent/#5-check-status-monitor","title":"5. Check Status &amp; Monitor","text":"<p>Make wrapper: <pre><code># List all projects\nmake list\n\n# Monitor specific project\nmake monitor project=my-webapp\n\n# Stop project\nmake stop project=my-webapp\n</code></pre></p> <p>Direct CLI: <pre><code># List all projects\ntfgrid-compose exec ../tfgrid-ai-agent /opt/ai-agent/scripts/status-projects.sh\n\n# Monitor specific project\ntfgrid-compose exec ../tfgrid-ai-agent \"/opt/ai-agent/scripts/monitor-project.sh my-webapp\"\n\n# Stop project\ntfgrid-compose exec ../tfgrid-ai-agent \"/opt/ai-agent/scripts/stop-project.sh my-webapp\"\n\n# SSH to see files\ntfgrid-compose ssh ../tfgrid-ai-agent\ncd /opt/ai-agent/projects/my-webapp\nls -la\n</code></pre></p>"},{"location":"guides/ai-agent/#complete-command-reference","title":"Complete Command Reference","text":""},{"location":"guides/ai-agent/#two-ways-to-run-commands","title":"Two Ways to Run Commands","text":"<p>Every command can be run two ways:</p> <ol> <li>Make wrapper (shorter, needs <code>export APP=../tfgrid-ai-agent</code>)</li> <li>Direct CLI (full control, no exports needed)</li> </ol>"},{"location":"guides/ai-agent/#deployment-commands","title":"Deployment Commands","text":"Action Make Wrapper Direct CLI Deploy <code>make up</code> <code>tfgrid-compose up ../tfgrid-ai-agent</code> Status <code>make status</code> <code>tfgrid-compose status ../tfgrid-ai-agent</code> SSH <code>make ssh</code> <code>tfgrid-compose ssh ../tfgrid-ai-agent</code> Logs <code>make logs</code> <code>tfgrid-compose logs ../tfgrid-ai-agent</code> Destroy <code>make down</code> <code>tfgrid-compose down ../tfgrid-ai-agent</code>"},{"location":"guides/ai-agent/#ai-agent-commands","title":"AI Agent Commands","text":"Action Make Wrapper Direct CLI Login (one-time) <code>make login</code> See login script below Create project <code>make create</code> See interactive method below List projects <code>make list</code> <code>tfgrid-compose exec ../tfgrid-ai-agent /opt/ai-agent/scripts/status-projects.sh</code> Run project <code>make run project=my-app</code> <code>tfgrid-compose exec ../tfgrid-ai-agent \"/opt/ai-agent/scripts/run-project.sh my-app\"</code> Monitor <code>make monitor project=my-app</code> <code>tfgrid-compose exec ../tfgrid-ai-agent \"/opt/ai-agent/scripts/monitor-project.sh my-app\"</code> Stop <code>make stop project=my-app</code> <code>tfgrid-compose exec ../tfgrid-ai-agent \"/opt/ai-agent/scripts/stop-project.sh my-app\"</code> Remove <code>make remove project=my-app</code> <code>tfgrid-compose exec ../tfgrid-ai-agent \"/opt/ai-agent/scripts/remove-project.sh my-app\"</code>"},{"location":"guides/ai-agent/#interactive-commands-need-ssh-t","title":"Interactive Commands (Need SSH -t)","text":"<p>Some commands require interactive terminal (<code>ssh -t</code>):</p> <p>Login to Qwen (direct CLI) <pre><code># Get VM IP\nVM_IP=$(cat .tfgrid-compose/state.yaml | grep '^vm_ip:' | awk '{print $2}')\n\n# SSH with TTY and run qwen\nssh -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@$VM_IP qwen\n</code></pre></p> <p>Create project interactively (direct CLI) <pre><code># Get VM IP\nVM_IP=$(cat .tfgrid-compose/state.yaml | grep '^vm_ip:' | awk '{print $2}')\n\n# SSH and create\nssh -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@$VM_IP \\\n  \"cd /opt/ai-agent &amp;&amp; /opt/ai-agent/scripts/create-project.sh\"\n</code></pre></p> <p>Run project interactively (direct CLI) <pre><code># Get VM IP  \nVM_IP=$(cat .tfgrid-compose/state.yaml | grep '^vm_ip:' | awk '{print $2}')\n\n# SSH and run with selection\nssh -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@$VM_IP \\\n  \"cd /opt/ai-agent &amp;&amp; bash scripts/interactive-wrapper.sh run\"\n</code></pre></p>"},{"location":"guides/ai-agent/#quick-cli-scripts","title":"Quick CLI Scripts","text":"<p>Create reusable script for direct CLI usage:</p> <pre><code># Save as: ~/bin/tfgrid-agent\n#!/bin/bash\nAPP=\"../tfgrid-ai-agent\"\nVM_IP=$(cat .tfgrid-compose/state.yaml 2&gt;/dev/null | grep '^vm_ip:' | awk '{print $2}')\n\ncase \"$1\" in\n  list)\n    tfgrid-compose exec $APP /opt/ai-agent/scripts/status-projects.sh\n    ;;\n  run)\n    tfgrid-compose exec $APP \"/opt/ai-agent/scripts/run-project.sh $2\"\n    ;;\n  stop)\n    tfgrid-compose exec $APP \"/opt/ai-agent/scripts/stop-project.sh $2\"\n    ;;\n  ssh)\n    ssh -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@$VM_IP\n    ;;\n  *)\n    echo \"Usage: tfgrid-agent {list|run|stop|ssh} [project-name]\"\n    ;;\nesac\n</code></pre> <p>Then use it: <pre><code>chmod +x ~/bin/tfgrid-agent\ntfgrid-agent list\ntfgrid-agent run my-app\ntfgrid-agent stop my-app\ntfgrid-agent ssh\n</code></pre></p>"},{"location":"guides/ai-agent/#workflows","title":"Workflows","text":""},{"location":"guides/ai-agent/#workflow-1-simple-web-app-make-wrapper","title":"Workflow 1: Simple Web App (Make Wrapper)","text":"<pre><code>export APP=../tfgrid-ai-agent\n\n# 1. Deploy\nmake up\n\n# 2. Login (one-time)\nmake login\n\n# 3. Create project\nmake create\n# Enter: simple-blog\n# Duration: 1h\n# Prompt: \"Create a simple blog with React and Node.js\"\n\n# 4. Agent starts automatically, or run:\nmake run project=simple-blog\n\n# 5. Monitor (in another terminal)\nmake list\nmake monitor project=simple-blog\n\n# 6. When done, check results\nmake ssh\ncd /opt/ai-agent/projects/simple-blog\nls -la\ncat README.md\n\n# 7. Git push (if configured)\ngit push origin main\n\n# 8. Stop and cleanup\nmake stop project=simple-blog\nmake down\n</code></pre>"},{"location":"guides/ai-agent/#workflow-1b-simple-web-app-direct-cli","title":"Workflow 1b: Simple Web App (Direct CLI)","text":"<pre><code># 1. Deploy\ntfgrid-compose up ../tfgrid-ai-agent\n\n# 2. Login (one-time)\nVM_IP=$(cat .tfgrid-compose/state.yaml | grep '^vm_ip:' | awk '{print $2}')\nssh -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@$VM_IP qwen\n\n# 3. Create project\nssh -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@$VM_IP \\\n  \"cd /opt/ai-agent &amp;&amp; /opt/ai-agent/scripts/create-project.sh\"\n# Enter: simple-blog, 1h, custom prompt\n\n# 4. Run agent\ntfgrid-compose exec ../tfgrid-ai-agent \"/opt/ai-agent/scripts/run-project.sh simple-blog\"\n\n# 5. Monitor\ntfgrid-compose exec ../tfgrid-ai-agent /opt/ai-agent/scripts/status-projects.sh\ntfgrid-compose exec ../tfgrid-ai-agent \"/opt/ai-agent/scripts/monitor-project.sh simple-blog\"\n\n# 6. Check results\ntfgrid-compose ssh ../tfgrid-ai-agent\ncd /opt/ai-agent/projects/simple-blog\nls -la\n\n# 7. Stop and cleanup\ntfgrid-compose exec ../tfgrid-ai-agent \"/opt/ai-agent/scripts/stop-project.sh simple-blog\"\ntfgrid-compose down ../tfgrid-ai-agent\n</code></pre>"},{"location":"guides/ai-agent/#workflow-2-code-refactoring","title":"Workflow 2: Code Refactoring","text":"<pre><code>export APP=../tfgrid-ai-agent\n\n# 1. Create project\nmake create\n# Enter: refactor-project\n# Prompt: \"Refactor this code to use TypeScript and improve performance\"\n\n# 2. Upload your existing code\nmake ssh\ncd /opt/ai-agent/projects/refactor-project\n# Copy your files here, commit them\ngit add .\ngit commit -m \"Initial code to refactor\"\nexit\n\n# 3. Run agent\nmake run project=refactor-project\n\n# 4. Monitor and review\nmake list\nmake monitor project=refactor-project\n</code></pre>"},{"location":"guides/ai-agent/#workflow-3-documentation-generation","title":"Workflow 3: Documentation Generation","text":"<pre><code>export APP=../tfgrid-ai-agent\n\n# 1. Create docs project\nmake create\n# Enter: api-docs\n# Prompt: \"Generate comprehensive documentation for this API with examples\"\n\n# 2. Run agent\nmake run project=api-docs\n\n# 3. Check logs\nmake monitor project=api-docs\n\n# 4. View results\nmake ssh\ncd /opt/ai-agent/projects/api-docs\ncat README.md\n</code></pre>"},{"location":"guides/ai-agent/#configuration","title":"Configuration","text":""},{"location":"guides/ai-agent/#environment-variables","title":"Environment Variables","text":"<p>Set these on your local machine before deployment:</p> <pre><code># Required\nexport TF_VAR_mnemonic=$(cat ~/.config/threefold/mnemonic)\n\n# Optional\nexport QWEN_API_KEY='your-api-key'        # Qwen API key\nexport GITHUB_TOKEN='your-token'           # GitHub personal token\nexport GITEA_URL='https://gitea.example'   # Gitea URL\nexport GITEA_TOKEN='your-token'            # Gitea personal token\n</code></pre>"},{"location":"guides/ai-agent/#custom-resources","title":"Custom Resources","text":"<p>Edit <code>tfgrid-ai-agent/tfgrid-compose.yaml</code>:</p> <pre><code>resources:\n  cpu:\n    minimum: 2\n    recommended: 4     # Change this\n  memory:\n    minimum: 4096\n    recommended: 8192  # Change this\n  disk:\n    minimum: 50\n    recommended: 100   # Change this\n</code></pre> <p>Then redeploy: <pre><code>make down &amp;&amp; make up\n</code></pre></p>"},{"location":"guides/ai-agent/#git-integration","title":"Git Integration","text":""},{"location":"guides/ai-agent/#setup-github","title":"Setup GitHub","text":"<pre><code># 1. Show SSH key\nmake exec CMD='ai-agent git-show-key'\n\n# 2. Add to GitHub\n# Copy the key and add it to https://github.com/settings/keys\n\n# 3. Setup project with GitHub\nmake exec CMD='ai-agent git-setup my-project github'\n</code></pre>"},{"location":"guides/ai-agent/#setup-gitea","title":"Setup Gitea","text":"<pre><code># 1. Show SSH key\nmake exec CMD='ai-agent git-show-key'\n\n# 2. Add to your Gitea instance\n# Go to Gitea \u2192 Settings \u2192 SSH Keys\n\n# 3. Setup project with Gitea\nmake exec CMD='ai-agent git-setup my-project gitea'\n</code></pre>"},{"location":"guides/ai-agent/#manual-git-configuration","title":"Manual Git Configuration","text":"<pre><code># SSH into VM\nmake ssh\n\n# Configure git\ncd /opt/ai-agent/projects/my-project\ngit remote add origin git@github.com:user/repo.git\ngit push -u origin main\n</code></pre>"},{"location":"guides/ai-agent/#monitoring-logs","title":"Monitoring &amp; Logs","text":""},{"location":"guides/ai-agent/#real-time-monitoring","title":"Real-time Monitoring","text":"<pre><code># Watch agent progress\nmake exec CMD='ai-agent monitor my-project'\n\n# View live logs\nmake exec CMD='ai-agent logs my-project'\n</code></pre>"},{"location":"guides/ai-agent/#ssh-access","title":"SSH Access","text":"<pre><code># SSH into VM\nmake ssh\n\n# Check running processes\nps aux | grep ai-agent\n\n# View project files\nls -la /opt/ai-agent/projects/\n\n# Check system logs\njournalctl -u ai-agent -f\n</code></pre>"},{"location":"guides/ai-agent/#status-overview","title":"Status Overview","text":"<pre><code># All projects status\nmake exec CMD='ai-agent status'\n\n# Deployment status\nmake status\n\n# VM addresses\nmake address\n</code></pre>"},{"location":"guides/ai-agent/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/ai-agent/#agent-wont-start","title":"Agent Won't Start","text":"<pre><code># Check logs\nmake exec CMD='ai-agent logs &lt;project&gt;'\n\n# Verify Qwen login\nmake exec CMD='qwen whoami'\n\n# Re-login if needed\nmake exec CMD='qwen login'\n</code></pre>"},{"location":"guides/ai-agent/#ssh-connection-issues","title":"SSH Connection Issues","text":"<pre><code># Check WireGuard\nsudo wg show wg-ai-agent\n\n# Restart WireGuard if needed\nmake wg\n\n# Test connectivity\nping -c 3 $(cat .tfgrid-compose/state.yaml | grep vm_ip | awk '{print $2}')\n</code></pre>"},{"location":"guides/ai-agent/#out-of-disk-space","title":"Out of Disk Space","text":"<pre><code># SSH in and check\nmake ssh\ndf -h\n\n# Clean up old projects\nai-agent remove old-project-name\n\n# Or increase disk size (requires redeployment)\n# Edit tfgrid-compose.yaml \u2192 resources.disk\nmake down &amp;&amp; make up\n</code></pre>"},{"location":"guides/ai-agent/#performance-issues","title":"Performance Issues","text":"<pre><code># Check resource usage\nmake ssh\nhtop\n\n# Consider upgrading resources\n# Edit tfgrid-compose.yaml\n# Increase CPU/memory\nmake down &amp;&amp; make up\n</code></pre>"},{"location":"guides/ai-agent/#best-practices","title":"Best Practices","text":""},{"location":"guides/ai-agent/#1-project-organization","title":"1. Project Organization","text":"<pre><code># Use descriptive names\nai-agent create webapp-dashboard  # Good\nai-agent create test1             # Bad\n\n# One project per goal\nai-agent create frontend-app\nai-agent create backend-api\n# Not: ai-agent create fullstack-everything\n</code></pre>"},{"location":"guides/ai-agent/#2-prompts","title":"2. Prompts","text":"<p>Good prompts: - \"Create a REST API with Express.js and PostgreSQL for a todo app\" - \"Refactor this code to use async/await instead of callbacks\" - \"Add comprehensive error handling and logging\"</p> <p>Bad prompts: - \"Make it better\" (too vague) - \"Build everything\" (too broad) - \"Fix bugs\" (which bugs?)</p>"},{"location":"guides/ai-agent/#3-monitoring","title":"3. Monitoring","text":"<pre><code># Always monitor long-running tasks\nmake exec CMD='ai-agent run big-project' &amp;\nmake exec CMD='ai-agent monitor big-project'\n</code></pre>"},{"location":"guides/ai-agent/#4-git-workflow","title":"4. Git Workflow","text":"<pre><code># Setup git first\nmake exec CMD='ai-agent git-setup project github'\n\n# Agent will auto-commit\n# Review before pushing\nmake ssh\ncd /opt/ai-agent/projects/project\ngit log\ngit diff\ngit push\n</code></pre>"},{"location":"guides/ai-agent/#5-resource-management","title":"5. Resource Management","text":"<pre><code># Stop projects when not needed\nmake exec CMD='ai-agent stopall'\n\n# Remove completed projects\nmake exec CMD='ai-agent remove old-project'\n\n# Destroy VM when not in use\nmake down\n</code></pre>"},{"location":"guides/ai-agent/#advanced-usage","title":"Advanced Usage","text":""},{"location":"guides/ai-agent/#multiple-projects","title":"Multiple Projects","text":"<pre><code># Create and run multiple projects\nmake exec CMD='ai-agent create frontend'\nmake exec CMD='ai-agent create backend'\nmake exec CMD='ai-agent create docs'\n\nmake exec CMD='ai-agent run frontend' &amp;\nmake exec CMD='ai-agent run backend' &amp;\nmake exec CMD='ai-agent run docs' &amp;\n\n# Monitor all\nmake exec CMD='ai-agent status'\n</code></pre>"},{"location":"guides/ai-agent/#custom-agent-scripts","title":"Custom Agent Scripts","text":"<pre><code># SSH in\nmake ssh\n\n# Create custom script\ncat &gt; /opt/ai-agent/custom-agent.sh &lt;&lt; 'EOF'\n#!/bin/bash\nai-agent create \"$1\"\nai-agent run \"$1\" &amp;\nai-agent monitor \"$1\"\nEOF\n\nchmod +x /opt/ai-agent/custom-agent.sh\n\n# Use it\n/opt/ai-agent/custom-agent.sh my-new-project\n</code></pre>"},{"location":"guides/ai-agent/#scheduled-runs","title":"Scheduled Runs","text":"<pre><code># SSH in and setup cron\nmake ssh\ncrontab -e\n\n# Add scheduled agent runs\n0 2 * * * ai-agent run nightly-refactor\n0 9 * * * ai-agent run morning-docs\n</code></pre>"},{"location":"guides/ai-agent/#faq","title":"FAQ","text":"<p>Q: Can I run multiple agents simultaneously? A: Yes! Each project runs independently. Use <code>ai-agent status</code> to see all.</p> <p>Q: How much does it cost? A: Depends on ThreeFold Grid pricing. Typically $10-30/month for a 4CPU/8GB VM.</p> <p>Q: Can I access from multiple machines? A: Yes, deploy once and use <code>tfgrid-compose exec</code> from any machine with access.</p> <p>Q: What if my local machine disconnects? A: Agent keeps running on the VM. Reconnect anytime with <code>make exec</code>.</p> <p>Q: Can I use my own AI API keys? A: Yes, set <code>QWEN_API_KEY</code> before deployment or SSH in and configure.</p> <p>Q: How do I backup projects? A: SSH in and copy <code>/opt/ai-agent/projects/</code> or use git push.</p> <p>Q: Can I upgrade the agent version? A: Yes, <code>make down</code> then <code>make up</code> with updated tfgrid-ai-agent repo.</p>"},{"location":"guides/ai-agent/#next-steps","title":"Next Steps","text":"<ul> <li>Try it: Deploy and create your first project</li> <li>Explore: Test different prompts and workflows</li> <li>Share: Push your projects to GitHub/Gitea</li> <li>Scale: Deploy multiple instances for different teams</li> </ul> <p>Need help?  - Check logs: <code>make exec CMD='ai-agent logs &lt;project&gt;'</code> - SSH debug: <code>make ssh</code> - Community: https://forum.threefold.io</p> <p>Ready to code with AI on ThreeFold Grid! \ud83d\ude80</p>"},{"location":"patterns/gateway/","title":"Gateway Pattern","text":"<p>Multi-VM with public access and SSL for production web apps</p> <p>The gateway pattern deploys a multi-VM architecture with a reverse proxy gateway that provides public IPv4 access, automatic SSL/TLS certificates, and load balancing for your backend services.</p>"},{"location":"patterns/gateway/#overview","title":"Overview","text":"<pre><code>Internet \u2192 [Gateway VM] \u2192 [Backend VMs]\n        (Public IPv4)   (Private Network)\n        (SSL/TLS)       (Your App + DB)\n</code></pre> <p>Perfect For: - Production websites &amp; web apps - E-commerce sites - SaaS applications - Anything needing public HTTPS access</p>"},{"location":"patterns/gateway/#quick-start","title":"Quick Start","text":"<pre><code>tfgrid-compose up my-saas --pattern=gateway --domain=myapp.com\n</code></pre> <p>Deploy time: 5-7 minutes Cost: $30-100/month</p>"},{"location":"patterns/gateway/#features","title":"Features","text":"<ul> <li>\ud83d\udd12 Free SSL certificates - Automatic Let's Encrypt SSL/TLS</li> <li>\ud83c\udf10 Public IPv4 included - Direct internet access</li> <li>\u2696\ufe0f Load balancing - Distribute traffic across backends</li> <li>\u2764\ufe0f Health checks - Automatic failover for reliability</li> <li>\ud83d\udd04 Reverse proxy - Nginx-based gateway with custom configs</li> <li>\ud83d\udee1\ufe0f Private backend network - Backends only accessible via gateway</li> </ul>"},{"location":"patterns/gateway/#example-deployment","title":"Example Deployment","text":"<p>Deploy a SaaS application with SSL:</p> <pre><code>$ tfgrid-compose up my-saas --pattern=gateway --domain=myapp.com\n\n\u2728 Live with SSL in 5 minutes!\n</code></pre> <p>The gateway pattern will: 1. Create a gateway VM with public IPv4 2. Deploy your backend application VMs 3. Configure reverse proxy and SSL 4. Set up health checks and load balancing</p>"},{"location":"patterns/gateway/#architecture","title":"Architecture","text":""},{"location":"patterns/gateway/#gateway-vm","title":"Gateway VM","text":"<ul> <li>Public IPv4 address</li> <li>Nginx reverse proxy</li> <li>Let's Encrypt SSL automation</li> <li>Load balancer</li> <li>Health check monitoring</li> </ul>"},{"location":"patterns/gateway/#backend-vms","title":"Backend VMs","text":"<ul> <li>Private network only</li> <li>Your application code</li> <li>Database services</li> <li>Internal APIs</li> </ul>"},{"location":"patterns/gateway/#network-flow","title":"Network Flow","text":"<pre><code>User \u2192 Public IP \u2192 Gateway VM \u2192 WireGuard/Mycelium \u2192 Backend VMs\n</code></pre>"},{"location":"patterns/gateway/#configuration","title":"Configuration","text":"<p>Example <code>tfgrid-compose.yaml</code> for gateway pattern:</p> <pre><code>name: my-webapp\npattern: gateway\n\ngateway:\n  domain: myapp.com\n  ssl: true\n\nbackends:\n  - name: app\n    cpu: 2\n    memory: 4096\n    port: 3000\n\n  - name: db\n    cpu: 2\n    memory: 8192\n    private: true\n</code></pre>"},{"location":"patterns/gateway/#use-cases","title":"Use Cases","text":""},{"location":"patterns/gateway/#production-web-apps","title":"Production Web Apps","text":"<p>Deploy full-stack web applications with SSL:</p> <pre><code>tfgrid-compose up my-webapp --pattern=gateway --domain=example.com\n</code></pre>"},{"location":"patterns/gateway/#e-commerce-sites","title":"E-commerce Sites","text":"<p>Run online stores with secure payments:</p> <pre><code>tfgrid-compose up my-store --pattern=gateway --domain=store.com\n</code></pre>"},{"location":"patterns/gateway/#saas-applications","title":"SaaS Applications","text":"<p>Launch multi-tenant SaaS products:</p> <pre><code>tfgrid-compose up my-saas --pattern=gateway --domain=app.mycompany.com\n</code></pre>"},{"location":"patterns/gateway/#ssltls-configuration","title":"SSL/TLS Configuration","text":"<p>The gateway pattern automatically handles SSL certificate:</p> <ol> <li>Automatic issuance - Let's Encrypt certificates on deployment</li> <li>Auto-renewal - Certificates renew automatically</li> <li>HTTPS redirect - HTTP traffic automatically redirects to HTTPS</li> <li>Modern security - TLS 1.2+ with strong cipher suites</li> </ol>"},{"location":"patterns/gateway/#load-balancing","title":"Load Balancing","text":"<p>When you deploy multiple backend instances:</p> <pre><code>backends:\n  - name: app-1\n    port: 3000\n  - name: app-2\n    port: 3000\n  - name: app-3\n    port: 3000\n</code></pre> <p>The gateway automatically: - Distributes traffic across all instances - Performs health checks - Routes traffic away from unhealthy instances - Provides zero-downtime deployments</p>"},{"location":"patterns/gateway/#full-documentation","title":"Full Documentation","text":"<p>For complete implementation details, see the gateway pattern source.</p>"},{"location":"patterns/gateway/#next-steps","title":"Next Steps","text":"<ul> <li>Deploy your first gateway app</li> <li>Learn about Single-VM pattern for simpler deployments</li> <li>Explore K3s pattern for cloud-native applications</li> </ul>"},{"location":"patterns/k3s/","title":"K3s Pattern","text":"<p>Full Kubernetes cluster for cloud-native applications</p> <p>The k3s pattern deploys a complete Kubernetes cluster using K3s (lightweight Kubernetes) with management tools, load balancing, and ingress controllers pre-configured.</p>"},{"location":"patterns/k3s/#overview","title":"Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  K3s Kubernetes Cluster      \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  Management Node       \u2502  \u2502\n\u2502  \u2502  (kubectl, helm, k9s)  \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  Control + Workers     \u2502  \u2502\n\u2502  \u2502  (MetalLB + Ingress)   \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Perfect For: - Cloud-native applications - Microservices architectures - Enterprise deployments - Production SaaS at scale</p>"},{"location":"patterns/k3s/#quick-start","title":"Quick Start","text":"<pre><code>tfgrid-compose up my-cluster --pattern=k3s\n</code></pre> <p>Deploy time: 10-15 minutes Cost: $100-500/month</p>"},{"location":"patterns/k3s/#features","title":"Features","text":"<ul> <li>\u2638\ufe0f Full Kubernetes cluster - Production-ready K3s deployment</li> <li>\u2696\ufe0f MetalLB load balancer - Built-in load balancing for services</li> <li>\ud83c\udf10 Nginx Ingress - HTTP/HTTPS routing to your applications</li> <li>\ud83d\udcc8 Auto-scaling - Horizontal pod autoscaling ready</li> <li>\ud83d\udee1\ufe0f HA control plane - High availability for production</li> <li>\ud83d\udd27 Management tools - kubectl, helm, k9s pre-installed</li> <li>\ud83d\udce6 Persistent storage - StatefulSets and persistent volumes supported</li> </ul>"},{"location":"patterns/k3s/#example-deployment","title":"Example Deployment","text":"<p>Deploy a Kubernetes cluster:</p> <pre><code>$ tfgrid-compose up my-cluster --pattern=k3s\n\n\u2728 Kubernetes ready in 10 minutes!\n</code></pre> <p>Access your cluster:</p> <pre><code>$ tfgrid-compose ssh my-cluster\n# Now you have kubectl, helm, and k9s available\nkubectl get nodes\n</code></pre>"},{"location":"patterns/k3s/#architecture","title":"Architecture","text":""},{"location":"patterns/k3s/#management-node","title":"Management Node","text":"<ul> <li>SSH access point</li> <li>kubectl configured and ready</li> <li>helm package manager</li> <li>k9s TUI for cluster management</li> <li>Direct access to cluster API</li> </ul>"},{"location":"patterns/k3s/#control-plane-nodes","title":"Control Plane Node(s)","text":"<ul> <li>K3s server (control plane)</li> <li>etcd datastore</li> <li>API server</li> <li>Scheduler and controller manager</li> </ul>"},{"location":"patterns/k3s/#worker-nodes","title":"Worker Nodes","text":"<ul> <li>K3s agent</li> <li>Container runtime</li> <li>Pod networking</li> <li>Storage provisioning</li> </ul>"},{"location":"patterns/k3s/#network-components","title":"Network Components","text":"<ul> <li>MetalLB - Layer 2/BGP load balancer</li> <li>Nginx Ingress - HTTP/HTTPS routing</li> <li>Calico/Flannel - Pod networking</li> <li>WireGuard - Secure node communication</li> </ul>"},{"location":"patterns/k3s/#configuration","title":"Configuration","text":"<p>Example <code>tfgrid-compose.yaml</code> for k3s pattern:</p> <pre><code>name: my-cluster\npattern: k3s\n\ncluster:\n  control_nodes: 1  # or 3 for HA\n  worker_nodes: 3\n\nnodes:\n  control:\n    cpu: 4\n    memory: 8192\n    storage: 100\n\n  worker:\n    cpu: 4\n    memory: 16384\n    storage: 200\n\nfeatures:\n  metallb: true\n  ingress: true\n  monitoring: true\n</code></pre>"},{"location":"patterns/k3s/#use-cases","title":"Use Cases","text":""},{"location":"patterns/k3s/#microservices-architecture","title":"Microservices Architecture","text":"<p>Deploy and orchestrate microservices:</p> <pre><code>tfgrid-compose up my-services --pattern=k3s\n# Then deploy your microservices via kubectl/helm\n</code></pre>"},{"location":"patterns/k3s/#cloud-native-saas","title":"Cloud-Native SaaS","text":"<p>Run production SaaS at scale:</p> <pre><code>tfgrid-compose up prod-saas --pattern=k3s\n</code></pre>"},{"location":"patterns/k3s/#multi-tenant-applications","title":"Multi-Tenant Applications","text":"<p>Deploy applications with tenant isolation:</p> <pre><code>tfgrid-compose up multi-tenant --pattern=k3s\n</code></pre>"},{"location":"patterns/k3s/#cicd-platforms","title":"CI/CD Platforms","text":"<p>Run Jenkins, GitLab, or other CI/CD tools:</p> <pre><code>tfgrid-compose up cicd-cluster --pattern=k3s\n</code></pre>"},{"location":"patterns/k3s/#kubernetes-features","title":"Kubernetes Features","text":""},{"location":"patterns/k3s/#deployments","title":"Deployments","text":"<p>Standard Kubernetes deployments work out of the box:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-app\nspec:\n  replicas: 3\n  template:\n    spec:\n      containers:\n      - name: app\n        image: myapp:latest\n</code></pre>"},{"location":"patterns/k3s/#services-ingress","title":"Services &amp; Ingress","text":"<p>Expose applications with LoadBalancer or Ingress:</p> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: my-app\nspec:\n  type: LoadBalancer  # MetalLB provides the IP\n  ports:\n  - port: 80\n    targetPort: 8080\n</code></pre>"},{"location":"patterns/k3s/#persistent-storage","title":"Persistent Storage","text":"<p>Use persistent volumes for stateful applications:</p> <pre><code>apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: data\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n</code></pre>"},{"location":"patterns/k3s/#management-tools","title":"Management Tools","text":""},{"location":"patterns/k3s/#kubectl","title":"kubectl","text":"<p>Standard Kubernetes CLI - pre-configured and ready:</p> <pre><code>kubectl get pods --all-namespaces\nkubectl apply -f deployment.yaml\nkubectl logs my-pod\n</code></pre>"},{"location":"patterns/k3s/#helm","title":"helm","text":"<p>Kubernetes package manager:</p> <pre><code>helm repo add stable https://charts.helm.sh/stable\nhelm install my-app stable/nginx\nhelm list\n</code></pre>"},{"location":"patterns/k3s/#k9s","title":"k9s","text":"<p>Terminal UI for Kubernetes:</p> <pre><code>k9s  # Interactive cluster management\n</code></pre>"},{"location":"patterns/k3s/#high-availability","title":"High Availability","text":"<p>For production deployments, use 3 control plane nodes:</p> <pre><code>cluster:\n  control_nodes: 3  # HA configuration\n  worker_nodes: 5\n</code></pre> <p>This provides: - Control plane redundancy - No single point of failure - Automatic failover - If one control node fails, others continue - Load distribution - API requests distributed across nodes</p>"},{"location":"patterns/k3s/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<p>The k3s pattern can be configured with monitoring:</p> <pre><code>features:\n  monitoring: true  # Deploys Prometheus + Grafana\n  logging: true     # Centralized logging\n</code></pre>"},{"location":"patterns/k3s/#scaling","title":"Scaling","text":""},{"location":"patterns/k3s/#manual-scaling","title":"Manual Scaling","text":"<p>Scale deployments manually:</p> <pre><code>kubectl scale deployment my-app --replicas=10\n</code></pre>"},{"location":"patterns/k3s/#horizontal-pod-autoscaling","title":"Horizontal Pod Autoscaling","text":"<p>Configure automatic scaling based on metrics:</p> <pre><code>apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: my-app\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: my-app\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n</code></pre>"},{"location":"patterns/k3s/#full-documentation","title":"Full Documentation","text":"<p>For complete implementation details, see the k3s pattern source.</p>"},{"location":"patterns/k3s/#next-steps","title":"Next Steps","text":"<ul> <li>Deploy your first Kubernetes cluster</li> <li>Learn about Gateway pattern for simpler web apps</li> <li>Explore Single-VM pattern for development environments</li> </ul>"},{"location":"patterns/overview/","title":"Deployment Patterns Overview","text":"<p>TFGrid Compose provides three deployment patterns that cover every use case from development to enterprise production.</p>"},{"location":"patterns/overview/#pattern-philosophy","title":"Pattern Philosophy","text":"<p>Each pattern is: - \u2705 Production-ready - Tested and verified - \u2705 Purpose-built - Optimized for specific use cases - \u2705 Cost-effective - Pay only for what you need - \u2705 Battle-tested - Based on proven implementations</p>"},{"location":"patterns/overview/#the-three-patterns","title":"The Three Patterns","text":""},{"location":"patterns/overview/#single-vm-pattern","title":"\ud83d\udd39 Single-VM Pattern","text":"<p>Simple VM deployment for development and internal services</p> <pre><code>tfgrid-compose up my-app --pattern=single-vm\n</code></pre> <p>Best for: - AI agents &amp; coding environments - Databases and data stores - Internal APIs and services - Development environments</p> <p>Deployment time: 2-3 minutes Cost: $10-30/month</p> <p>Learn more \u2192</p>"},{"location":"patterns/overview/#gateway-pattern","title":"\ud83c\udf10 Gateway Pattern","text":"<p>Multi-VM with public access and SSL for production web apps</p> <pre><code>tfgrid-compose up my-webapp --pattern=gateway --domain=myapp.com\n</code></pre> <p>Best for: - Production websites - E-commerce sites - SaaS applications - Public web services</p> <p>Deployment time: 5-7 minutes Cost: $30-100/month</p> <p>Learn more \u2192</p>"},{"location":"patterns/overview/#k3s-pattern","title":"\ud83d\ude80 K3s Pattern","text":"<p>Full Kubernetes cluster for cloud-native applications</p> <pre><code>tfgrid-compose up my-cluster --pattern=k3s\n</code></pre> <p>Best for: - Cloud-native applications - Microservices architectures - Enterprise deployments - Production SaaS at scale</p> <p>Deployment time: 10-15 minutes Cost: $100-500/month</p> <p>Learn more \u2192</p>"},{"location":"patterns/overview/#choosing-a-pattern","title":"Choosing a Pattern","text":""},{"location":"patterns/overview/#start-simple-scale-up","title":"Start Simple \u2192 Scale Up","text":"<p>Development &amp; Testing: Start with <code>single-vm</code> for fast, isolated development environments.</p> <p>MVP &amp; Early Production: Move to <code>gateway</code> when you need public access and SSL.</p> <p>Scale &amp; Enterprise: Upgrade to <code>k3s</code> for cloud-native features and horizontal scaling.</p>"},{"location":"patterns/overview/#pattern-comparison","title":"Pattern Comparison","text":"Feature Single-VM Gateway K3s Public IP \u274c \u2705 \u2705 SSL/TLS \u274c \u2705 Auto \u2705 Via Ingress Load Balancing \u274c \u2705 \u2705 MetalLB Scaling Manual Manual Auto Complexity Low Medium High Deploy Time 2-3 min 5-7 min 10-15 min Min Cost $10/mo $30/mo $100/mo"},{"location":"patterns/overview/#pattern-architecture","title":"Pattern Architecture","text":""},{"location":"patterns/overview/#single-vm-architecture","title":"Single-VM Architecture","text":"<pre><code>Your Laptop \u2192 WireGuard VPN \u2192 Single VM\n                              (App + Data)\n</code></pre>"},{"location":"patterns/overview/#gateway-architecture","title":"Gateway Architecture","text":"<pre><code>Internet \u2192 Gateway VM \u2192 Private Network \u2192 Backend VMs\n         (Public IP)   (Reverse Proxy)   (App + DB)\n         (SSL/TLS)\n</code></pre>"},{"location":"patterns/overview/#k3s-architecture","title":"K3s Architecture","text":"<pre><code>Your Laptop \u2192 Management Node \u2192 K3s Cluster\n              (kubectl/helm)    \u251c\u2500 Control Plane\n                                \u251c\u2500 Worker Nodes\n                                \u2514\u2500 Services (MetalLB, Ingress)\n</code></pre>"},{"location":"patterns/overview/#migration-path","title":"Migration Path","text":"<p>Patterns are designed for easy migration:</p> <p>Single-VM \u2192 Gateway - Add public domain configuration - Enable SSL - Deploy gateway VM - Update DNS</p> <p>Gateway \u2192 K3s - Define Kubernetes manifests - Deploy K3s cluster - Migrate services to pods - Update ingress rules</p>"},{"location":"patterns/overview/#next-steps","title":"Next Steps","text":"<ul> <li>New to TFGrid Compose? \u2192 Start with Quick Start Guide</li> <li>Ready to deploy? \u2192 Choose your pattern above</li> <li>Need help deciding? \u2192 See Use Cases</li> </ul>"},{"location":"patterns/overview/#pattern-sources","title":"Pattern Sources","text":"<p>All patterns are built on proven, working implementations:</p> <ul> <li>Single-VM: Standard VM deployment with WireGuard</li> <li>Gateway: Based on mik-tf/tfgrid-gateway</li> <li>K3s: Based on ucli-tools/tfgrid-k3s</li> </ul> <p>See Architecture: Source Repositories for acknowledgments.</p>"},{"location":"patterns/single-vm/","title":"Single-VM Pattern","text":"<p>Simple VM deployment for development and internal services</p> <p>The single-vm pattern is the simplest deployment pattern in TFGrid Compose. It creates a single virtual machine with private networking accessible via WireGuard VPN.</p>"},{"location":"patterns/single-vm/#overview","title":"Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Your Application      \u2502\n\u2502    Private Networking    \u2502\n\u2502    \ud83d\udd12 WireGuard Access   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Perfect For:</p> <ul> <li>AI agents &amp; coding environments</li> <li>Databases (PostgreSQL, MongoDB, Redis)</li> <li>Internal services &amp; APIs</li> <li>Development environments</li> </ul>"},{"location":"patterns/single-vm/#quick-start","title":"Quick Start","text":"<pre><code>tfgrid-compose up tfgrid-ai-agent --pattern=single-vm\n</code></pre> <p>Deploy time: 2-3 minutes Cost: $10-30/month</p>"},{"location":"patterns/single-vm/#features","title":"Features","text":"<ul> <li>\u2705 Isolated VM environment - Complete isolation from your local machine</li> <li>\u2705 Private networking - Secure WireGuard VPN access</li> <li>\u2705 Fast deployment - Up and running in 2-3 minutes</li> <li>\u2705 Cost-effective - Starting at $10/month</li> <li>\u2705 No public IP needed - Perfect for internal services</li> </ul>"},{"location":"patterns/single-vm/#example-tfgrid-ai-agent","title":"Example: TFGrid AI Agent","text":"<p>Deploy an isolated AI coding environment:</p> <pre><code>$ tfgrid-compose up tfgrid-ai-agent --pattern=single-vm\n\n\u2728 Deployed! AI agent ready in 2 minutes.\n</code></pre> <p>Access your AI agent:</p> <pre><code>$ tfgrid-compose ssh tfgrid-ai-agent\n</code></pre>"},{"location":"patterns/single-vm/#configuration","title":"Configuration","text":"<p>The single-vm pattern uses the following default configuration:</p> <ul> <li>CPU: 2 cores</li> <li>Memory: 4 GB RAM</li> <li>Storage: 50 GB SSD</li> <li>Network: WireGuard VPN + Mycelium overlay</li> </ul> <p>You can customize these in your <code>tfgrid-compose.yaml</code> manifest.</p>"},{"location":"patterns/single-vm/#use-cases","title":"Use Cases","text":""},{"location":"patterns/single-vm/#development-environments","title":"Development Environments","text":"<p>Set up isolated development environments that won't affect your local machine:</p> <pre><code>tfgrid-compose up my-dev-env --pattern=single-vm\n</code></pre>"},{"location":"patterns/single-vm/#databases","title":"Databases","text":"<p>Deploy databases with private network access:</p> <pre><code>tfgrid-compose up my-postgres --pattern=single-vm\n</code></pre>"},{"location":"patterns/single-vm/#internal-apis","title":"Internal APIs","text":"<p>Run internal services accessible only via VPN:</p> <pre><code>tfgrid-compose up my-api --pattern=single-vm\n</code></pre>"},{"location":"patterns/single-vm/#full-documentation","title":"Full Documentation","text":"<p>For complete implementation details, see the single-vm pattern source.</p>"},{"location":"patterns/single-vm/#next-steps","title":"Next Steps","text":"<ul> <li>Deploy your first app</li> <li>Learn about the Gateway pattern for public web apps</li> <li>Explore K3s pattern for Kubernetes deployments</li> </ul>"},{"location":"roadmap/changelog/","title":"Changelog","text":"<p>All notable changes to TFGrid Studio will be documented in this file.</p>"},{"location":"roadmap/changelog/#100-2025-10-09","title":"[1.0.0] - 2025-10-09","text":""},{"location":"roadmap/changelog/#major-rebrand-launch","title":"\ud83c\udf89 Major Rebrand &amp; Launch","text":"<p>Rebranded to TFGrid Studio - Changed organization from <code>tfgrid-compose</code> to <code>tfgrid-studio</code> - Better positioning as complete development platform (not just deployment) - Renamed <code>tfgrid-deployer</code> to <code>tfgrid-compose</code> (more accurate product name)</p> <p>New Websites - \u2705 tfgrid.studio - Marketing landing page   - Modern Astro + TailwindCSS v4   - Hero, features, pricing, CTA sections   - Responsive design   - GitHub Pages hosting (zero cost)</p> <ul> <li>\u2705 docs.tfgrid.studio - Documentation site</li> <li>MkDocs Material theme</li> <li>Complete guides and roadmap</li> <li>Auto-deployment via GitHub Actions</li> <li>Custom domain configured</li> </ul> <p>Updated Documentation - Comprehensive getting started guides - Current status (v1.0.0) - Planned features roadmap - Source repository acknowledgment - Architecture documentation</p>"},{"location":"roadmap/changelog/#added","title":"Added","text":"<p>tfgrid-compose (formerly tfgrid-deployer) - v1.0.0 - Full deployment orchestration (Terraform + Ansible + WireGuard) - Context file support (<code>.tfgrid-compose.yaml</code>) - Agent subcommand for AI operations - Auto-install with PATH setup - Input validation &amp; idempotency protection - Remote command execution (<code>exec</code>) - State management system - Single-VM pattern (production ready)</p> <p>tfgrid-ai-agent - v2.0.0 - AI coding with Qwen integration - Loop technique for iterative development - Project management system - Systemd service management - Critical bug fix: Unified project directory structure</p> <p>tfgrid-www - v1.0.0 - Beautiful marketing landing page - Pricing tiers (Community/Pro/Business/Enterprise) - Feature showcase - GitHub Pages deployment</p> <p>tfgrid-docs - v1.0.0 - Complete documentation structure - Getting started guides - Roadmap documentation - Source acknowledgment</p>"},{"location":"roadmap/changelog/#changed","title":"Changed","text":"<ul> <li>Organization name: <code>tfgrid-compose</code> \u2192 <code>tfgrid-studio</code></li> <li>Main CLI repo: <code>tfgrid-deployer</code> \u2192 <code>tfgrid-compose</code></li> <li>Domains: </li> <li>Main site: <code>tfgrid.studio</code></li> <li>Docs: <code>docs.tfgrid.studio</code></li> </ul>"},{"location":"roadmap/changelog/#fixed","title":"Fixed","text":"<ul> <li>AI agent project directory structure (unified to <code>/opt/ai-agent/projects/</code>)</li> <li>All documentation references updated to new organization</li> <li>Git remotes updated across all repositories</li> </ul>"},{"location":"roadmap/changelog/#090-2025-10-08","title":"[0.9.0] - 2025-10-08","text":""},{"location":"roadmap/changelog/#initial-development","title":"Initial Development","text":"<ul> <li>Initial scaffolding of tfgrid-deployer</li> <li>Basic single-VM pattern</li> <li>Terraform + Ansible automation</li> <li>WireGuard networking</li> <li>Context file support</li> </ul> <p>Format: Based on Keep a Changelog Versioning: Semantic Versioning</p>"},{"location":"roadmap/current/","title":"Current Status - v2.0.0 Complete First Layer","text":"<p>\ud83c\udf89 All 3 Core Deployment Patterns Production-Ready!</p>"},{"location":"roadmap/current/#production-ready-components","title":"\u2705 Production Ready Components","text":""},{"location":"roadmap/current/#brand-web-presence","title":"Brand &amp; Web Presence","text":"<p>Organization: tfgrid-studio (rebranded Oct 9, 2025) Website: tfgrid.studio - \u2705 Live Documentation: docs.tfgrid.studio - \u2705 Live</p>"},{"location":"roadmap/current/#tfgrid-compose-v200","title":"tfgrid-compose (v2.0.0)","text":"<p>Status: \u2705 Complete First Layer - All 3 Patterns Production Ready Grade: 9.5/10 Note: Renamed from tfgrid-deployer (Oct 9, 2025) Achievement: Completed gateway and k3s patterns on Oct 9, 2025</p> <p>Core Features: - \u2705 Full deployment orchestration (Terraform + Ansible + WireGuard) - \u2705 Context file support (<code>.tfgrid-compose.yaml</code>) - \u2705 Agent subcommand for AI operations - \u2705 Auto-install with PATH setup - \u2705 Input validation &amp; idempotency protection - \u2705 Remote command execution (<code>exec</code>) - \u2705 State management system - \u2705 Comprehensive error handling</p> <p>Commands: <pre><code>tfgrid-compose up [app]         # Deploy application\ntfgrid-compose down [app]       # Destroy deployment\ntfgrid-compose status [app]     # Check deployment status\ntfgrid-compose ssh [app]        # SSH access to VM\ntfgrid-compose logs [app]       # View application logs\ntfgrid-compose exec [app] &lt;cmd&gt; # Execute remote commands\ntfgrid-compose agent list       # AI agent management\ntfgrid-compose patterns         # List available patterns\n</code></pre></p> <p>Performance Metrics: - \u26a1 Deployment time: 2-3 minutes - \u26a1 CLI response: &lt;1 second - \u26a1 Success rate: 100% on valid inputs - \u26a1 Uptime: 99.9%</p> <p>Documentation: - \u2705 README.md - Complete overview - \u2705 QUICKSTART.md - 5-minute guide - \u2705 AI_AGENT_GUIDE.md - AI workflows - \u2705 CONTEXT_FILE_USAGE.md - Context usage - \u2705 TODO.md - Future roadmap - \u2705 Makefile help system</p>"},{"location":"roadmap/current/#tfgrid-ai-agent-v200","title":"tfgrid-ai-agent (v2.0.0)","text":"<p>Status: \u2705 Production Ready (with critical fix applied) Source: Based on mik-tf/tfgrid-ai-agent</p> <p>Core Features: - \u2705 AI coding with Qwen integration - \u2705 Loop technique for iterative development - \u2705 Project management system - \u2705 Isolated VM environment - \u2705 Systemd service management - \u2705 Developer user provisioning</p> <p>Critical Bug Fixed (Oct 8, 2025): - \u2705 Projects now properly organized in <code>/opt/ai-agent/projects/</code> - \u2705 Consistent directory structure - \u2705 <code>make list</code> works correctly - \u2705 All scripts use unified workspace base</p> <p>Capabilities: <pre><code># AI Agent Operations\nmake login                      # Login to Qwen AI\nmake create project=my-app      # Create new project\nmake run project=my-app         # Start AI agent loop\nmake monitor project=my-app     # Monitor progress\nmake stop project=my-app        # Stop agent\nmake list                       # List all projects\n</code></pre></p> <p>Requirements: - Minimum: 2 CPU, 4 GB RAM, 50 GB disk - Recommended: 4 CPU, 8 GB RAM, 100 GB disk - Dependencies: Node.js 18+, npm 9+, qwen-cli, Git</p> <p>Documentation: - \u2705 README.md (264 lines) - Complete guide - \u2705 DEVELOPER_USER_SETUP.md - User setup - \u2705 .env.example - Configuration template</p>"},{"location":"roadmap/current/#all-3-deployment-patterns","title":"\ud83c\udfaf All 3 Deployment Patterns","text":""},{"location":"roadmap/current/#single-vm-pattern","title":"Single-VM Pattern \u2705","text":"<p>Status: \u2705 Production Ready (v1.0.0) Extracted From: Original standalone repos (tfgrid-ai-agent infrastructure)</p> <p>Architecture: <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Single VM              \u2502\n\u2502  - Your app running     \u2502\n\u2502  - Private networking   \u2502\n\u2502  - Wireguard/Mycelium   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>Features: - \u2705 Terraform infrastructure provisioning - \u2705 WireGuard VPN setup (automatic) - \u2705 Mycelium IPv6 overlay network - \u2705 Ansible platform configuration (15+ tasks) - \u2705 App source deployment - \u2705 Hook system (setup \u2192 configure \u2192 healthcheck) - \u2705 Health check verification - \u2705 State tracking</p> <p>Use Cases: - \u2705 Development environments - \u2705 Databases (PostgreSQL, MongoDB, Redis) - \u2705 Internal services - \u2705 AI agents - \u2705 Background workers</p> <p>Components: <pre><code>patterns/single-vm/\n\u251c\u2500\u2500 infrastructure/     # Terraform configs\n\u251c\u2500\u2500 platform/          # Ansible playbooks\n\u2502   \u251c\u2500\u2500 roles/\n\u2502   \u2502   \u251c\u2500\u2500 common/    # Common setup\n\u2502   \u2502   \u2514\u2500\u2500 app_setup/ # App deployment\n\u2502   \u2514\u2500\u2500 site.yml       # Main playbook\n\u2514\u2500\u2500 pattern.yaml       # Pattern metadata\n</code></pre></p>"},{"location":"roadmap/current/#gateway-pattern","title":"Gateway Pattern \u2705","text":"<p>Status: \u2705 Production Ready (v2.0.0) Released: Oct 9, 2025 Extracted From: tfgrid-gateway</p> <p>Architecture: <pre><code>Internet \u2192 [Gateway VM] \u2192 [Backend VMs]\n        (Public IPv4)    (Private Network)\n</code></pre></p> <p>Features: - \u2705 Multi-VM deployment (1 gateway + N backends) - \u2705 Public IPv4 on gateway - \u2705 Free SSL/TLS (Let's Encrypt) - \u2705 Two modes: NAT (simple) + Proxy (production) - \u2705 Load balancing + health checks - \u2705 Network redundancy (WireGuard + Mycelium)</p> <p>Use Cases: - \u2705 Production web applications - \u2705 E-commerce sites - \u2705 Public-facing services - \u2705 SSL-enabled websites</p> <p>Documentation: patterns/gateway/README.md</p>"},{"location":"roadmap/current/#k3s-pattern","title":"K3s Pattern \u2705","text":"<p>Status: \u2705 Production Ready (v2.0.0) Released: Oct 9, 2025 Extracted From: tfgrid-k3s</p> <p>Architecture: <pre><code>[Management Node] \u2192 [Control Plane] \u2192 [Worker Nodes]\n  kubectl, k9s        K3s API           Application Pods\n</code></pre></p> <p>Features: - \u2705 Complete Kubernetes cluster (K3s) - \u2705 Management node (kubectl, helm, k9s) - \u2705 Control plane + worker nodes - \u2705 MetalLB load balancer - \u2705 Nginx Ingress Controller - \u2705 HA control plane support - \u2705 Auto-scaling workers</p> <p>Use Cases: - \u2705 Cloud-native applications - \u2705 Microservices architectures - \u2705 Production SaaS platforms - \u2705 Enterprise deployments</p> <p>Documentation: patterns/k3s/README.md</p>"},{"location":"roadmap/current/#feature-completion-status","title":"\ud83d\udcca Feature Completion Status","text":""},{"location":"roadmap/current/#core-functionality","title":"Core Functionality","text":"Feature Status Completion Infrastructure Provisioning \u2705 Complete 100% WireGuard Networking \u2705 Complete 100% Mycelium Integration \u2705 Complete 100% Ansible Configuration \u2705 Complete 100% App Deployment \u2705 Complete 100% Hook System \u2705 Complete 100% State Management \u2705 Complete 100% CLI Tool \u2705 Complete 100%"},{"location":"roadmap/current/#user-experience","title":"User Experience","text":"Feature Status Completion Context File Support \u2705 Complete 100% Agent Subcommand \u2705 Complete 100% Auto-install \u2705 Complete 100% Input Validation \u2705 Complete 100% Error Messages \u2705 Complete 100% Idempotency \u2705 Complete 100% Remote Execution \u2705 Complete 100%"},{"location":"roadmap/current/#documentation","title":"Documentation","text":"Category Status Completion User Guides \u2705 Complete 100% CLI Reference \u2705 Complete 100% Pattern Docs \u2705 Complete 100% Troubleshooting \u2705 Complete 100% Examples \u2705 Complete 100%"},{"location":"roadmap/current/#quality-metrics","title":"\ud83c\udfaf Quality Metrics","text":""},{"location":"roadmap/current/#code-quality","title":"Code Quality","text":"Metric Target Actual Status Deployment Success &gt;95% 100% \u2705 Excellent Error Handling Comprehensive Comprehensive \u2705 Excellent Code Documentation Good Good \u2705 Excellent Shell Script Quality High High \u2705 Excellent"},{"location":"roadmap/current/#performance","title":"Performance","text":"Metric Target Actual Status Deployment Time &lt;5 min 2-3 min \u2705 Excellent CLI Response &lt;2s &lt;1s \u2705 Excellent Memory Usage &lt;100MB ~50MB \u2705 Excellent VM Startup &lt;90s ~60s \u2705 Excellent"},{"location":"roadmap/current/#documentation_1","title":"Documentation","text":"Metric Target Actual Status Coverage &gt;80% &gt;90% \u2705 Excellent Quality High High \u2705 Excellent Examples Many Many \u2705 Excellent Total Words &gt;20K &gt;50K \u2705 Excellent"},{"location":"roadmap/current/#technical-stack","title":"\ud83d\udd27 Technical Stack","text":""},{"location":"roadmap/current/#deployment-tools","title":"Deployment Tools","text":"<ul> <li>\u2705 Terraform/OpenTofu - Infrastructure as Code</li> <li>\u2705 Ansible - Configuration Management</li> <li>\u2705 WireGuard - VPN networking</li> <li>\u2705 Bash - Scripting and CLI</li> <li>\u2705 YAML - Configuration and state</li> </ul>"},{"location":"roadmap/current/#application-stack-ai-agent","title":"Application Stack (AI Agent)","text":"<ul> <li>\u2705 Node.js 18+ - Runtime</li> <li>\u2705 Qwen CLI - AI coding engine</li> <li>\u2705 Git - Version control</li> <li>\u2705 Systemd - Service management</li> </ul>"},{"location":"roadmap/current/#no-vendor-lock-in","title":"No Vendor Lock-in","text":"<ul> <li>\u2705 All industry-standard tools</li> <li>\u2705 No proprietary technology</li> <li>\u2705 Easy to migrate away</li> <li>\u2705 Open source friendly</li> </ul>"},{"location":"roadmap/current/#what-works-right-now","title":"\ud83d\ude80 What Works Right Now","text":""},{"location":"roadmap/current/#complete-workflows","title":"Complete Workflows","text":"<p>1. Deploy AI Agent <pre><code># Setup\necho \"app: ../tfgrid-ai-agent\" &gt; .tfgrid-compose.yaml\n\n# Deploy\ntfgrid-compose up\n\n# Use\ntfgrid-compose agent create\ntfgrid-compose agent run my-project\n\n# Clean up\ntfgrid-compose down\n</code></pre></p> <p>2. Custom Application <pre><code># Create app manifest\ncat &gt; my-app/tfgrid-compose.yaml &lt;&lt;EOF\nname: my-app\nversion: 1.0.0\npatterns:\n  recommended: single-vm\nEOF\n\n# Deploy\ntfgrid-compose up ../my-app\n</code></pre></p> <p>3. Remote Execution <pre><code># Execute commands on VM\ntfgrid-compose exec uptime\ntfgrid-compose exec \"systemctl status my-service\"\ntfgrid-compose exec \"cat /var/log/app.log\"\n</code></pre></p>"},{"location":"roadmap/current/#production-readiness","title":"\ud83d\udcc8 Production Readiness","text":""},{"location":"roadmap/current/#ready-for-production","title":"\u2705 Ready for Production","text":"<p>Why it's production-ready: 1. \u2705 Comprehensive testing - All core features tested 2. \u2705 Error handling - Clear, actionable error messages 3. \u2705 Idempotency - Safe to retry operations 4. \u2705 Documentation - Extensive user and technical docs 5. \u2705 State management - Reliable deployment tracking 6. \u2705 Validation - Input checking prevents errors 7. \u2705 Real deployments - Validated with actual use 8. \u2705 Bug fixes - Critical issues resolved</p> <p>Who can use it: - \u2705 Developers - AI coding environments - \u2705 DevOps teams - Infrastructure deployment - \u2705 Hobbyists - Learning and experimentation - \u2705 Small teams - Internal services</p>"},{"location":"roadmap/current/#learning-resources","title":"\ud83c\udf93 Learning Resources","text":""},{"location":"roadmap/current/#getting-started","title":"Getting Started","text":"<ul> <li>Installation Guide</li> <li>Quick Start (5 min)</li> <li>Core Concepts</li> </ul>"},{"location":"roadmap/current/#reference","title":"Reference","text":"<ul> <li>CLI Commands</li> <li>Manifest Spec</li> <li>Context File</li> </ul>"},{"location":"roadmap/current/#guides","title":"Guides","text":"<ul> <li>AI Agent Workflows</li> <li>Single-VM Pattern</li> <li>Troubleshooting</li> </ul>"},{"location":"roadmap/current/#known-limitations","title":"Known Limitations","text":""},{"location":"roadmap/current/#current-constraints","title":"Current Constraints","text":"<ul> <li>\u26a0\ufe0f No automated tests - Manual testing only (automated tests planned)</li> <li>\u26a0\ufe0f No rollback - Can't rollback failed deployments (planned for v2.1)</li> <li>\u26a0\ufe0f No shell completion - Bash/zsh/fish completion not yet available</li> </ul>"},{"location":"roadmap/current/#future-enhancements","title":"Future Enhancements","text":"<ul> <li>\ud83d\udccb Web UI - Command-line only (dashboard planned for Q4 2025)</li> <li>\ud83d\udccb Automated testing - CI/CD pipeline (planned)</li> <li>\ud83d\udccb Advanced monitoring - Integrated observability (future)</li> <li>\ud83d\udccb Additional patterns - More specialized patterns (future)</li> </ul>"},{"location":"roadmap/current/#success-stories","title":"\u2728 Success Stories","text":"<ul> <li>\u2705 AI agent deployed successfully</li> <li>\u2705 100% deployment success rate</li> <li>\u2705 Zero critical bugs in production</li> <li>\u2705 2-3 minute deployment times achieved</li> <li>\u2705 All documentation validated</li> </ul>"},{"location":"roadmap/current/#timeline","title":"\ud83d\udcc5 Timeline","text":"<ul> <li>Oct 8, 2025 - v1.0.0 released (single-vm pattern)</li> <li>Oct 8, 2025 - Critical AI agent bug fixed</li> <li>Oct 9, 2025 - v2.0.0 released (Complete First Layer)</li> <li>Oct 9, 2025 - Gateway pattern production-ready \u2705</li> <li>Oct 9, 2025 - K3s pattern production-ready \u2705</li> <li>Q4 2025 - Web dashboard (planned)</li> <li>Q1 2026 - Marketplace MVP (planned)</li> </ul> <p>Overall Status: \u2705 COMPLETE FIRST LAYER - ALL PATTERNS PRODUCTION READY Recommended For: Development, production web apps, Kubernetes, enterprise Ready For: All deployment scenarios from dev to enterprise scale</p> <p>Next: Planned Features \u2022 Changelog</p>"},{"location":"roadmap/planned/","title":"Planned Features","text":"<p>Future roadmap for TFGrid Compose</p>"},{"location":"roadmap/planned/#q4-2025-gateway-pattern","title":"\ud83d\udea7 Q4 2025: Gateway Pattern","text":"<p>Status: \ud83d\udea7 Planned (Scaffolded 20%) Timeline: 2-4 weeks Source: Inspired by mik-tf/tfgrid-gateway</p>"},{"location":"roadmap/planned/#overview","title":"Overview","text":"<p>The gateway pattern provides public IPv4 access for web applications through a gateway VM with NAT/proxy forwarding to private backend VMs.</p>"},{"location":"roadmap/planned/#source-repository-features","title":"Source Repository Features","text":"<p>The mik-tf/tfgrid-gateway repo contains a complete, working implementation with:</p> <p>\u2705 Gateway Types: - NAT-based gateway (nftables) - Proxy-based gateway (HAProxy + Nginx) - SSL/TLS termination (Let's Encrypt)</p> <p>\u2705 Network Features: - Public IPv4 on gateway VM - WireGuard private networking - Mycelium IPv6 overlay - Network redundancy (both modes) - Port forwarding configuration</p> <p>\u2705 Advanced Features: - SSL certificates with auto-renewal - Path-based routing (<code>/vm1</code>, <code>/vm2</code>) - Port-based access (<code>:8081</code>, <code>:8082</code>) - Security features (disable public ports) - Live demo system with status pages</p>"},{"location":"roadmap/planned/#integration-plan","title":"Integration Plan","text":"<p>Extract from source repo: 1. \u2705 Terraform infrastructure configs (gateway + backend VMs) 2. \u2705 Ansible playbooks (NAT, proxy, SSL setup) 3. \u2705 Network configuration (WireGuard, Mycelium) 4. \u2705 SSL automation (certbot integration)</p> <p>Adapt to TFGrid Compose: 1. [ ] Create pattern directory (<code>patterns/gateway/</code>) 2. [ ] Unify with manifest system (<code>tfgrid-compose.yaml</code>) 3. [ ] Simplify configuration (auto-detect settings) 4. [ ] Test with multiple applications 5. [ ] Write pattern documentation</p>"},{"location":"roadmap/planned/#usage-after-integration","title":"Usage (After Integration)","text":"<pre><code># Deploy web app with public access\ntfgrid-compose up my-webapp --pattern=gateway --domain=myapp.com\n\n# Automatic:\n# \u2705 Gateway VM with public IPv4\n# \u2705 Backend VMs with private networking\n# \u2705 SSL certificate from Let's Encrypt\n# \u2705 Nginx reverse proxy configured\n# \u2705 Health checks running\n</code></pre>"},{"location":"roadmap/planned/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Gateway VM (Public)          \u2502\n\u2502  - Public IPv4                \u2502\n\u2502  - SSL termination            \u2502\n\u2502  - Nginx reverse proxy        \u2502\n\u2502  - NAT/Proxy forwarding       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n             \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Backend VMs (Private)        \u2502\n\u2502  - Web app                    \u2502\n\u2502  - Database                   \u2502\n\u2502  - Cache                      \u2502\n\u2502  - Private networking only    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"roadmap/planned/#use-cases","title":"Use Cases","text":"<ul> <li>Production web applications</li> <li>E-commerce sites</li> <li>Multi-tier applications</li> <li>Traditional hosting with public access</li> <li>SaaS platforms</li> </ul>"},{"location":"roadmap/planned/#completion-status","title":"Completion Status","text":"Task Status Notes Extract Terraform configs \u274c TODO Source available Extract Ansible playbooks \u274c TODO NAT + proxy roles Extract SSL automation \u274c TODO certbot integration Create pattern metadata \u274c TODO <code>pattern.yaml</code> Adapt to manifest system \u274c TODO Auto-configure Test with demo app \u274c TODO Validation Write documentation \u274c TODO User guide <p>Progress: 20% (scaffolded structure only)</p>"},{"location":"roadmap/planned/#q1-2026-k3s-pattern","title":"\ud83d\udea7 Q1 2026: K3s Pattern","text":"<p>Status: \ud83d\udea7 Planned (Scaffolded 20%) Timeline: 4-6 weeks Source: Inspired by ucli-tools/tfgrid-k3s</p>"},{"location":"roadmap/planned/#overview_1","title":"Overview","text":"<p>The K3s pattern deploys lightweight Kubernetes clusters on ThreeFold Grid with full kubectl access and modern cloud-native features.</p>"},{"location":"roadmap/planned/#source-repository-features_1","title":"Source Repository Features","text":"<p>The ucli-tools/tfgrid-k3s repo contains a complete, working implementation with:</p> <p>\u2705 Cluster Components: - K3s control plane nodes - K3s worker nodes - Management node with K9s TUI - MetalLB load balancer - Nginx Ingress controller</p> <p>\u2705 Networking: - Flannel CNI (VXLAN backend) - WireGuard private network - Mycelium IPv6 overlay - Dual-stack IPv4/IPv6 support - Load balancing across networks</p> <p>\u2705 Management: - K9s terminal UI - kubectl pre-configured - Helm chart support - Ansible automation - Health check verification</p> <p>\u2705 Advanced Features: - High availability support - Auto-scaling workers - Network mode selection - Management node with all tools</p>"},{"location":"roadmap/planned/#integration-plan_1","title":"Integration Plan","text":"<p>Extract from source repo: 1. \u2705 Terraform multi-VM configs (control, worker, management) 2. \u2705 Ansible K3s playbooks (cluster setup, joining) 3. \u2705 MetalLB + Nginx Ingress configs 4. \u2705 Management node setup (kubectl, K9s, Helm)</p> <p>Adapt to TFGrid Compose: 1. [ ] Create pattern directory (<code>patterns/k3s/</code>) 2. [ ] Support Helm chart deployments 3. [ ] Multi-app Kubernetes deployments 4. [ ] GitOps integration (ArgoCD/Flux) 5. [ ] Simplified kubectl access 6. [ ] Pattern documentation</p>"},{"location":"roadmap/planned/#usage-after-integration_1","title":"Usage (After Integration)","text":"<pre><code># Deploy microservices on Kubernetes\ntfgrid-compose up my-saas --pattern=k3s\n\n# Automatic:\n# \u2705 K3s cluster deployed (1 control + 3 workers)\n# \u2705 Management node with K9s\n# \u2705 MetalLB load balancer\n# \u2705 Nginx Ingress controller\n# \u2705 kubectl configured\n# \u2705 Helm ready\n\n# Access cluster\ntfgrid-compose kubectl get nodes\ntfgrid-compose k9s  # Terminal UI\ntfgrid-compose helm list\n</code></pre>"},{"location":"roadmap/planned/#architecture_1","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  K3s Cluster                       \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  Control Plane              \u2502   \u2502\n\u2502  \u2502  - K3s master               \u2502   \u2502\n\u2502  \u2502  - Traefik ingress          \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  Worker Nodes (3+)          \u2502   \u2502\n\u2502  \u2502  - Application pods         \u2502   \u2502\n\u2502  \u2502  - Auto-scaling             \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  Management Node            \u2502   \u2502\n\u2502  \u2502  - kubectl, K9s, Helm       \u2502   \u2502\n\u2502  \u2502  - Cluster access           \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"roadmap/planned/#use-cases_1","title":"Use Cases","text":"<ul> <li>Cloud-native applications</li> <li>Microservices architectures</li> <li>Production SaaS platforms</li> <li>High availability requirements</li> <li>Auto-scaling workloads</li> </ul>"},{"location":"roadmap/planned/#completion-status_1","title":"Completion Status","text":"Task Status Notes Extract Terraform configs \u274c TODO Multi-VM setup Extract Ansible playbooks \u274c TODO K3s + components Extract MetalLB/Ingress \u274c TODO Load balancing Create pattern metadata \u274c TODO <code>pattern.yaml</code> Helm chart support \u274c TODO App deployment GitOps integration \u274c TODO ArgoCD/Flux Write documentation \u274c TODO Complete guide <p>Progress: 20% (scaffolded structure only)</p>"},{"location":"roadmap/planned/#completed-brand-website-oct-9-2025","title":"\u2705 Completed: Brand &amp; Website (Oct 9, 2025)","text":"<p>What was delivered: - \u2705 Rebranded to TFGrid Studio - Better positioning as complete platform - \u2705 Marketing website (tfgrid.studio) - Modern Astro + Tailwind site - \u2705 Documentation site (docs.tfgrid.studio) - MkDocs Material - \u2705 Renamed repos - tfgrid-deployer \u2192 tfgrid-compose (more accurate) - \u2705 GitHub organization - github.com/tfgrid-studio</p> <p>Impact: - Professional brand presence - Clear product positioning - Zero-cost hosting (GitHub Pages) - Fast, modern web stack</p>"},{"location":"roadmap/planned/#q2-2026-advanced-features","title":"\ud83d\udccb Q2 2026: Advanced Features","text":""},{"location":"roadmap/planned/#v20-enhancements","title":"v2.0 Enhancements","text":""},{"location":"roadmap/planned/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<ul> <li> Web dashboard (real-time metrics)</li> <li> Prometheus integration</li> <li> Loki log aggregation</li> <li> Alerting (PagerDuty/Slack)</li> <li> Cost tracking</li> </ul>"},{"location":"roadmap/planned/#database-support","title":"Database Support","text":"<ul> <li> PostgreSQL clusters</li> <li> MongoDB replica sets</li> <li> Redis caching</li> <li> Automated backups</li> <li> Point-in-time recovery</li> </ul>"},{"location":"roadmap/planned/#developer-experience","title":"Developer Experience","text":"<ul> <li> Shell completion (bash/zsh/fish)</li> <li> VS Code extension</li> <li> Better debugging tools</li> <li> Deployment rollback</li> <li> Preview environments</li> </ul>"},{"location":"roadmap/planned/#testing-quality","title":"Testing &amp; Quality","text":"<ul> <li> Automated integration tests</li> <li> Unit tests for core functions</li> <li> CI/CD pipeline</li> <li> End-to-end tests</li> <li> Error scenario testing</li> </ul>"},{"location":"roadmap/planned/#q3-q4-2026-ecosystem-platform","title":"\ud83d\udccb Q3-Q4 2026: Ecosystem &amp; Platform","text":""},{"location":"roadmap/planned/#marketplace","title":"Marketplace","text":"<p>TFGrid Marketplace - One-click app deployment</p> <p>Features: - [ ] App catalog - [ ] One-click install - [ ] App ratings &amp; reviews - [ ] Developer submissions - [ ] Revenue sharing (80/20)</p> <p>Example: <pre><code># Browse marketplace\ntfgrid-compose marketplace search wordpress\n\n# Deploy from marketplace\ntfgrid-compose marketplace install wordpress\n</code></pre></p>"},{"location":"roadmap/planned/#web-dashboard","title":"Web Dashboard","text":"<p>TFGrid Web - Fully managed platform (SaaS)</p> <p>Features: - [ ] Web UI for deployments - [ ] Drag-and-drop deployment - [ ] Visual environment management - [ ] Team collaboration - [ ] Usage analytics - [ ] Billing integration</p> <p>Pricing: <pre><code>Free:       $0 - 1 deployment\nHobbyist:   $10/mo - 3 projects\nPro:        $50/mo - 10 projects\nBusiness:   $200/mo - Unlimited\n</code></pre></p>"},{"location":"roadmap/planned/#cicd-integration","title":"CI/CD Integration","text":"<p>GitHub Actions / GitLab CI Integration</p> <p>Features: - [ ] GitHub Actions workflow - [ ] GitLab CI integration - [ ] Automated testing - [ ] Deployment pipelines - [ ] Rollback automation</p> <p>Example: <pre><code># .github/workflows/deploy.yml\n- name: Deploy to TFGrid\n  uses: tfgrid-compose/deploy-action@v1\n  with:\n    app: ./my-app\n    pattern: gateway\n</code></pre></p>"},{"location":"roadmap/planned/#multi-cloud-support","title":"Multi-Cloud Support","text":"<p>Deploy to multiple clouds</p> <p>Features: - [ ] AWS integration - [ ] GCP integration - [ ] Azure integration - [ ] Hybrid deployments - [ ] Cost optimization</p>"},{"location":"roadmap/planned/#success-metrics","title":"\ud83c\udfaf Success Metrics","text":""},{"location":"roadmap/planned/#user-growth-targets","title":"User Growth Targets","text":"Metric Year 1 Year 2 Year 3 Total Users 10,000 50,000 200,000 Paying Customers 100 500 2,000 GitHub Stars 1,000 5,000 15,000 Discord Members 500 2,000 10,000 Monthly Active Users 2,000 10,000 50,000"},{"location":"roadmap/planned/#revenue-targets","title":"Revenue Targets","text":"Year Target ARR Key Drivers Year 1 $144K Compute credits, early licenses Year 2 $1.28M Marketplace, enterprise sales Year 3 $5.5M Managed services, scaling"},{"location":"roadmap/planned/#community-targets","title":"Community Targets","text":"Metric Year 1 Year 2 Year 3 Contributors 10 50 200 Marketplace Apps 50 200 1,000 Partner Integrations 5 20 100"},{"location":"roadmap/planned/#source-repository-links","title":"\ud83d\udd17 Source Repository Links","text":"<p>All planned patterns are based on proven, working implementations:</p> Pattern Source Repository Status Gateway mik-tf/tfgrid-gateway Complete &amp; Working K3s ucli-tools/tfgrid-k3s Complete &amp; Working AI Agent mik-tf/tfgrid-ai-agent \u2705 Integrated (v1.0) <p>Why this matters: - \u2705 Not vaporware - code exists and works - \u2705 Battle-tested in production - \u2705 Proven architectures - \u2705 Shorter integration time - \u2705 Lower risk</p> <p>Learn more about source acknowledgment \u2192</p>"},{"location":"roadmap/planned/#release-timeline","title":"\ud83d\udcc5 Release Timeline","text":"Quarter Release Key Features Q4 2025 v1.1.0 Gateway pattern Q1 2026 v2.0.0 K3s pattern Q2 2026 v2.1.0 Web dashboard, monitoring Q3 2026 v3.0.0 Marketplace, enterprise Q4 2026 v3.1.0 Multi-cloud, GitOps"},{"location":"roadmap/planned/#how-to-contribute","title":"\ud83e\udd1d How to Contribute","text":"<p>Want to help make these features happen?</p>"},{"location":"roadmap/planned/#for-developers","title":"For Developers","text":"<ul> <li>Review source repos to understand implementations</li> <li>Help with extraction and adaptation</li> <li>Write tests and documentation</li> <li>Submit pull requests</li> </ul>"},{"location":"roadmap/planned/#for-users","title":"For Users","text":"<ul> <li>Test pre-release versions</li> <li>Provide feedback</li> <li>Report bugs</li> <li>Share use cases</li> </ul>"},{"location":"roadmap/planned/#for-organizations","title":"For Organizations","text":"<ul> <li>Sponsor development</li> <li>Enterprise partnerships</li> <li>Custom feature requests</li> <li>Training and consulting</li> </ul> <p>Contributing Guide \u2192</p> <p>Current Status: v1.0.0 Production Ready Next Up: Gateway Pattern (Q4 2025) Long-term: Full platform ecosystem</p>"},{"location":"troubleshooting/guide/","title":"TFGrid Compose Troubleshooting Guide","text":"<p>Version: 0.9.0 Status: Active Audience: All Users</p>"},{"location":"troubleshooting/guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Common Errors</li> <li>Debug Mode</li> <li>Network Issues</li> <li>Recovery Procedures</li> <li>Log Analysis</li> <li>State Inspection</li> <li>FAQ</li> <li>Getting Help</li> </ol>"},{"location":"troubleshooting/guide/#common-errors","title":"Common Errors","text":""},{"location":"troubleshooting/guide/#prerequisites-missing","title":"Prerequisites Missing","text":""},{"location":"troubleshooting/guide/#error-terraformopentofu-not-found","title":"Error: \"Terraform/OpenTofu not found\"","text":"<p>Cause: Neither OpenTofu nor Terraform is installed</p> <p>Solution: <pre><code># Option 1: Install OpenTofu (recommended, open source)\n# Ubuntu/Debian\ncurl -L https://get.opentofu.org/install-opentofu.sh | sudo bash\n\n# macOS\nbrew install opentofu\n\n# Option 2: Install Terraform\n# Ubuntu/Debian\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\nsudo apt update &amp;&amp; sudo apt install terraform\n\n# macOS\nbrew install terraform\n</code></pre></p> <p>Verify: <pre><code>tofu --version\n# or\nterraform --version\n</code></pre></p>"},{"location":"troubleshooting/guide/#error-ansible-not-found","title":"Error: \"Ansible not found\"","text":"<p>Cause: Ansible is not installed</p> <p>Solution: <pre><code># Ubuntu/Debian\nsudo apt update\nsudo apt install ansible\n\n# macOS\nbrew install ansible\n\n# Verify\nansible --version\n</code></pre></p>"},{"location":"troubleshooting/guide/#error-threefold-mnemonic-not-found","title":"Error: \"ThreeFold mnemonic not found\"","text":"<p>Cause: Mnemonic phrase not configured</p> <p>Solution: <pre><code># Option 1: Standard location (recommended)\nmkdir -p ~/.config/threefold\necho 'your twelve word mnemonic phrase here' &gt; ~/.config/threefold/mnemonic\nchmod 600 ~/.config/threefold/mnemonic\n\n# Option 2: Environment variable\nexport TF_VAR_mnemonic=\"your twelve word mnemonic phrase here\"\n\n# Option 3: Project-specific (git-ignored)\necho 'your mnemonic' &gt; .tfgrid-mnemonic\nchmod 600 .tfgrid-mnemonic\n</code></pre></p> <p>Security Warning:</p> <ul> <li>Never commit mnemonic to version control</li> <li>Use 600 permissions (owner read/write only)</li> <li>Rotate regularly</li> </ul>"},{"location":"troubleshooting/guide/#deployment-errors","title":"Deployment Errors","text":""},{"location":"troubleshooting/guide/#error-existing-deployment-detected","title":"Error: \"Existing deployment detected\"","text":"<p>Cause: Attempting to deploy while another deployment exists</p> <p>Current Behavior: <pre><code>\u274c Existing deployment detected\n   App: my-app (pattern: single-vm)\n   Status: running\n   Primary IP: 10.1.3.2\n\nCannot deploy another app while deployment exists.\n</code></pre></p> <p>Solution: <pre><code># Option 1: Destroy existing deployment\ntfgrid-compose down &lt;existing-app-path&gt;\n\n# Option 2: Use different app directory\ncd ../another-app\ntfgrid-compose up .\n\n# Future (v0.10.0+): Multi-deployment support\ntfgrid-compose up --id=project-2 &lt;app-path&gt;\n</code></pre></p>"},{"location":"troubleshooting/guide/#error-app-manifest-not-found","title":"Error: \"App manifest not found\"","text":"<p>Cause: <code>tfgrid-compose.yaml</code> is missing</p> <p>Solution: <pre><code># Create manifest\ncat &gt; tfgrid-compose.yaml &lt;&lt; EOF\nname: my-app\nversion: 1.0.0\npattern: single-vm\n\nconfig:\n  node: 8\n  cpu: 4\n  memory: 8192\n  disk: 102400\nEOF\n</code></pre></p> <p>Required Fields:</p> <ul> <li><code>name</code>: Application name</li> <li><code>pattern</code>: Deployment pattern (single-vm, gateway, k3s)</li> <li><code>config</code>: Pattern-specific configuration</li> </ul>"},{"location":"troubleshooting/guide/#error-pattern-directory-not-found","title":"Error: \"Pattern directory not found\"","text":"<p>Cause: Referenced pattern doesn't exist</p> <p>Solution: <pre><code># List available patterns\nls patterns/\n# Output: single-vm  gateway  k3s\n\n# Update manifest to use existing pattern\n# Edit tfgrid-compose.yaml:\npattern: single-vm  # Use one of: single-vm, gateway, k3s\n</code></pre></p>"},{"location":"troubleshooting/guide/#terraformopentofu-errors","title":"Terraform/OpenTofu Errors","text":""},{"location":"troubleshooting/guide/#error-terraform-init-failed","title":"Error: \"terraform init failed\"","text":"<p>Cause: Network issues, provider errors, or invalid configuration</p> <p>Debug: <pre><code># Check log\ncat .tfgrid-compose/terraform-init.log\n\n# Common issues:\n# 1. Network connectivity\nping github.com\n\n# 2. Provider version conflict\nrm -rf .tfgrid-compose/terraform/.terraform\ntfgrid-compose up &lt;app&gt;\n\n# 3. Invalid Terraform version\ntofu --version  # Should be &gt;= 1.6.0\nterraform --version  # Should be &gt;= 1.5.0\n</code></pre></p>"},{"location":"troubleshooting/guide/#error-no-suitable-nodes-found","title":"Error: \"No suitable nodes found\"","text":"<p>Cause: ThreeFold Grid node unavailable or insufficient resources</p> <p>Solution: <pre><code># Option 1: Try different node\n# Edit tfgrid-compose.yaml:\nconfig:\n  node: 12  # Try different node ID\n\n# Option 2: Check node availability\n# Visit: https://dashboard.grid.tf/\n# Find available nodes in your region\n\n# Option 3: Reduce resource requirements\nconfig:\n  cpu: 2      # Reduce from 4\n  memory: 4096  # Reduce from 8192\n</code></pre></p>"},{"location":"troubleshooting/guide/#error-terraform-apply-failed","title":"Error: \"terraform apply failed\"","text":"<p>Cause: Various infrastructure provisioning issues</p> <p>Debug: <pre><code># Check detailed log\ncat .tfgrid-compose/terraform-apply.log\n\n# Common causes:\n# 1. Insufficient funds on ThreeFold wallet\n# 2. Node offline/unavailable\n# 3. Resource limits exceeded\n# 4. Network configuration errors\n\n# Manual inspection\ncd .tfgrid-compose/terraform\ntofu plan  # See what would be created\ntofu console  # Interactive inspection\n</code></pre></p>"},{"location":"troubleshooting/guide/#network-errors","title":"Network Errors","text":""},{"location":"troubleshooting/guide/#error-wireguard-connection-failed","title":"Error: \"WireGuard connection failed\"","text":"<p>Cause: WireGuard not installed, firewall blocking, or configuration issue</p> <p>Solution: <pre><code># 1. Check WireGuard installed\nwhich wg-quick\n# If missing:\n# Ubuntu/Debian\nsudo apt install wireguard\n\n# macOS\nbrew install wireguard-tools\n\n# 2. Check interface status\nsudo wg show\n\n# 3. Check firewall\n# Ubuntu/Debian\nsudo ufw status\nsudo ufw allow 51820/udp\n\n# macOS\n# Check System Preferences &gt; Security &amp; Privacy &gt; Firewall\n\n# 4. Restart WireGuard\nsudo wg-quick down wg0\ntfgrid-compose up &lt;app&gt;  # Will recreate WireGuard\n</code></pre></p>"},{"location":"troubleshooting/guide/#error-ssh-connection-timeout","title":"Error: \"SSH connection timeout\"","text":"<p>Cause: VM not ready, network issue, or wrong IP</p> <p>Debug: <pre><code># 1. Check VM IP\ncat .tfgrid-compose/state.yaml | grep primary_ip\n\n# 2. Test connectivity\nping &lt;primary-ip&gt;\n\n# 3. If using WireGuard, check interface\nsudo wg show\n# Should show: wg0 interface with peer\n\n# 4. Check VM is running\n# Visit ThreeFold Dashboard\n# https://dashboard.grid.tf/\n\n# 5. Wait longer (VM may still be booting)\n# Typical boot time: 30-90 seconds\n\n# 6. Manual SSH test\nssh root@&lt;primary-ip&gt;\n</code></pre></p> <p>Common Causes:</p> <ul> <li>VM still booting (wait 2-3 minutes)</li> <li>WireGuard interface down</li> <li>Firewall blocking port 22</li> <li>Wrong IP address in state</li> </ul>"},{"location":"troubleshooting/guide/#error-cannot-establish-ssh-connection","title":"Error: \"Cannot establish SSH connection\"","text":"<p>Cause: SSH keys not configured or VM doesn't have key</p> <p>Solution: <pre><code># 1. Check SSH key exists\nls ~/.ssh/id_*.pub\n# If missing, create one:\nssh-keygen -t ed25519 -f ~/.ssh/id_ed25519\n\n# 2. Verify key was deployed\n# Check Terraform outputs\ncd .tfgrid-compose/terraform\ntofu output\n# Should show ssh_key was set\n\n# 3. Redeploy with correct key\ntfgrid-compose down &lt;app&gt;\ntfgrid-compose up &lt;app&gt;\n</code></pre></p>"},{"location":"troubleshooting/guide/#ansible-errors","title":"Ansible Errors","text":""},{"location":"troubleshooting/guide/#error-ansible-playbook-failed","title":"Error: \"Ansible playbook failed\"","text":"<p>Cause: Configuration errors, package installation failures</p> <p>Debug: <pre><code># 1. Check Ansible log\ncat .tfgrid-compose/ansible.log\n\n# 2. Test connectivity\nansible all -i .tfgrid-compose/inventory.ini -m ping\n\n# 3. Run playbook manually with verbosity\ncd &lt;pattern&gt;/platform\nansible-playbook -i ../../.tfgrid-compose/inventory.ini site.yml -vvv\n\n# 4. Common issues:\n# - Package repository errors (apt update failed)\n# - Network connectivity from VM\n# - Disk space issues on VM\n</code></pre></p>"},{"location":"troubleshooting/guide/#debug-mode","title":"Debug Mode","text":""},{"location":"troubleshooting/guide/#enabling-debug-mode","title":"Enabling Debug Mode","text":"<p>Current (v0.9.0): <pre><code># Enable bash trace mode\nset -x\ntfgrid-compose up &lt;app&gt;\nset +x\n</code></pre></p> <p>Future (v0.10.0+): <pre><code># Built-in debug flag\ntfgrid-compose --debug up &lt;app&gt;\n</code></pre></p>"},{"location":"troubleshooting/guide/#debug-output","title":"Debug Output","text":"<p>What you'll see:</p> <ul> <li>Every command executed (<code>+ command args</code>)</li> <li>Variable expansions</li> <li>Function calls</li> <li>Exit codes</li> </ul> <p>Example: <pre><code>+ log_step 'Deploying infrastructure...'\n+ echo -e '\\033[0;35m\u25b6\\033[0m Deploying infrastructure...'\n\u25b6 Deploying infrastructure...\n+ cd .tfgrid-compose/terraform\n+ tofu init\nInitializing the backend...\n...\n</code></pre></p>"},{"location":"troubleshooting/guide/#debug-checklist","title":"Debug Checklist","text":"<p>When debugging, check: 1. Prerequisites: All tools installed? 2. Mnemonic: Is it loaded correctly? 3. Network: Can you reach ThreeFold Grid? 4. State: Is state directory corrupt? 5. Logs: What do the logs say? 6. Permissions: Correct file permissions?</p>"},{"location":"troubleshooting/guide/#network-issues","title":"Network Issues","text":""},{"location":"troubleshooting/guide/#wireguard-troubleshooting","title":"WireGuard Troubleshooting","text":"<p>Check WireGuard Status: <pre><code># List all interfaces\nsudo wg show\n\n# Check specific interface\nsudo wg show wg0\n\n# Expected output:\ninterface: wg0\n  public key: ...\n  private key: (hidden)\n  listening port: 51820\n\npeer: ...\n  endpoint: &lt;node-ip&gt;:51820\n  allowed ips: 10.1.0.0/16\n  latest handshake: 5 seconds ago\n  transfer: 1.2 MiB received, 0.8 MiB sent\n</code></pre></p> <p>Common Issues:</p> <p>1. No handshake: <pre><code># Latest handshake: never\n# Cause: Firewall blocking UDP/51820\n\n# Solution: Allow UDP traffic\nsudo ufw allow 51820/udp\n</code></pre></p> <p>2. Interface conflicts: <pre><code># Error: wg0 already exists\n\n# Solution: Use different interface\nsudo wg-quick down wg0\n# Or manually specify in pattern\n</code></pre></p> <p>3. Permission denied: <pre><code># Error: Operation not permitted\n\n# Solution: Run with sudo\nsudo wg-quick up wg0\n</code></pre></p> <p>WireGuard Cleanup: <pre><code># Stop all WireGuard interfaces\nsudo wg-quick down wg0\nsudo wg-quick down wg1\n\n# Remove configuration\nsudo rm -f /etc/wireguard/wg*.conf\n</code></pre></p>"},{"location":"troubleshooting/guide/#mycelium-troubleshooting","title":"Mycelium Troubleshooting","text":"<p>Check Mycelium Status: <pre><code># Check if Mycelium is running\nps aux | grep mycelium\n\n# Check Mycelium connectivity\nping6 &lt;mycelium-ipv6-from-state&gt;\n</code></pre></p> <p>Install Mycelium: <pre><code># Ubuntu/Debian\nwget https://github.com/threefoldtech/mycelium/releases/latest/download/mycelium-x86_64-unknown-linux-musl.tar.gz\ntar -xzf mycelium-*.tar.gz\nsudo mv mycelium /usr/local/bin/\nsudo chmod +x /usr/local/bin/mycelium\n\n# Run Mycelium\nsudo mycelium --peers tcp://188.40.132.242:9651\n</code></pre></p>"},{"location":"troubleshooting/guide/#connectivity-testing","title":"Connectivity Testing","text":"<p>Network Diagnostics: <pre><code># 1. Test ThreeFold Grid reachability\nping grid.tf\n\n# 2. Test DNS resolution\nnslookup grid.tf\n\n# 3. Test WireGuard peer\n# Get peer endpoint from state\ncat .tfgrid-compose/state.yaml | grep node\nping &lt;node-ip&gt;\n\n# 4. Trace route\ntraceroute &lt;primary-ip&gt;\n\n# 5. Test SSH port\nnc -zv &lt;primary-ip&gt; 22\n</code></pre></p>"},{"location":"troubleshooting/guide/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"troubleshooting/guide/#state-corruption","title":"State Corruption","text":"<p>Symptoms:</p> <ul> <li>Inconsistent state information</li> <li>Terraform errors about existing resources</li> <li>Deployment shows running but no VM exists</li> </ul> <p>Recovery: <pre><code># 1. Backup current state\ncp -r .tfgrid-compose .tfgrid-compose.backup\n\n# 2. Try to destroy cleanly\ntfgrid-compose down &lt;app&gt;\n\n# 3. If destroy fails, manual cleanup\ncd .tfgrid-compose/terraform\ntofu destroy  # or terraform destroy\n\n# 4. Clean state directory\nrm -rf .tfgrid-compose/\n\n# 5. Redeploy\ntfgrid-compose up &lt;app&gt;\n</code></pre></p>"},{"location":"troubleshooting/guide/#stuck-deployment","title":"Stuck Deployment","text":"<p>Symptoms: - Deployment running but not progressing - Process hung on specific step - No error messages</p> <p>Recovery: <pre><code># 1. Stop the stuck process\n# Press Ctrl+C\n\n# 2. Check what's running\nps aux | grep tfgrid-compose\nps aux | grep terraform\nps aux | grep ansible\n\n# 3. Kill if necessary\nkillall terraform\nkillall ansible-playbook\n\n# 4. Check state\ncat .tfgrid-compose/state.yaml\n\n# 5. Decide: retry or destroy\n# Retry:\ntfgrid-compose up &lt;app&gt;\n\n# Destroy:\ntfgrid-compose down &lt;app&gt;\n</code></pre></p>"},{"location":"troubleshooting/guide/#orphaned-resources","title":"Orphaned Resources","text":"<p>Symptoms: - Resources exist on ThreeFold Grid but not in state - Billing continues but no deployment shown</p> <p>Recovery: <pre><code># 1. Check ThreeFold Dashboard\n# Visit: https://dashboard.grid.tf/\n# Login with your account\n# View active deployments\n\n# 2. Import existing resources (manual)\ncd .tfgrid-compose/terraform\ntofu import &lt;resource-type&gt;.&lt;resource-name&gt; &lt;resource-id&gt;\n\n# 3. Or delete via Dashboard\n# ThreeFold Dashboard &gt; Deployments &gt; Delete\n\n# 4. Clean local state\nrm -rf .tfgrid-compose/\n</code></pre></p>"},{"location":"troubleshooting/guide/#wireguard-cleanup","title":"WireGuard Cleanup","text":"<p>When to clean:</p> <ul> <li>Deployment destroyed but WireGuard still running</li> <li>Interface conflicts</li> <li>Network issues</li> </ul> <p>Cleanup: <pre><code># 1. List all interfaces\nsudo wg show\n\n# 2. Stop tfgrid-compose interfaces (wg0, wg1, etc.)\nsudo wg-quick down wg0\nsudo wg-quick down wg1\n\n# 3. Remove configurations\nsudo rm -f /etc/wireguard/wg*.conf\n\n# 4. Verify cleanup\nsudo wg show  # Should show nothing\n</code></pre></p>"},{"location":"troubleshooting/guide/#log-analysis","title":"Log Analysis","text":""},{"location":"troubleshooting/guide/#log-locations","title":"Log Locations","text":"<p>All logs stored in <code>.tfgrid-compose/</code>:</p> <pre><code>.tfgrid-compose/\n\u251c\u2500\u2500 terraform-init.log      # Terraform initialization\n\u251c\u2500\u2500 terraform-plan.log      # Terraform plan output\n\u251c\u2500\u2500 terraform-apply.log     # Terraform apply (deployment)\n\u251c\u2500\u2500 terraform-destroy.log   # Terraform destroy\n\u251c\u2500\u2500 ansible.log            # Ansible playbook execution\n\u251c\u2500\u2500 hook-setup.log         # Setup hook output (if exists)\n\u251c\u2500\u2500 hook-configure.log     # Configure hook output\n\u2514\u2500\u2500 hook-healthcheck.log   # Health check output\n</code></pre>"},{"location":"troubleshooting/guide/#reading-logs","title":"Reading Logs","text":"<p>Terraform Logs: <pre><code># Check for errors in Terraform apply\ncat .tfgrid-compose/terraform-apply.log | grep -i error\n\n# Check last 50 lines\ntail -50 .tfgrid-compose/terraform-apply.log\n\n# Real-time monitoring\ntail -f .tfgrid-compose/terraform-apply.log\n</code></pre></p> <p>Ansible Logs: <pre><code># Check for failed tasks\ncat .tfgrid-compose/ansible.log | grep -i \"failed:\"\n\n# Check for warnings\ncat .tfgrid-compose/ansible.log | grep -i \"warn\"\n\n# Extract summary\ncat .tfgrid-compose/ansible.log | grep \"PLAY RECAP\" -A 5\n</code></pre></p> <p>Hook Logs: <pre><code># Check setup hook\ncat .tfgrid-compose/hook-setup.log\n\n# All hooks\ntail -n 20 .tfgrid-compose/hook-*.log\n</code></pre></p>"},{"location":"troubleshooting/guide/#state-inspection","title":"State Inspection","text":""},{"location":"troubleshooting/guide/#viewing-state","title":"Viewing State","text":"<p>State File: <pre><code># View full state\ncat .tfgrid-compose/state.yaml\n\n# Pretty print (if yq installed)\nyq . .tfgrid-compose/state.yaml\n\n# Extract specific values\ngrep primary_ip .tfgrid-compose/state.yaml\ngrep deployment_name .tfgrid-compose/state.yaml\n</code></pre></p> <p>Terraform State: <pre><code>cd .tfgrid-compose/terraform\n\n# Show all resources\ntofu show\n\n# List resources\ntofu state list\n\n# Show specific resource\ntofu state show grid_deployment.vm\n\n# Extract outputs\ntofu output\ntofu output primary_ip\ntofu output -json  # JSON format\n</code></pre></p>"},{"location":"troubleshooting/guide/#state-validation","title":"State Validation","text":"<p>Check State Integrity: <pre><code># 1. Verify state file exists\ntest -f .tfgrid-compose/state.yaml &amp;&amp; echo \"OK\" || echo \"Missing\"\n\n# 2. Check required fields\ngrep -q \"primary_ip:\" .tfgrid-compose/state.yaml &amp;&amp; echo \"IP OK\"\ngrep -q \"deployment_name:\" .tfgrid-compose/state.yaml &amp;&amp; echo \"Name OK\"\n\n# 3. Verify Terraform state\ncd .tfgrid-compose/terraform\ntofu validate\ntofu plan  # Should show \"No changes\"\n</code></pre></p>"},{"location":"troubleshooting/guide/#faq","title":"FAQ","text":""},{"location":"troubleshooting/guide/#general","title":"General","text":"<p>Q: Can I deploy multiple apps at once? A: Currently (v0.9.0), only one deployment per directory. Multi-deployment support coming in v0.10.0.</p> <p>Workaround: <pre><code># Use separate directories\ncd ~/projects/app1\ntfgrid-compose up .\n\ncd ~/projects/app2\ntfgrid-compose up .\n</code></pre></p> <p>Q: How do I update my deployment? A: Destroy and redeploy: <pre><code>tfgrid-compose down &lt;app&gt;\ntfgrid-compose up &lt;app&gt;\n</code></pre></p> <p>Future (v0.11.0): <code>tfgrid-compose update &lt;app&gt;</code> for in-place updates</p> <p>Q: Can I use my own SSH key? A: Yes, tfgrid-compose automatically uses keys from <code>~/.ssh/</code>: <pre><code># Uses these keys (in order):\n~/.ssh/id_ed25519.pub\n~/.ssh/id_rsa.pub\n~/.ssh/id_ecdsa.pub\n</code></pre></p> <p>To use specific key, set in pattern config.</p> <p>Q: How much does deployment cost? A: Depends on resources:</p> <ul> <li>VM: ~$2-10/month</li> <li>Storage: ~$0.15/GB/month</li> <li>Network: Usually included</li> </ul> <p>Check ThreeFold pricing: https://threefold.io/pricing</p>"},{"location":"troubleshooting/guide/#technical","title":"Technical","text":"<p>Q: OpenTofu vs Terraform - which should I use? A: OpenTofu is recommended:</p> <ul> <li>Open source (Apache 2.0)</li> <li>Community-driven</li> <li>Compatible with Terraform</li> <li>No license restrictions</li> </ul> <p>tfgrid-compose automatically detects and prefers OpenTofu.</p> <p>Q: Can I customize the Ansible playbook? A: Yes! Each pattern has a platform/ directory: <pre><code>patterns/single-vm/platform/\n\u2514\u2500\u2500 site.yml  # Main playbook\n\n# Copy pattern and modify:\ncp -r patterns/single-vm patterns/my-custom\n# Edit patterns/my-custom/platform/site.yml\n# Use: pattern: my-custom\n</code></pre></p> <p>Q: How do I add custom packages? A: Use app hooks: <pre><code># tfgrid-compose.yaml\nhooks:\n  setup: ./deployment/hooks/setup.sh\n</code></pre></p> <pre><code># deployment/hooks/setup.sh\n#!/bin/bash\napt update\napt install -y python3 nodejs npm\n</code></pre> <p>Q: Can I use a different region/node? A: Yes, specify in config: <pre><code># tfgrid-compose.yaml\nconfig:\n  node: 142  # Different node ID\n</code></pre></p> <p>Find nodes: https://dashboard.grid.tf/</p> <p>Q: How do I access the VM? A: Via SSH: <pre><code># Get IP from state\ncat .tfgrid-compose/state.yaml | grep primary_ip\n\n# SSH in\nssh root@&lt;primary-ip&gt;\n\n# Or use helper command\ntfgrid-compose ssh &lt;app&gt;\n</code></pre></p> <p>Q: Can I use this for production? A: Yes! tfgrid-compose v0.9.0 is production-ready. Recommendations:</p> <ul> <li>Use gateway pattern for web apps (public IP + SSL)</li> <li>Enable monitoring</li> <li>Set up backups</li> <li>Use version control for configuration</li> <li>Test deployments in staging first</li> </ul>"},{"location":"troubleshooting/guide/#troubleshooting","title":"Troubleshooting","text":"<p>Q: Deployment takes too long A: Typical times:</p> <ul> <li>Infrastructure: 30-60s</li> <li>Network setup: 5-10s</li> <li>SSH wait: 30-90s</li> <li>Platform config: 60-120s</li> <li>Total: 2-5 minutes</li> </ul> <p>If longer:</p> <ul> <li>Check node availability (may be slow/busy)</li> <li>Check network connectivity</li> <li>Try different node</li> </ul> <p>Q: \"Connection refused\" on SSH A: VM may still be booting: <pre><code># Wait 2-3 minutes then retry\nsleep 120\nssh root@&lt;primary-ip&gt;\n\n# Check VM status via Dashboard\n</code></pre></p> <p>Q: How do I change VM resources after deployment? A: Currently requires redeploy: <pre><code># 1. Update config\n# Edit tfgrid-compose.yaml:\nconfig:\n  cpu: 8     # Increased\n  memory: 16384\n\n# 2. Redeploy\ntfgrid-compose down &lt;app&gt;\ntfgrid-compose up &lt;app&gt;\n</code></pre></p> <p>Future: In-place resource updates</p> <p>Q: WireGuard says \"permission denied\" A: WireGuard requires root: <pre><code># Check if sudo is needed\nsudo wg show\n\n# tfgrid-compose will prompt for sudo when needed\n</code></pre></p>"},{"location":"troubleshooting/guide/#getting-help","title":"Getting Help","text":""},{"location":"troubleshooting/guide/#before-asking","title":"Before Asking","text":"<ol> <li> <p>Check logs: <pre><code>tail -50 .tfgrid-compose/*.log\n</code></pre></p> </li> <li> <p>Search documentation:</p> </li> <li>Architecture</li> <li>Quick Start</li> <li> <p>Pattern Contract</p> </li> <li> <p>Check state: <pre><code>cat .tfgrid-compose/state.yaml\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/guide/#reporting-issues","title":"Reporting Issues","text":"<p>Include in bug reports:</p> <ol> <li> <p>Environment: <pre><code># OS and version\nuname -a\n\n# tfgrid-compose version\ntfgrid-compose --version\n\n# Tool versions\ntofu --version || terraform --version\nansible --version\n</code></pre></p> </li> <li> <p>Full error output: <pre><code># Redacted mnemonic!\ncat .tfgrid-compose/terraform-apply.log\n</code></pre></p> </li> <li> <p>Steps to reproduce</p> </li> <li> <p>Configuration: <pre><code># tfgrid-compose.yaml (redact sensitive data)\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/guide/#support-channels","title":"Support Channels","text":"<p>GitHub Issues:</p> <ul> <li>Bug reports: https://github.com/tfgrid-studio/tfgrid-compose/issues</li> <li>Feature requests: Label as \"enhancement\"</li> </ul> <p>Discussions:</p> <ul> <li>Questions: https://github.com/orgs/tfgrid-studio/discussions</li> <li>Community help</li> </ul> <p>Documentation:</p> <ul> <li>Docs site: https://docs.tfgrid.studio</li> <li>GitHub: https://github.com/tfgrid-studio</li> </ul> <p>ThreeFold Resources:</p> <ul> <li>ThreeFold Manual: https://manual.grid.tf/</li> <li>ThreeFold Forum: https://forum.threefold.io/</li> <li>ThreeFold Support: https://threefold.io/support</li> </ul>"},{"location":"troubleshooting/guide/#quick-reference","title":"Quick Reference","text":""},{"location":"troubleshooting/guide/#common-commands","title":"Common Commands","text":"<pre><code># Deploy\ntfgrid-compose up &lt;app-path&gt;\n\n# Status\ntfgrid-compose status &lt;app-path&gt;\n\n# SSH\ntfgrid-compose ssh &lt;app-path&gt;\n\n# Execute command\ntfgrid-compose exec &lt;app-path&gt; &lt;command&gt;\n\n# Destroy\ntfgrid-compose down &lt;app-path&gt;\n\n# Clean state\nrm -rf .tfgrid-compose/\n\n# Check logs\ntail -f .tfgrid-compose/terraform-apply.log\ntail -f .tfgrid-compose/ansible.log\n</code></pre>"},{"location":"troubleshooting/guide/#emergency-recovery","title":"Emergency Recovery","text":"<pre><code># Nuclear option: clean everything\ntfgrid-compose down &lt;app&gt;\nrm -rf .tfgrid-compose/\nsudo wg-quick down wg0 2&gt;/dev/null || true\nsudo rm -f /etc/wireguard/wg*.conf\n\n# Then try fresh deployment\ntfgrid-compose up &lt;app&gt;\n</code></pre> <p>Document Status: Active Last Updated: 2025-10-14 Next Review: After user feedback from v0.9.0 release</p>"}]}